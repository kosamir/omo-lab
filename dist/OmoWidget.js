!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=38)}([function(e,t,n){(function(e){var o=this;t.IMPORTANT_ELEMENTS_SELECTOR='*:not(img):not(:empty):not([aria-hidden="true"]):not([class*="icon"])';var i="omolab-w-body-".concat(Date.now(),"-").concat(Math.ceil(1e3*Math.random()));t.OMOLAB_BODY_CLASS=i;t.OMO_WIDGET_COOKIE="omolab-w-cookie";t.BODY_FONT_FAMILY,t.HEADER_STYLE_ELEMENTS=void 0,t.CUSTOM_HEADER_STYLE_ELEMENTS=void 0;var r=function(e){return"".concat(e,"px")},a=function(e){console.log("inverseFontFaceColor:"+e);var t="";return void 0!==e&&"#231F20"===e.trim()&&(t="color:white !important;"),t};t.transformHeaderStyles=function(e){return e.map((function(e){return"body.".concat(i," ").concat(e,", body.").concat(i," ").concat(e," * ")}))},t.setHeaderStyle=function(e,t,n,i,s,c,l){return"".concat(e,"{ \n    font-family:").concat(t," !important; \n    font-size:").concat(r(i||o.HEADER_FONT_SIZE)," !important; \n    font-weight:").concat(n," !important;\n    letter-spacing:").concat(r(s||o.HEADER_FONT_SPACING)," !important; \n    line-height:").concat(c||o.HEADER_LINE_HEIGHT," !important;\n    ").concat(a(l),"}\n")},t.OMO_WIDGET_ELEMENTS=void 0;var s=function(e){return e.map((function(e){return"body.".concat(i," ").concat(e)}))};t.omoWidgetStyle="{ color:black }\n";t.setOmoWidgetStyle=function(e,t){return"".concat(s(e).join(",")," ").concat(t)};t.TWEAK=function(){return(e=i,t=o.ELEMENTS_TO_TWEAK_STYLE,n=[],t.forEach((function(t){n.push("body.".concat(e," ").concat(t.element," {").concat(t.style,"}"))})),n).join(",").replace(",","\n");var e,t,n},t.BODY_STYLE=void 0;t.setBodyTextStyle=function(e,t,n,i,c,l,d){return t?"".concat(s(e).join(","),"{ \n    font-family:").concat(t," !important; \n    font-size:").concat(r(i||o.BODY_FONT_SIZE)," !important; \n    font-weight:").concat(n," !important;\n    letter-spacing:").concat(r(c||o.BODY_FONT_SPACING)," !important; \n    line-height:").concat(l||o.BODY_LINE_HEIGHT," !important; \n    ").concat(a(d),"}\n"):""},t.BACKGROUND_COLOR_ELEMENTS=void 0;t.setBackGroundColor=function(e,t){return t?"".concat(s(e).join(",")," { background-color: ").concat(t," !important; ").concat(a(t),"}\n"):""};var c=n(16);t.readConfigurationFromFile=function(t){return new e((function(e,n){c.get(t).then((function(t){if(200!==t.status)throw Error(t.statusText);var n=t.data;if(o.BODY_FONT_FAMILY=n.BODY_FONT_FAMILY||"Roboto",o.HEADER_FONT_FAMILY=n.HEADER_FONT_FAMILY||"Roboto",o.HEADER_STYLE_ELEMENTS=n.HEADER_STYLE_ELEMENTS,o.CUSTOM_HEADER_STYLE_ELEMENTS=n.CUSTOM_HEADER_STYLE_ELEMENTS,o.OMO_WIDGET_ELEMENTS=n.OMO_WIDGET_ELEMENTS,o.ELEMENTS_TO_TWEAK_STYLE=n.ELEMENTS_TO_TWEAK_STYLE,o.BODY_STYLE=n.BODY_STYLE,o.BACKGROUND_COLOR_ELEMENTS=n.BACKGROUND_COLOR_ELEMENTS,o.HEADER_LINE_HEIGHT=n.HEADER_LINE_HEIGHT||0,o.HEADER_FONT_SPACING=n.HEADER_FONT_SPACING||20,o.HEADER_FONT_SIZE=n.HEADER_FONT_SIZE||20,o.BODY_LINE_HEIGHT=n.BODY_LINE_HEIGHT||0,o.BODY_LINE_HEIGHT_MAX=n.BODY_LINE_HEIGHT_MAX||40,o.BODY_FONT_SPACING=n.BODY_FONT_SPACING||0,o.BODY_FONT_SIZE=n.BODY_FONT_SIZE||13,o.BODY_FONT_SIZE_MAX=n.BODY_FONT_SIZE_MAX||30,o.BODY_FONT_WEIGHT=n.BODY_FONT_WEIGHT||"normal",o.DEFAULT_BACKGROUND=n.DEFAULT_BACKGROUND||"transparent",-1!==[o.HEADER_STYLE_ELEMENTS,o.BODY_STYLE,o.BACKGROUND_COLOR_ELEMENTS,o.OMO_WIDGET_ELEMENTS,o.CUSTOM_HEADER_STYLE_ELEMENTS].indexOf(void 0))throw Error("HEADER_STYLE_ELEMENTS,CUSTOM_HEADER_STYLE_ELEMENTS, OMO_WIDGET_ELEMENTS,BODY_STYLE, BACKGROUND_COLOR_ELEMENTS are mandatory!!!");e("FINISHED LOADING STYLESHEET")})).catch((function(e){n("".concat(e," in file ").concat(t))}))}))}}).call(this,n(2))},function(e,t,n){"use strict";var o=n(4),i=Object.prototype.toString;function r(e){return"[object Array]"===i.call(e)}function a(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function c(e){return"[object Function]"===i.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),r(e))for(var n=0,o=e.length;n<o;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:r,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:a,isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:c,isStream:function(e){return s(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:l,merge:function e(){var t={};function n(n,o){"object"==typeof t[o]&&"object"==typeof n?t[o]=e(t[o],n):t[o]=n}for(var o=0,i=arguments.length;o<i;o++)l(arguments[o],n);return t},deepMerge:function e(){var t={};function n(n,o){"object"==typeof t[o]&&"object"==typeof n?t[o]=e(t[o],n):t[o]="object"==typeof n?e({},n):n}for(var o=0,i=arguments.length;o<i;o++)l(arguments[o],n);return t},extend:function(e,t,n){return l(t,(function(t,i){e[i]=n&&"function"==typeof t?o(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){e.exports=n(13).Promise},function(e,t){var n,o,i=e.exports={};function r(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===r||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:r}catch(e){n=r}try{o="function"==typeof clearTimeout?clearTimeout:a}catch(e){o=a}}();var c,l=[],d=!1,u=-1;function g(){d&&c&&(d=!1,c.length?l=c.concat(l):u=-1,l.length&&p())}function p(){if(!d){var e=s(g);d=!0;for(var t=l.length;t;){for(c=l,l=[];++u<t;)c&&c[u].run();u=-1,t=l.length}c=null,d=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===a||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new f(e,t)),1!==l.length||d||s(p)},f.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),o=0;o<n.length;o++)n[o]=arguments[o];return e.apply(t,n)}}},function(e,t,n){"use strict";var o=n(1);function i(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var r;if(n)r=n(t);else if(o.isURLSearchParams(t))r=t.toString();else{var a=[];o.forEach(t,(function(e,t){null!=e&&(o.isArray(e)?t+="[]":e=[e],o.forEach(e,(function(e){o.isDate(e)?e=e.toISOString():o.isObject(e)&&(e=JSON.stringify(e)),a.push(i(t)+"="+i(e))})))})),r=a.join("&")}if(r){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+r}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var o=n(1),i=n(22),r={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!o.isUndefined(e)&&o.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,c={adapter:("undefined"!=typeof XMLHttpRequest?s=n(8):void 0!==t&&"[object process]"===Object.prototype.toString.call(t)&&(s=n(8)),s),transformRequest:[function(e,t){return i(t,"Accept"),i(t,"Content-Type"),o.isFormData(e)||o.isArrayBuffer(e)||o.isBuffer(e)||o.isStream(e)||o.isFile(e)||o.isBlob(e)?e:o.isArrayBufferView(e)?e.buffer:o.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):o.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},o.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),o.forEach(["post","put","patch"],(function(e){c.headers[e]=o.merge(r)})),e.exports=c}).call(this,n(3))},function(e,t,n){"use strict";(function(t){var o=n(1),i=n(23),r=n(5),a=n(25),s=n(28),c=n(29),l=n(9);e.exports=function(e){return new t((function(t,d){var u=e.data,g=e.headers;o.isFormData(u)&&delete g["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var f=e.auth.username||"",m=e.auth.password||"";g.Authorization="Basic "+btoa(f+":"+m)}var h=a(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),r(h,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?s(p.getAllResponseHeaders()):null,o={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:n,config:e,request:p};i(t,d,o),p=null}},p.onabort=function(){p&&(d(l("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){d(l("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),d(l(t,e,"ECONNABORTED",p)),p=null},o.isStandardBrowserEnv()){var v=n(30),b=(e.withCredentials||c(h))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;b&&(g[e.xsrfHeaderName]=b)}if("setRequestHeader"in p&&o.forEach(g,(function(e,t){void 0===u&&"content-type"===t.toLowerCase()?delete g[t]:p.setRequestHeader(t,e)})),o.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),d(e),p=null)})),void 0===u&&(u=null),p.send(u)}))}}).call(this,n(2))},function(e,t,n){"use strict";var o=n(24);e.exports=function(e,t,n,i,r){var a=new Error(e);return o(a,t,n,i,r)}},function(e,t,n){"use strict";var o=n(1);e.exports=function(e,t){t=t||{};var n={},i=["url","method","params","data"],r=["headers","auth","proxy"],a=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];o.forEach(i,(function(e){void 0!==t[e]&&(n[e]=t[e])})),o.forEach(r,(function(i){o.isObject(t[i])?n[i]=o.deepMerge(e[i],t[i]):void 0!==t[i]?n[i]=t[i]:o.isObject(e[i])?n[i]=o.deepMerge(e[i]):void 0!==e[i]&&(n[i]=e[i])})),o.forEach(a,(function(o){void 0!==t[o]?n[o]=t[o]:void 0!==e[o]&&(n[o]=e[o])}));var s=i.concat(r).concat(a),c=Object.keys(t).filter((function(e){return-1===s.indexOf(e)}));return o.forEach(c,(function(o){void 0!==t[o]?n[o]=t[o]:void 0!==e[o]&&(n[o]=e[o])})),n}},function(e,t,n){"use strict";function o(e){this.message=e}o.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},o.prototype.__CANCEL__=!0,e.exports=o},function(e,t){e.exports='<!DOCTYPE html>\n<html lang="en">\n\n<head>\n  <meta charset="UTF-8" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n  <meta http-equiv="X-UA-Compatible" content="ie=edge" />\n  <title>Omo</title>\n  \x3c!-- <link rel="stylesheet" href="/totemWidget.css" /> --\x3e\n</head>\n\n<body>\n  <div id="omo-widget" class="omo-widget">\n    <input type="checkbox" id="main-toggle" name="main-toggle" class="omo-widget__main-toggle" title="Open options" />\n    <label for="main-toggle"></label>\n    <fieldset data-setting-name="font-size">\n      <input type="radio" class="omo-widget__toggle-options" aria-selected="false" id="option-opened-1"\n        name="option-opened" value="1" title="Font Size" />\n      <label for="option-opened-1">Font size</label>\n      <svg viewBox="0 0 32 27">\n        <g id="font-size" fill="var(--svgFill)" fill-rule="evenodd">\n          <path class="color-in"\n            d="M1.639 8.868h13.943c.197 0 .375.078.537.227a.74.74 0 01.24.55c0 .25-.081.454-.24.614a.74.74 0 01-.537.243H9.508v14.744a.906.906 0 01-.267.631.855.855 0 01-.643.28c-.284 0-.518-.092-.695-.28a.892.892 0 01-.27-.63V10.501H1.639a.764.764 0 01-.574-.229.773.773 0 01-.23-.574c0-.232.077-.43.23-.588a.75.75 0 01.574-.243" />\n          <path class="color-in"\n            d="M9.661.224h20.914c.295 0 .562.113.802.342.242.227.363.501.363.822 0 .376-.12.683-.363.923-.24.242-.507.36-.802.36h-9.114v22.123c0 .347-.133.66-.4.94a1.277 1.277 0 01-.964.422c-.427 0-.777-.14-1.042-.422-.269-.28-.404-.593-.404-.94V2.67h-8.99c-.349 0-.638-.11-.864-.337a1.182 1.182 0 01-.34-.865c0-.347.114-.643.34-.882.226-.243.515-.362.864-.362" />\n        </g>\n      </svg>\n      <form action="#">\n        <button type="reset" id="totem_bsize_reset" class="omo-widget__reset">\n\n          <svg viewBox="0 0 23 25" width="23" height="25" xmlns="http://www.w3.org/2000/svg">\n            <path id="reset" class="color-in"\n              d="M6 3C5.3 2.3 4.6 1.5 3.7.6c-.2 2.5-.4 4.9-.7 7.3 2.6.1 5 .2 7.7.2-.9-1-1.7-1.8-2.5-2.7 2.6-1.4 6.5-.7 8.9 1.6 2.7 2.5 3.4 6.5 1.9 9.7-1.6 3.2-5.2 5.1-8.7 4.6-3.1-.5-6.8-3.1-7.1-8.2h-3c-.3 3.5 2.1 8.2 6.4 10.2 4.6 2.2 10.3 1 13.6-2.8 3.4-4.1 3.7-9.7.6-14C18.3 2.8 12.5-.2 6 3z"\n              fill-rule="nonzero" /></svg>\n          </svg>\n        </button>\n        <button type="button" tabindex="-1" class="omo-widget__add">+</button>\n        <button type="button" tabindex="-1" class="omo-widget__substract">\n          -\n        </button>\n        <input id="totem_bsize" type="number" class="omo-widget__option-value" value="0" min="1" max="30"\n          name="totem_bsize" required />\n      </form>\n    </fieldset>\n    <fieldset data-setting-name="font-type">\n      <input type="radio" class="omo-widget__toggle-options" id="option-opened-2" aria-selected="false"\n        name="option-opened" value="2" title="Font Type" />\n      <label for="option-opened-2">Font type</label>\n      <svg viewBox="0 0 27 32" id="O" width="27" height="32" xmlns="http://www.w3.org/2000/svg">\n        <g fill="none" fill-rule="evenodd">\n          <path class="color-in"\n            d="M23.981 15.832c0-5.713-3.03-10.984-9.912-10.984-6.85 0-10.04 5.43-10.04 10.984 0 5.842 3.663 11.02 10.104 11.02 6.218 0 9.848-5.178 9.848-11.02m2.937-.062c0 7.545-5.02 13.575-12.818 13.575-7.828 0-12.974-6.062-12.974-13.575 0-6.44 4.324-13.417 13.007-13.417 8.838 0 12.785 6.85 12.785 13.417"\n            fill-rule="nonzero" />\n          <path d="M0 0h27v32H0z" />\n        </g>\n      </svg>\n\n      <form action="#">\n        <button type="reset" id="totem_body_ff_reset" class="omo-widget__reset">\n          <svg viewBox="0 0 23 25" width="23" height="25" xmlns="http://www.w3.org/2000/svg">\n            <path id="reset" class="color-in"\n              d="M6 3C5.3 2.3 4.6 1.5 3.7.6c-.2 2.5-.4 4.9-.7 7.3 2.6.1 5 .2 7.7.2-.9-1-1.7-1.8-2.5-2.7 2.6-1.4 6.5-.7 8.9 1.6 2.7 2.5 3.4 6.5 1.9 9.7-1.6 3.2-5.2 5.1-8.7 4.6-3.1-.5-6.8-3.1-7.1-8.2h-3c-.3 3.5 2.1 8.2 6.4 10.2 4.6 2.2 10.3 1 13.6-2.8 3.4-4.1 3.7-9.7.6-14C18.3 2.8 12.5-.2 6 3z"\n              fill-rule="nonzero" /></svg>\n        </button>\n        <button type="button" tabindex="-1" class="omo-widget__add">+</button>\n        <div class="omo-widget__type-preview">\n          \x3c!-- O --\x3e\n          <svg viewBox="0 0 27 32" id="O" width="27" height="32" xmlns="http://www.w3.org/2000/svg">\n            <g fill="none" fill-rule="nonzero">\n              <path class="color-in"\n                d="M23.981 15.832c0-5.713-3.03-10.984-9.912-10.984-6.85 0-10.04 5.43-10.04 10.984 0 5.842 3.663 11.02 10.104 11.02 6.218 0 9.848-5.178 9.848-11.02m2.937-.062c0 7.545-5.02 13.575-12.818 13.575-7.828 0-12.974-6.062-12.974-13.575 0-6.44 4.324-13.417 13.007-13.417 8.838 0 12.785 6.85 12.785 13.417"\n                fill-rule="nonzero" />\n              <path d="M0 0h27v32H0z" />\n            </g>\n          </svg>\n          \x3c!-- A--\x3e\n          <svg viewBox="0 0 27 32" id="A" width="27" height="32" xmlns="http://www.w3.org/2000/svg">\n            <g fill="none" fill-rule="nonzero">\n              <path class="color-in"\n                d="M2.022 29.984c-.899-.323-1.224-1.08-.899-2.051 2.52-8.855 5.724-17.854 9.395-26.133C11.022.72 11.85 0 13.182 0s2.195.72 2.7 1.8c3.6 7.919 7.055 16.954 9.574 25.917.252 1.008.036 1.944-1.08 2.268-.828.217-1.69 0-2.088-1.188a217.784 217.784 0 00-1.943-6.407H6.162c-.647 2.088-1.26 4.14-1.87 6.228-.36 1.259-1.262 1.69-2.27 1.366zm5.04-10.33H19.41a226.489 226.489 0 00-6.228-16.378c-2.303 5.255-4.319 10.798-6.119 16.378z"\n                fill-rule="nonzero" />\n              <path d="M0 0h27v32H0z" />\n            </g>\n          </svg>\n\n          \x3c!--B--\x3e\n          <svg viewBox="0 0 27 32" id="B" width="27" height="32" xmlns="http://www.w3.org/2000/svg">\n            <g fill="none" fill-rule="nonzero">\n              <path class="color-in"\n                d="M14.087 30.949H4.584C3.685 30.949 3 30.23 3 29.222V3.7C3 2.08 3.792 1 5.556 1h7.379c6.372 0 9.503 2.771 9.503 7.127 0 3.384-1.764 5.688-4.751 6.659 4.104.972 6.155 3.637 6.155 7.74 0 5.687-4.571 8.423-9.755 8.423zM6.24 13.851h6.946c3.168 0 6.012-1.476 6.012-5.436 0-3.06-2.34-4.607-6.587-4.607H6.24v10.043zm0 2.735v11.556h7.234c4.067 0 7.02-1.584 7.02-5.688 0-3.816-2.196-5.868-6.875-5.868H6.24z"\n                fill-rule="nonzero" />\n              <path d="M0 0h27v32H0z" />\n            </g>\n          </svg>\n          \x3c!--C--\x3e\n          <svg viewBox="0 0 27 32" id="C" width="27" height="32" xmlns="http://www.w3.org/2000/svg">\n            <g fill="none" fill-rule="nonzero">\n              <path class="color-in"\n                d="M23.031 7.937c-1.691-3.168-4.318-4.463-8.136-4.463-7.415 0-10.942 5.507-10.942 12.67 0 7.307 3.959 12.382 10.655 12.382 4.933 0 7.235-1.8 8.495-4.104.504-.864 1.404-1.296 2.268-.899.865.396.973 1.439.576 2.159-1.619 3.456-5.363 5.688-11.376 5.688-8.53 0-13.929-6.048-13.929-15.298C.642 7.829 5.286.63 14.968.63c4.753 0 9.253 1.908 10.872 5.795.396.899.324 1.691-.469 2.195-.791.433-1.799.145-2.34-.683z"\n                fill-rule="nonzero" />\n              <path d="M0 0h27v32H0z" />\n            </g>\n          </svg>\n          \x3c!-- D --\x3e\n          <svg viewBox="0 0 27 32" id="D" width="27" height="32" xmlns="http://www.w3.org/2000/svg">\n            <g fill="none" fill-rule="nonzero">\n              <path class="color-in"\n                d="M12.619 30.974H3.836c-1.296 0-2.268-.971-2.268-2.268V3.258c0-1.296.972-2.232 2.268-2.232h8.315c8.711 0 14.578 4.788 14.578 14.686 0 10.223-6.623 15.262-14.11 15.262zm-.864-27.141H4.809v24.333h7.343c6.983 0 11.23-4.393 11.23-12.383 0-8.062-3.995-11.95-11.627-11.95z"\n                fill-rule="nonzero" />\n              <path d="M0 0h27v32H0z" />\n            </g>\n          </svg>\n          \x3c!--E --\x3e\n\n          <svg viewBox="0 0 27 32" id="E" width="27" height="32" xmlns="http://www.w3.org/2000/svg">\n            <g fill="none" fill-rule="nonzero">\n              <path class="color-in"\n                d="M22.407 31.584H5.525a2.127 2.127 0 01-2.124-2.123V3.724c0-1.152.972-2.088 2.124-2.088h16.917c.721 0 1.332.576 1.332 1.44 0 .72-.611 1.368-1.332 1.368H6.641v10.438h14.254c.756 0 1.367.576 1.367 1.404 0 .756-.611 1.404-1.367 1.404H6.641v11.087h15.766c.756 0 1.367.611 1.367 1.367 0 .829-.611 1.44-1.367 1.44z"\n                fill-rule="nonzero" />\n              <path d="M0 0h27v32H0z" />\n            </g>\n          </svg>\n\n        </div>\n        <button type="button" tabindex="-1" class="omo-widget__substract">\n          -\n        </button>\n        <input id="totem_body_ff" type="number" class="omo-widget__option-value" value="0" min="1" max="5"\n          name="totem_body_ff" />\n      </form>\n    </fieldset>\n    <fieldset data-setting-name="font-weight">\n\n      <input type="radio" id="option-opened-3" class="omo-widget__toggle-options" aria-selected="false"\n        name="option-opened" value="2" title="Font Weight" />\n      <label for="option-opened-3">Font weight</label>\n      <svg viewBox="0 0 35 24" width="35" height="24" xmlns="http://www.w3.org/2000/svg">\n        <g id="font-weight" fill-rule="evenodd">\n          <path class="color-in"\n            d="M2.069 12.225v9.878H7.95c3.437 0 6.073-1.361 6.073-4.94 0-3.245-1.855-4.938-5.826-4.938h-6.13zm0-1.522h5.908c2.635 0 4.965-1.251 4.965-4.553 0-2.552-1.97-3.854-5.547-3.854H2.069v8.407zm6.379 12.925H1.15a.832.832 0 01-.86-.86V2.517c0-1.055.503-1.746 1.61-1.746h5.852c4.662 0 6.992 2.106 6.992 5.379 0 2.554-1.471 4.329-3.631 5.105 3.162.72 4.713 2.747 4.713 5.908 0 4.384-3.467 6.465-7.38 6.465zM21.577 13.03v7.546h5.162c2.746 0 4.522-1.026 4.522-3.607 0-2.55-1.47-3.938-4.55-3.938h-5.134zm0-2.912h4.607c2.192 0 4.189-1 4.189-3.688 0-2.11-1.552-3.165-4.44-3.165h-4.356v6.853zm5.605 13.51H19.83c-.97 0-1.692-.831-1.692-1.968V2.795c0-1.553.75-2.58 2.442-2.58h5.465c5.215 0 7.795 2.19 7.795 5.66 0 2.663-1.193 4.437-3.69 5.215 3.162.805 4.719 2.857 4.719 6.02 0 4.409-3.553 6.519-7.688 6.519z" />\n        </g>\n      </svg>\n\n      <form action="#">\n        <button type="reset" id="totem_font_weight_reset" class="omo-widget__reset">\n          <svg viewBox="0 0 23 25" width="23" height="25" xmlns="http://www.w3.org/2000/svg">\n            <path id="reset" class="color-in"\n              d="M6 3C5.3 2.3 4.6 1.5 3.7.6c-.2 2.5-.4 4.9-.7 7.3 2.6.1 5 .2 7.7.2-.9-1-1.7-1.8-2.5-2.7 2.6-1.4 6.5-.7 8.9 1.6 2.7 2.5 3.4 6.5 1.9 9.7-1.6 3.2-5.2 5.1-8.7 4.6-3.1-.5-6.8-3.1-7.1-8.2h-3c-.3 3.5 2.1 8.2 6.4 10.2 4.6 2.2 10.3 1 13.6-2.8 3.4-4.1 3.7-9.7.6-14C18.3 2.8 12.5-.2 6 3z"\n              fill-rule="nonzero" /></svg>\n        </button>\n        <button type="button" tabindex="-1" class="omo-widget__add">+</button>\n        <button type="button" tabindex="-1" class="omo-widget__substract">\n          -\n        </button>\n        <input id="totem_font_weight" type="number" class="omo-widget__option-value" value="0" min="1" max="3"\n          name="totem_font_weight" />\n      </form>\n    </fieldset>\n    <fieldset data-setting-name="letter-spacing">\n      <input type="radio" id="option-opened-4" class="omo-widget__toggle-options" aria-selected="false"\n        name="option-opened" value="2" title="Letter spacing" />\n      <label for="option-opened-4">Letter spacing</label>\n      <svg viewBox="0 0 32 27" width="32" height="27" xmlns="http://www.w3.org/2000/svg">\n        <g id="letter-spacing" fill-rule="evenodd">\n          <path class="color-in"\n            d="M13.92 1.11c.266.07.451.21.56.427.103.21.131.433.076.665a96.993 96.993 0 01-2.443 7.826 106.542 106.542 0 01-2.869 7.164 2.435 2.435 0 01-.664.852 1.442 1.442 0 01-.93.344c-.373 0-.696-.113-.97-.344a2.484 2.484 0 01-.65-.852A103.151 103.151 0 013.08 9.92 98.362 98.362 0 01.662 2.305a1.1 1.1 0 01.026-.715c.09-.25.274-.41.558-.48a.975.975 0 01.72.067c.246.116.405.289.475.517.692 2.48 1.457 4.954 2.3 7.416a93.749 93.749 0 002.936 7.496 122.297 122.297 0 002.843-7.428 106.317 106.317 0 002.231-7.351c.07-.265.22-.47.45-.611a.864.864 0 01.718-.105M20.827 11.502h6.883a98.56 98.56 0 00-1.621-4.387 108.366 108.366 0 00-1.86-4.384 86.47 86.47 0 00-1.82 4.412 151.602 151.602 0 00-1.582 4.36m-3.24 6.778a.756.756 0 01-.438-.438.946.946 0 01-.013-.652 126.476 126.476 0 012.52-7.803c.94-2.615 1.96-5.132 3.06-7.562.123-.283.307-.516.557-.703.247-.186.557-.278.929-.278.37 0 .682.092.93.278.248.187.44.42.586.703a91.654 91.654 0 013.12 7.39 96.531 96.531 0 012.538 7.79c.07.246.07.494 0 .741-.07.25-.24.42-.506.505a1.047 1.047 0 01-.73-.05.804.804 0 01-.492-.586 72.045 72.045 0 00-.676-2.275c-.24-.75-.484-1.508-.733-2.27h-7.943c-.23.762-.46 1.52-.69 2.27-.23.758-.462 1.513-.691 2.275a.924.924 0 01-.532.598 1.19 1.19 0 01-.796.067M31.404 22.621c-.006-.03-.006-.06-.018-.088-.007-.02-.028-.039-.04-.059-.03-.057-.06-.117-.108-.166l-3.313-3.317a.68.68 0 10-.966.963l2.153 2.156H2.932l2.153-2.156a.684.684 0 000-.963.687.687 0 00-.965 0L.803 22.308c-.047.05-.078.11-.11.166-.01.02-.028.04-.038.06-.011.026-.01.057-.016.087a.669.669 0 00.164.65l3.315 3.32a.687.687 0 00.967 0 .686.686 0 00-.004-.968l-2.15-2.15H29.11l-2.15 2.15a.685.685 0 00-.001.967.686.686 0 00.966 0l3.313-3.319a.663.663 0 00.166-.65" />\n        </g>\n      </svg>\n\n      <form action="#">\n        <button type="reset" id="totem_bspacing_reset" class="omo-widget__reset">\n          <svg viewBox="0 0 23 25" width="23" height="25" xmlns="http://www.w3.org/2000/svg">\n            <path id="reset" class="color-in"\n              d="M6 3C5.3 2.3 4.6 1.5 3.7.6c-.2 2.5-.4 4.9-.7 7.3 2.6.1 5 .2 7.7.2-.9-1-1.7-1.8-2.5-2.7 2.6-1.4 6.5-.7 8.9 1.6 2.7 2.5 3.4 6.5 1.9 9.7-1.6 3.2-5.2 5.1-8.7 4.6-3.1-.5-6.8-3.1-7.1-8.2h-3c-.3 3.5 2.1 8.2 6.4 10.2 4.6 2.2 10.3 1 13.6-2.8 3.4-4.1 3.7-9.7.6-14C18.3 2.8 12.5-.2 6 3z"\n              fill-rule="nonzero" /></svg>\n        </button>\n        <button type="button" tabindex="-1" class="omo-widget__add">+</button>\n        <button type="button" tabindex="-1" class="omo-widget__substract">\n          -\n        </button>\n        <input id="totem_bspacing" type="number" class="omo-widget__option-value" value="0" min="1" max="4"\n          name="totem_bspacing" />\n      </form>\n    </fieldset>\n    <fieldset data-setting-name="line-height">\n      <input type="radio" class="omo-widget__toggle-options" aria-selected="false" name="option-opened" value="5"\n        title="Line height" id="option-opened-5" />\n      <label for="option-opened-5">Line height</label>\n      <svg viewBox="0 0 32 28" width="32" height="28" xmlns="http://www.w3.org/2000/svg">\n        <g id="line-height" fill-rule="evenodd">\n          <path class="color-in"\n            d="M30.551.92H13.317a.82.82 0 000 1.639h17.234a.819.819 0 000-1.64M30.551 26.095H13.317a.818.818 0 100 1.634h17.234a.817.817 0 100-1.634M9.147 22.359l-2.585 2.586V3.707l2.585 2.587a.819.819 0 001.158-1.16L6.321 1.148c-.057-.056-.126-.091-.197-.13-.026-.014-.045-.037-.072-.048-.033-.013-.069-.01-.106-.02a.802.802 0 00-.779.198L1.184 5.132a.82.82 0 101.156 1.16l2.586-2.587v21.24L2.34 22.36a.814.814 0 00-1.156-.002.815.815 0 000 1.158l3.983 3.985a.8.8 0 00.779.199c.037-.01.073-.008.106-.02.027-.011.046-.036.072-.047.071-.04.14-.075.197-.132l3.984-3.986a.816.816 0 00-.001-1.157.817.817 0 00-1.157 0M30.551 10.989H13.317a.82.82 0 000 1.639h17.234a.82.82 0 000-1.64M30.551 16.024H13.317a.82.82 0 000 1.639h17.234a.819.819 0 000-1.64M30.551 5.954H13.317a.82.82 0 00-.819.82.82.82 0 00.82.817H30.55a.818.818 0 000-1.637M30.551 21.059H13.317a.82.82 0 000 1.638h17.234a.819.819 0 000-1.638" />\n        </g>\n      </svg>\n\n      <form action="#" data-setting-name="line-height">\n        <button type="reset" id="totem_bheight_reset" class="omo-widget__reset">\n          <svg viewBox="0 0 23 25" width="23" height="25" xmlns="http://www.w3.org/2000/svg">\n            <path id="reset" class="color-in"\n              d="M6 3C5.3 2.3 4.6 1.5 3.7.6c-.2 2.5-.4 4.9-.7 7.3 2.6.1 5 .2 7.7.2-.9-1-1.7-1.8-2.5-2.7 2.6-1.4 6.5-.7 8.9 1.6 2.7 2.5 3.4 6.5 1.9 9.7-1.6 3.2-5.2 5.1-8.7 4.6-3.1-.5-6.8-3.1-7.1-8.2h-3c-.3 3.5 2.1 8.2 6.4 10.2 4.6 2.2 10.3 1 13.6-2.8 3.4-4.1 3.7-9.7.6-14C18.3 2.8 12.5-.2 6 3z"\n              fill-rule="nonzero" /></svg>\n\n        </button>\n        <button type="button" tabindex="-1" class="omo-widget__add">+</button>\n        <button type="button" tabindex="-1" class="omo-widget__substract">\n          -\n        </button>\n        <input id="totem_bheight" type="number" class="omo-widget__option-value" value="0" min="1" max="4"\n          name="totem_bheight" />\n      </form>\n    </fieldset>\n    <fieldset id="selectedBackround" data-setting-name="background">\n      <input type="radio" class="omo-widget__toggle-options" id="option-opened-6" aria-selected="false"\n        name="option-opened" value="4" title="Background" />\n      <label for="option-opened-6">Background</label>\n      <form action="#">\n        <button type="reset" class="omo-widget__reset">\n          <svg viewBox="0 0 23 25" width="23" height="25" xmlns="http://www.w3.org/2000/svg">\n            <path id="reset" class="color-in"\n              d="M6 3C5.3 2.3 4.6 1.5 3.7.6c-.2 2.5-.4 4.9-.7 7.3 2.6.1 5 .2 7.7.2-.9-1-1.7-1.8-2.5-2.7 2.6-1.4 6.5-.7 8.9 1.6 2.7 2.5 3.4 6.5 1.9 9.7-1.6 3.2-5.2 5.1-8.7 4.6-3.1-.5-6.8-3.1-7.1-8.2h-3c-.3 3.5 2.1 8.2 6.4 10.2 4.6 2.2 10.3 1 13.6-2.8 3.4-4.1 3.7-9.7.6-14C18.3 2.8 12.5-.2 6 3z"\n              fill-rule="nonzero" /></svg>\n        </button>\n        <input class="omo-widget__background-choice" type="radio" name="background" required id="background-0"\n          value="0">\n        <label for="background-0"></label>\n        <input class="omo-widget__background-choice" type="radio" name="background" required id="background-1"\n          value="1">\n        <label for="background-1"></label>\n        <input class="omo-widget__background-choice" type="radio" name="background" required id="background-2"\n          value="2">\n        <label for="background-2"></label>\n        <input class="omo-widget__background-choice" type="radio" name="background" required id="background-3"\n          value="3">\n        <label for="background-3"></label>\n        <input class="omo-widget__background-choice" type="radio" name="background" required id="background-4"\n          value="4">\n        <label for="background-4"></label>\n        <input class="omo-widget__background-choice" type="radio" name="background" required id="background-5"\n          value="5">\n        <label for="background-5"></label>\n      </form>\n    </fieldset>\n    <fieldset class="omo-widget__power-toggle-wrap" data-setting-name="widget-active">\n      <input id="applyOverides" class="omo-widget__power-toggle" type="checkbox" title="Toggle options" />\n      <label for="applyOverides"></label>\n      <svg viewBox="0 0 26 29" width="26" height="29" xmlns="http://www.w3.org/2000/svg">\n        <g id="power" fill-rule="evenodd">\n          <path class="color-in"\n            d="M20.397 7.824c6.246 6.773 1.866 17.455-7.376 17.809-9.519.363-13.263-11.426-7.376-17.81 1.09-1.181-.673-2.954-1.768-1.767-7.736 8.387-2.297 21.639 9.144 22.077 11.777.449 16.435-14.17 9.144-22.077-1.096-1.187-2.86.586-1.768 1.768" />\n          <path class="color-in" d="M11.77 1.718v10.445c0 1.612 2.5 1.612 2.5 0V1.718c0-1.613-2.5-1.613-2.5 0" />\n        </g>\n      </svg>\n    </fieldset>\n    <div class="omo-widget__link-wrap">\n      <a href="https://omolab.com/" target="_blank" data-setting-name="widget-info" title="Find out more">\n        <svg viewBox="0 0 10 31" width="10" height="31" xmlns="http://www.w3.org/2000/svg">\n          <g id="info" fill-rule="evenodd">\n            <path class="color-in"\n              d="M9.535 17.468a4.442 4.442 0 00-4.443-4.44 4.443 4.443 0 00-4.445 4.44v8.89a4.443 4.443 0 004.445 4.44 4.442 4.442 0 004.443-4.44v-8.89zM9.535 5.242A4.443 4.443 0 11.648 5.24a4.443 4.443 0 018.887 0" />\n          </g>\n        </svg>\n      </a>\n    </div>\n  </div>\n  \x3c!-- <script src="./totemWidget.js"><\/script>\n    <script>\n      initOmoWidgetControls();\n    <\/script> --\x3e\n</body>\n\n</html>'},function(e,t,n){(function(t,o){var i;
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   3.3.1
 */i=function(){"use strict";function e(e){return"function"==typeof e}var i=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},r=0,a=void 0,s=void 0,c=function(e,t){m[r]=e,m[r+1]=t,2===(r+=2)&&(s?s(h):y())},l="undefined"!=typeof window?window:void 0,d=l||{},u=d.MutationObserver||d.WebKitMutationObserver,g="undefined"==typeof self&&void 0!==t&&"[object process]"==={}.toString.call(t),p="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function f(){var e=setTimeout;return function(){return e(h,1)}}var m=new Array(1e3);function h(){for(var e=0;e<r;e+=2)(0,m[e])(m[e+1]),m[e]=void 0,m[e+1]=void 0;r=0}var v,b,_,w,y=void 0;function E(e,t){var n=arguments,o=this,i=new this.constructor(O);void 0===i[k]&&Y(i);var r,a=o._state;return a?(r=n[a-1],c((function(){return j(a,i,r,o._result)}))):I(o,i,e,t),i}function x(e){if(e&&"object"==typeof e&&e.constructor===this)return e;var t=new this(O);return N(t,e),t}g?y=function(){return t.nextTick(h)}:u?(b=0,_=new u(h),w=document.createTextNode(""),_.observe(w,{characterData:!0}),y=function(){w.data=b=++b%2}):p?((v=new MessageChannel).port1.onmessage=h,y=function(){return v.port2.postMessage(0)}):y=void 0===l?function(){try{var e=n(15);return a=e.runOnLoop||e.runOnContext,function(){a(h)}}catch(e){return f()}}():f();var k=Math.random().toString(36).substring(16);function O(){}var T=void 0,S=1,A=2,L=new R;function C(e){try{return e.then}catch(e){return L.error=e,L}}function B(t,n,o){n.constructor===t.constructor&&o===E&&n.constructor.resolve===x?function(e,t){t._state===S?M(e,t._result):t._state===A?D(e,t._result):I(t,void 0,(function(t){return N(e,t)}),(function(t){return D(e,t)}))}(t,n):o===L?D(t,L.error):void 0===o?M(t,n):e(o)?function(e,t,n){c((function(e){var o=!1,i=function(e,t,n,o){try{e.call(t,n,o)}catch(e){return e}}(n,t,(function(n){o||(o=!0,t!==n?N(e,n):M(e,n))}),(function(t){o||(o=!0,D(e,t))}),e._label);!o&&i&&(o=!0,D(e,i))}),e)}(t,n,o):M(t,n)}function N(e,t){var n;e===t?D(e,new TypeError("You cannot resolve a promise with itself")):"function"==typeof(n=t)||"object"==typeof n&&null!==n?B(e,t,C(t)):M(e,t)}function z(e){e._onerror&&e._onerror(e._result),F(e)}function M(e,t){e._state===T&&(e._result=t,e._state=S,0!==e._subscribers.length&&c(F,e))}function D(e,t){e._state===T&&(e._state=A,e._result=t,c(z,e))}function I(e,t,n,o){var i=e._subscribers,r=i.length;e._onerror=null,i[r]=t,i[r+S]=n,i[r+A]=o,0===r&&e._state&&c(F,e)}function F(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var o=void 0,i=void 0,r=e._result,a=0;a<t.length;a+=3)o=t[a],i=t[a+n],o?j(n,o,i,r):i(r);e._subscribers.length=0}}function R(){this.error=null}var H=new R;function j(t,n,o,i){var r=e(o),a=void 0,s=void 0,c=void 0,l=void 0;if(r){if((a=function(e,t){try{return e(t)}catch(e){return H.error=e,H}}(o,i))===H?(l=!0,s=a.error,a=null):c=!0,n===a)return void D(n,new TypeError("A promises callback cannot return that same promise."))}else a=i,c=!0;n._state!==T||(r&&c?N(n,a):l?D(n,s):t===S?M(n,a):t===A&&D(n,a))}var U=0;function Y(e){e[k]=U++,e._state=void 0,e._result=void 0,e._subscribers=[]}function q(e,t){this._instanceConstructor=e,this.promise=new e(O),this.promise[k]||Y(this.promise),i(t)?(this._input=t,this.length=t.length,this._remaining=t.length,this._result=new Array(this.length),0===this.length?M(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&M(this.promise,this._result))):D(this.promise,new Error("Array Methods must be provided an Array"))}function G(e){this[k]=U++,this._result=this._state=void 0,this._subscribers=[],O!==e&&("function"!=typeof e&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof G?function(e,t){try{t((function(t){N(e,t)}),(function(t){D(e,t)}))}catch(t){D(e,t)}}(this,e):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}function P(){var e=void 0;if(void 0!==o)e=o;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var n=null;try{n=Object.prototype.toString.call(t.resolve())}catch(e){}if("[object Promise]"===n&&!t.cast)return}e.Promise=G}return q.prototype._enumerate=function(){for(var e=this.length,t=this._input,n=0;this._state===T&&n<e;n++)this._eachEntry(t[n],n)},q.prototype._eachEntry=function(e,t){var n=this._instanceConstructor,o=n.resolve;if(o===x){var i=C(e);if(i===E&&e._state!==T)this._settledAt(e._state,t,e._result);else if("function"!=typeof i)this._remaining--,this._result[t]=e;else if(n===G){var r=new n(O);B(r,e,i),this._willSettleAt(r,t)}else this._willSettleAt(new n((function(t){return t(e)})),t)}else this._willSettleAt(o(e),t)},q.prototype._settledAt=function(e,t,n){var o=this.promise;o._state===T&&(this._remaining--,e===A?D(o,n):this._result[t]=n),0===this._remaining&&M(o,this._result)},q.prototype._willSettleAt=function(e,t){var n=this;I(e,void 0,(function(e){return n._settledAt(S,t,e)}),(function(e){return n._settledAt(A,t,e)}))},G.all=function(e){return new q(this,e).promise},G.race=function(e){var t=this;return i(e)?new t((function(n,o){for(var i=e.length,r=0;r<i;r++)t.resolve(e[r]).then(n,o)})):new t((function(e,t){return t(new TypeError("You must pass an array to race."))}))},G.resolve=x,G.reject=function(e){var t=new this(O);return D(t,e),t},G._setScheduler=function(e){s=e},G._setAsap=function(e){c=e},G._asap=c,G.prototype={constructor:G,then:E,catch:function(e){return this.then(null,e)}},P(),G.polyfill=P,G.Promise=G,G},e.exports=i()}).call(this,n(3),n(14))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){},function(e,t,n){e.exports=n(17)},function(e,t,n){"use strict";(function(t){var o=n(1),i=n(4),r=n(18),a=n(10);function s(e){var t=new r(e),n=i(r.prototype.request,t);return o.extend(n,r.prototype,t),o.extend(n,t),n}var c=s(n(7));c.Axios=r,c.create=function(e){return s(a(c.defaults,e))},c.Cancel=n(11),c.CancelToken=n(31),c.isCancel=n(6),c.all=function(e){return t.all(e)},c.spread=n(32),e.exports=c,e.exports.default=c}).call(this,n(2))},function(e,t,n){"use strict";(function(t){var o=n(1),i=n(5),r=n(19),a=n(20),s=n(10);function c(e){this.defaults=e,this.interceptors={request:new r,response:new r}}c.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var n=[a,void 0],o=t.resolve(e);for(this.interceptors.request.forEach((function(e){n.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){n.push(e.fulfilled,e.rejected)}));n.length;)o=o.then(n.shift(),n.shift());return o},c.prototype.getUri=function(e){return e=s(this.defaults,e),i(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},o.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}})),o.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,i){return this.request(o.merge(i||{},{method:e,url:t,data:n}))}})),e.exports=c}).call(this,n(2))},function(e,t,n){"use strict";var o=n(1);function i(){this.handlers=[]}i.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){o.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=i},function(e,t,n){"use strict";(function(t){var o=n(1),i=n(21),r=n(6),a=n(7);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=o.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),o.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return s(e),t.data=i(t.data,t.headers,e.transformResponse),t}),(function(n){return r(n)||(s(e),n&&n.response&&(n.response.data=i(n.response.data,n.response.headers,e.transformResponse))),t.reject(n)}))}}).call(this,n(2))},function(e,t,n){"use strict";var o=n(1);e.exports=function(e,t,n){return o.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";var o=n(1);e.exports=function(e,t){o.forEach(e,(function(n,o){o!==t&&o.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[o])}))}},function(e,t,n){"use strict";var o=n(9);e.exports=function(e,t,n){var i=n.config.validateStatus;!i||i(n.status)?e(n):t(o("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,o,i){return e.config=t,n&&(e.code=n),e.request=o,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var o=n(26),i=n(27);e.exports=function(e,t){return e&&!o(t)?i(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var o=n(1),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,r,a={};return e?(o.forEach(e.split("\n"),(function(e){if(r=e.indexOf(":"),t=o.trim(e.substr(0,r)).toLowerCase(),n=o.trim(e.substr(r+1)),t){if(a[t]&&i.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var o=n(1);e.exports=o.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(e){var o=e;return t&&(n.setAttribute("href",o),o=n.href),n.setAttribute("href",o),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=i(window.location.href),function(t){var n=o.isString(t)?i(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var o=n(1);e.exports=o.isStandardBrowserEnv()?{write:function(e,t,n,i,r,a){var s=[];s.push(e+"="+encodeURIComponent(t)),o.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),o.isString(i)&&s.push("path="+i),o.isString(r)&&s.push("domain="+r),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";(function(t){var o=n(11);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var n;this.promise=new t((function(e){n=e}));var i=this;e((function(e){i.reason||(i.reason=new o(e),n(i.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e;return{token:new i((function(t){e=t})),cancel:e}},e.exports=i}).call(this,n(2))},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){var o=n(34);"string"==typeof o&&(o=[[e.i,o,""]]);var i={hmr:!0,transform:void 0};n(36)(o,i);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(35)(!1)).push([e.i,'@font-face {\n  font-family: OmoTypeA-;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-RegularOne.woff");\n}\n\n@font-face {\n  font-family: OmoTypeB-;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-RegularOne.woff");\n}\n@font-face {\n  font-family: OmoTypeC-;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-RegularOne.woff");\n}\n@font-face {\n  font-family: OmoTypeD-;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-RegularOne.woff");\n}\n@font-face {\n  font-family: OmoTypeE-;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-RegularOne.woff");\n}\n@font-face {\n  font-family: OmoType-RegularStdTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/std/OmoType-RegularStdTwo.ttf");\n}\n\n:root {\n  --primary: #eb8b2d;\n  --secondary: #2093aa;\n  --svgFill: white;\n  --size: 46px;\n  --margin-size: 2px;\n  --sizeAdjusted: calc(var(--size) + 2 * var(--margin-size));\n  --animationSpeed: 0.15s;\n  --triangleSize: calc(var(--sizeAdjusted) / 3);\n}\n@media (min-width: 768px) {\n  :root {\n    --size: 62px;\n    --margin-size: 3px;\n  }\n}\n.omo-widget {\n  position: fixed;\n  z-index: 9999999999999 !important;\n  bottom: 23px;\n  bottom: calc(var(--size) * 0.5);\n  right: 23px;\n  right: calc(var(--size) * 0.5);\n  background-color: black;\n  font-size: 0;\n  border-radius: 25px;\n  border-radius: calc(var(--size) * 0.5 + var(--margin-size));\n  display: flex;\n  flex-direction: column-reverse;\n}\n@media (min-width: 768px) {\n  .omo-widget {\n    top: 23px;\n    top: calc(var(--size) * 0.5);\n    bottom: auto;\n    flex-direction: column;\n  }\n}\n.omo-widget * {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  outline: none !important;\n}\n.omo-widget * label:focus,\n.omo-widget * label:active,\n.omo-widget * button:focus,\n.omo-widget * button:active {\n  box-shadow: 0 0 0px 2px #2093aa;\n  box-shadow: 0 0 0px var(--margin-size) var(--secondary);\n}\n.omo-widget__main-toggle {\n  display: none !important;\n}\n.omo-widget__main-toggle + label {\n  background: black !important;\n  position: relative;\n  border: none !important;\n}\n.omo-widget__main-toggle + label::before {\n  content: "";\n  display: block;\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: white;\n}\n.omo-widget__main-toggle + label ~ * {\n  transition: height 0.15s ease 0.15s, transform 0.15s ease, opacity 0.15s ease;\n  transition: height var(--animationSpeed) ease var(--animationSpeed),\n    transform var(--animationSpeed) ease, opacity var(--animationSpeed) ease;\n  transform: scale(0.8);\n  height: 0;\n  opacity: 0;\n  z-index: 2;\n  pointer-events: none;\n}\n.omo-widget__main-toggle:checked + label ~ * {\n  transition: height 0.15s ease, transform 0.15s ease 0.15s,\n    opacity 0.15s ease 0.15s;\n  transition: height var(--animationSpeed) ease,\n    transform var(--animationSpeed) ease var(--animationSpeed),\n    opacity var(--animationSpeed) ease var(--animationSpeed);\n  height: 50px;\n  height: var(--sizeAdjusted);\n  opacity: 1;\n  transform: scale(1);\n  pointer-events: all;\n}\n.omo-widget__main-toggle:checked + label ~ * .omo-widget__link-wrap {\n  height: 48px;\n  height: calc(var(--size) + var(--margin-size));\n}\n.omo-widget__main-toggle:checked + label ~ * .omo-widget__link-wrap a {\n  margin-bottom: 0;\n}\n.omo-widget__power-toggle-wrap {\n  pointer-events: none !important;\n}\n.omo-widget__power-toggle-wrap > * {\n  opacity: 0.5;\n}\n.omo-widget__power-toggle {\n  display: none;\n}\n.omo-widget.has-changes\n  .omo-widget__main-toggle:checked\n  + label\n  ~ .omo-widget__power-toggle-wrap {\n  pointer-events: all !important;\n}\n.omo-widget.has-changes\n  .omo-widget__main-toggle:checked\n  + label\n  ~ .omo-widget__power-toggle-wrap\n  > * {\n  opacity: 1;\n}\n.omo-widget.has-changes\n  .omo-widget__main-toggle:checked\n  + label\n  ~ .omo-widget__power-toggle-wrap\n  .omo-widget__power-toggle\n  + label {\n  background: #eb8b2d;\n  background: var(--primary);\n}\n.omo-widget.has-changes .omo-widget__main-toggle {\n  background: #eb8b2d !important;\n  background: var(--primary) !important;\n}\n.omo-widget.power-off > .omo-widget__main-toggle {\n  background: white !important;\n}\n.omo-widget.power-off\n  > .omo-widget__main-toggle:checked\n  + label\n  ~ *:not(:nth-last-child(-n + 2)) {\n  opacity: 0.4;\n  pointer-events: none;\n}\n.omo-widget.power-off .omo-widget__power-toggle + label {\n  background: black !important;\n}\n.omo-widget__add,\n.omo-widget__substract,\n.omo-widget__reset,\n.omo-widget__power-toggle + label,\n.omo-widget__main-toggle + label,\n.omo-widget__toggle-options + label,\n.omo-widget__background-choice + label,\n.omo-widget__link-wrap a,\n.omo-widget__type-preview {\n  -webkit-appearance: none;\n  display: block;\n  width: 46px;\n  width: var(--size);\n  height: 46px;\n  height: var(--size);\n  margin: 2px !important;\n  margin: var(--margin-size) !important;\n  background: transparent;\n  border: 2px solid white;\n  border-radius: 50%;\n  font-size: 0;\n}\n.omo-widget__add.active,\n.omo-widget__substract.active,\n.omo-widget__reset.active,\n.omo-widget__power-toggle + label.active,\n.omo-widget__main-toggle + label.active,\n.omo-widget__toggle-options + label.active,\n.omo-widget__background-choice + label.active,\n.omo-widget__link-wrap a.active,\n.omo-widget__type-preview.active {\n  background-color: white;\n}\n.omo-widget__add.active + svg .color-in,\n.omo-widget__add.active > svg .color-in,\n.omo-widget__substract.active + svg .color-in,\n.omo-widget__substract.active > svg .color-in,\n.omo-widget__reset.active + svg .color-in,\n.omo-widget__reset.active > svg .color-in,\n.omo-widget__power-toggle + label.active + svg .color-in,\n.omo-widget__power-toggle + label.active > svg .color-in,\n.omo-widget__main-toggle + label.active + svg .color-in,\n.omo-widget__main-toggle + label.active > svg .color-in,\n.omo-widget__toggle-options + label.active + svg .color-in,\n.omo-widget__toggle-options + label.active > svg .color-in,\n.omo-widget__background-choice + label.active + svg .color-in,\n.omo-widget__background-choice + label.active > svg .color-in,\n.omo-widget__link-wrap a.active + svg .color-in,\n.omo-widget__link-wrap a.active > svg .color-in,\n.omo-widget__type-preview.active + svg .color-in,\n.omo-widget__type-preview.active > svg .color-in {\n  fill: black;\n}\n.omo-widget__add.active::after,\n.omo-widget__substract.active::after,\n.omo-widget__reset.active::after,\n.omo-widget__power-toggle + label.active::after,\n.omo-widget__main-toggle + label.active::after,\n.omo-widget__toggle-options + label.active::after,\n.omo-widget__background-choice + label.active::after,\n.omo-widget__link-wrap a.active::after,\n.omo-widget__type-preview.active::after {\n  border-color: transparent transparent black transparent;\n}\n.omo-widget__link-wrap {\n  margin-bottom: 0;\n  overflow: hidden;\n}\n.omo-widget__link-wrap a {\n  background: #2093aa;\n  background: var(--secondary);\n}\n.omo-widget__option-value {\n  display: none;\n}\n.omo-widget svg {\n  display: block !important;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  pointer-events: none;\n  max-width: 55%;\n  max-height: 55%;\n  height: auto;\n}\n.omo-widget svg .color-in {\n  fill: white;\n  fill: var(--svgFill);\n}\n.omo-widget form {\n  position: relative;\n}\n.omo-widget form.valid::after {\n  content: "";\n  width: 46px;\n  width: var(--size);\n  height: 46px;\n  height: var(--size);\n  background: #eb8b2d;\n  background: var(--primary);\n  position: absolute;\n  right: 2px;\n  right: var(--margin-size);\n  top: 2px;\n  top: var(--margin-size);\n  z-index: 323;\n  border-radius: 50%;\n}\n.omo-widget form.valid [type="reset"] {\n  display: flex;\n}\n.omo-widget__toggle-options {\n  display: none;\n}\n.omo-widget__toggle-options + label ~ form {\n  transition: width 0.15s ease 0.15s;\n  transition: width var(--animationSpeed) ease var(--animationSpeed);\n  width: 50px;\n  width: var(--sizeAdjusted);\n  height: 50px;\n  height: var(--sizeAdjusted);\n  pointer-events: none;\n  display: flex;\n}\n.omo-widget__toggle-options + label ~ form > * {\n  transition: opacity 0.15s ease;\n  transition: opacity var(--animationSpeed) ease;\n  opacity: 0;\n}\n.omo-widget__toggle-options:checked + label ~ form {\n  transition: width 0.15s ease;\n  transition: width var(--animationSpeed) ease;\n  width: 150px;\n  width: calc(3 * var(--sizeAdjusted));\n  pointer-events: all;\n}\n.omo-widget__toggle-options:checked + label ~ form [type="reset"] {\n  transition: opacity 0.15s ease;\n  transition: opacity var(--animationSpeed) ease;\n  position: absolute;\n  left: 0;\n  opacity: 0;\n}\n.omo-widget__toggle-options:checked + label ~ form.valid {\n  transition: width 0.15s ease, padding 0.15s ease;\n  transition: width var(--animationSpeed) ease,\n    padding var(--animationSpeed) ease;\n  width: 200px;\n  width: calc(4 * var(--sizeAdjusted));\n  padding-left: 50px;\n  padding-left: var(--sizeAdjusted);\n}\n.omo-widget__toggle-options:checked + label ~ form.valid [type="reset"] {\n  transition: opacity 0.15s ease;\n  transition: opacity var(--animationSpeed) ease;\n  opacity: 1;\n}\n.omo-widget__toggle-options:checked + label ~ form > * {\n  transition: opacity 0.15s ease 0.15s;\n  transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  opacity: 1;\n}\n.omo-widget__toggle-options > * {\n  transition: opacity 0.15s ease;\n  transition: opacity var(--animationSpeed) ease;\n  opacity: 1;\n}\n.omo-widget fieldset {\n  border: none;\n  position: relative;\n}\n.omo-widget form {\n  position: absolute;\n  top: 0;\n  right: 0;\n  background: black;\n  border-radius: 25px;\n  border-radius: calc(var(--sizeAdjusted) * 0.5);\n  padding-right: 50px;\n  padding-right: var(--sizeAdjusted);\n  z-index: -1;\n}\n.omo-widget [type="reset"] {\n  position: relative;\n}\n.omo-widget__add,\n.omo-widget__substract {\n  position: relative;\n}\n.omo-widget__add::after,\n.omo-widget__substract::after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, 0%) rotate(180deg);\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 0 16.66667px 16.66667px 16.66667px;\n  border-width: 0 var(--triangleSize) var(--triangleSize) var(--triangleSize);\n  border-color: transparent transparent white transparent;\n}\n.omo-widget__add::after {\n  transform: translate(-50%, -100%);\n}\n:root {\n  --bgColor0: #eff3ee;\n  --bgColor1: #d9d8d8;\n  --bgColor2: #231f20;\n  --bgColor3: #9fb5de;\n  --bgColor4: #b894c4;\n  --bgColor5: #e2b0af;\n}\nbody {\n  background: white;\n}\n.omo-widget [data-setting-name="background"] {\n  position: relative;\n  z-index: 1;\n}\n.omo-widget [data-setting-name="background"] form {\n  transition: all 0.15s ease 0.15s;\n  transition: all var(--animationSpeed) ease var(--animationSpeed);\n  height: 120px;\n  height: calc(var(--sizeAdjusted) * 2 + 20px);\n  bottom: -10px;\n  top: auto;\n  display: flex;\n  flex-wrap: wrap;\n}\n.omo-widget [data-setting-name="background"] form > * {\n  transition: opacity 0.15s ease;\n  transition: opacity var(--animationSpeed) ease;\n  opacity: 0 !important;\n}\n.omo-widget [data-setting-name="background"] form.valid::after {\n  display: none;\n}\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__toggle-options\n  + label {\n  background: white;\n}\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__toggle-options:checked\n  + label\n  ~ form {\n  transition: width 0.15s ease;\n  transition: width var(--animationSpeed) ease;\n  width: 170px;\n  width: calc(var(--sizeAdjusted) * 3 + 20px);\n  padding: 10px;\n  border-top-right-radius: var(--sizeAdjusted/2);\n  border-bottom-right-radius: 0px;\n  margin-right: 50px;\n  margin-right: var(--sizeAdjusted);\n}\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__toggle-options:checked\n  + label\n  ~ form\n  > *:not(.omo-widget__reset) {\n  transition: opacity 0.15s ease 0.15s;\n  transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  opacity: 1 !important;\n}\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__toggle-options:checked\n  + label\n  ~ form.valid::before {\n  content: "";\n  position: absolute;\n  background: black;\n  width: 120px;\n  width: calc(2 * var(--sizeAdjusted) + 20px);\n  height: 70px;\n  height: calc(var(--sizeAdjusted) + 20px);\n  z-index: -1;\n  top: 0;\n  right: calc(100% - 70px);\n  right: calc(100% - var(--sizeAdjusted) - 20px);\n  border-top-left-radius: 60px;\n  border-top-left-radius: calc(var(--sizeAdjusted) + 10px);\n  border-bottom-left-radius: 60px;\n  border-bottom-left-radius: calc(var(--sizeAdjusted) + 10px);\n}\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__toggle-options:checked\n  + label\n  ~ form.valid\n  .omo-widget__reset {\n  opacity: 1 !important;\n}\n.omo-widget [data-setting-name="background"]::after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: calc(100% - 8px);\n  width: calc(100% - 2 * (var(--margin-size) + 2px));\n  height: 0;\n  padding-top: calc(50% - 4px);\n  padding-top: calc(50% - 2 * var(--margin-size));\n  transform: translate(-50%, -50%);\n  border-radius: 50%;\n  border-top: 23px solid white;\n  border-top: calc(var(--size) / 2) solid white;\n  background: black;\n  pointer-events: none;\n}\n.omo-widget [data-setting-name="background"][data-value="0"]::after {\n  background: #eff3ee;\n  background: var(--bgColor0);\n}\n.omo-widget [data-setting-name="background"][data-value="1"]::after {\n  background: #d9d8d8;\n  background: var(--bgColor1);\n}\n.omo-widget [data-setting-name="background"][data-value="2"]::after {\n  background: #231f20;\n  background: var(--bgColor2);\n}\n.omo-widget [data-setting-name="background"][data-value="3"]::after {\n  background: #9fb5de;\n  background: var(--bgColor3);\n}\n.omo-widget [data-setting-name="background"][data-value="4"]::after {\n  background: #b894c4;\n  background: var(--bgColor4);\n}\n.omo-widget [data-setting-name="background"][data-value="5"]::after {\n  background: #e2b0af;\n  background: var(--bgColor5);\n}\n.omo-widget [data-setting-name="background"] .omo-widget__reset {\n  position: absolute;\n  right: calc(100% - 10px);\n  background: black;\n  left: auto !important;\n}\n.omo-widget [data-setting-name="background"] .omo-widget__reset:active {\n  background: white;\n}\n.omo-widget [data-setting-name="background"] .omo-widget__background-choice {\n  display: none;\n}\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="0"]\n  + label {\n  background: #eff3ee !important;\n  background: var(--bgColor0) !important;\n}\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="1"]\n  + label {\n  background: #d9d8d8 !important;\n  background: var(--bgColor1) !important;\n}\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="2"]\n  + label {\n  background: #231f20 !important;\n  background: var(--bgColor2) !important;\n}\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="3"]\n  + label {\n  background: #9fb5de !important;\n  background: var(--bgColor3) !important;\n}\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="4"]\n  + label {\n  background: #b894c4 !important;\n  background: var(--bgColor4) !important;\n}\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="5"]\n  + label {\n  background: #e2b0af !important;\n  background: var(--bgColor5) !important;\n}\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice:checked\n  + label {\n  border-color: #eb8b2d;\n  border-color: var(--primary);\n}\n.omo-widget\n  [data-setting-name="font-type"]\n  .omo-widget__toggle-options:checked\n  ~ form {\n  width: 200px;\n  width: calc(4 * var(--sizeAdjusted));\n}\n.omo-widget\n  [data-setting-name="font-type"]\n  .omo-widget__toggle-options:checked\n  ~ form.valid {\n  transition: width 0.15s ease, padding 0.15s ease;\n  transition: width var(--animationSpeed) ease,\n    padding var(--animationSpeed) ease;\n  width: 250px;\n  width: calc(5 * var(--sizeAdjusted));\n  padding-left: 50px;\n  padding-left: var(--sizeAdjusted);\n}\n.omo-widget\n  [data-setting-name="font-type"]\n  .omo-widget__toggle-options:checked\n  ~ form.valid\n  [type="reset"] {\n  transition: opacity 0.15s ease 0.15s;\n  transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  opacity: 1;\n}\n.omo-widget__type-preview {\n  position: relative;\n  pointer-events: none;\n}\n.omo-widget__type-preview svg {\n  display: none !important;\n}\n.omo-widget__type-preview:not([data-selected]) svg:nth-child(1),\n.omo-widget__type-preview[data-selected="O"] svg:nth-child(1) {\n  display: block !important;\n}\n.omo-widget__type-preview[data-selected="A"] svg:nth-child(2) {\n  display: block !important;\n}\n.omo-widget__type-preview[data-selected="B"] svg:nth-child(3) {\n  display: block !important;\n}\n.omo-widget__type-preview[data-selected="C"] svg:nth-child(4) {\n  display: block !important;\n}\n.omo-widget__type-preview[data-selected="D"] svg:nth-child(5) {\n  display: block !important;\n}\n.omo-widget__type-preview[data-selected="E"] svg:nth-child(6) {\n  display: block !important;\n}\n',""])},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var i=(a=o,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),r=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot).concat(e," */")}));return[n].concat(r).concat([i]).join("\n")}var a,s,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},i=0;i<this.length;i++){var r=this[i][0];null!=r&&(o[r]=!0)}for(var a=0;a<e.length;a++){var s=e[a];null!=s[0]&&o[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="(".concat(s[2],") and (").concat(n,")")),t.push(s))}},t}},function(e,t,n){var o,i,r={},a=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=o.apply(this,arguments)),i}),s=function(e){var t={};return function(n){if(void 0===t[n]){var o=e.call(this,n);if(o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[n]=o}return t[n]}}((function(e){return document.querySelector(e)})),c=null,l=0,d=[],u=n(37);function g(e,t){for(var n=0;n<e.length;n++){var o=e[n],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(b(o.parts[a],t))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(b(o.parts[a],t));r[o.id]={id:o.id,refs:1,parts:s}}}}function p(e,t){for(var n=[],o={},i=0;i<e.length;i++){var r=e[i],a=t.base?r[0]+t.base:r[0],s={css:r[1],media:r[2],sourceMap:r[3]};o[a]?o[a].parts.push(s):n.push(o[a]={id:a,parts:[s]})}return n}function f(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=d[d.length-1];if("top"===e.insertAt)o?o.nextSibling?n.insertBefore(t,o.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),d.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=s(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,i)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=d.indexOf(e);t>=0&&d.splice(t,1)}function h(e){var t=document.createElement("style");return e.attrs.type="text/css",v(t,e.attrs),f(e,t),t}function v(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function b(e,t){var n,o,i,r;if(t.transform&&e.css){if(!(r=t.transform(e.css)))return function(){};e.css=r}if(t.singleton){var a=l++;n=c||(c=h(t)),o=y.bind(null,n,a,!1),i=y.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",v(t,e.attrs),f(e,t),t}(t),o=x.bind(null,n,t),i=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=h(t),o=E.bind(null,n),i=function(){m(n)});return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else i()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return g(n,t),function(e){for(var o=[],i=0;i<n.length;i++){var a=n[i];(s=r[a.id]).refs--,o.push(s)}e&&g(p(e,t),t);for(i=0;i<o.length;i++){var s;if(0===(s=o[i]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete r[s.id]}}}};var _,w=(_=[],function(e,t){return _[e]=t,_.filter(Boolean).join("\n")});function y(e,t,n,o){var i=n?"":o.css;if(e.styleSheet)e.styleSheet.cssText=w(t,i);else{var r=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(r,a[t]):e.appendChild(r)}}function E(e,t){var n=t.css,o=t.media;if(o&&e.setAttribute("media",o),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function x(e,t,n){var o=n.css,i=n.sourceMap,r=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||r)&&(o=u(o)),i&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([o],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,o=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var i,r=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(r)?e:(i=0===r.indexOf("//")?r:0===r.indexOf("/")?n+r:o+r.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")}))}},function(e,t,n){"use strict";n.r(t);var o,i=n(0),r=n.n(i),a=(n(33),n(12)),s=n.n(a),c=[],l=function(){var e=document.querySelector("#omo-widget"),t=e.querySelector(".omo-widget__main-toggle"),n=e.querySelectorAll("form"),o=e.querySelectorAll(".omo-widget__toggle-options"),i=e.querySelectorAll(".omo-widget__option-value"),r=e.querySelectorAll('[type="button"]'),a=e.querySelectorAll(".omo-widget__reset"),s=e.querySelector('[data-setting-name="background"] form'),c=s.querySelector(".omo-widget__reset"),l=e.querySelector(".omo-widget__type-preview"),d=e.querySelector(".omo-widget__power-toggle"),u=e.querySelectorAll("label, button"),g=function(){[].slice.call(o).forEach((function(e){e.checked=!1,e.setAttribute("aria-selected","false")}))},p=function(e){l.setAttribute("data-selected",["O","A","B","C","D","E"][e])},f=function(e){var t=e.target.parentElement.querySelector("[type='number'"),n=parseInt(t.value),o=e.target.classList.contains("omo-widget__add");console.log(t.id+" "+t.value),o&&n==t.getAttribute("max")||!o&&0==n||(t.value=o?n+1:n-1,m(),"totem_body_ff"===t.id&&p(t.value))},m=function(){var t=0;return[].slice.call(n).forEach((function(e){console.log("form.checkValidity:"+e.checkValidity()),e.checkValidity()?(e.classList.add("valid"),t++):e.classList.remove("valid")})),t>0&&A(),console.log(t),O(t),e.classList[t>0?"add":"remove"]("has-changes"),t},h=function(e){var t="ArrowDown"==e.code,n="ArrowUp"==e.code;if("Tab"==e.code)return e.preventDefault(),void e.target.parentElement.parentElement.nextElementSibling.querySelector("[type='radio']").focus();var o=e.target.parentElement.querySelector(".add"),i=e.target.parentElement.querySelector(".substract");p(e.target.value),t?(i.classList.add("active"),setTimeout((function(){i.classList.remove("active")}),20),1==e.target.value&&(e.target.value=0,p(0))):n&&(o.classList.add("active"),setTimeout((function(){o.classList.remove("active")}),20))},v=function(e){!function(e){"totem_body_ff_reset"===e.target.id?(p(0),document.getElementById("totem_body_ff").value=0):"totem_bsize_reset"===e.target.id?document.getElementById("totem_bsize").value=0:"totem_font_weight_reset"===e.target.id?document.getElementById("totem_font_weight").value=0:"totem_bspacing_reset"===e.target.id?document.getElementById("totem_bspacing").value=0:"totem_bheight_reset"===e.target.id&&(document.getElementById("totem_bheight").value=0)}(e),g(),setTimeout((function(){m()}))},b=function(e){var t=e.target;if(console.log(e.target),e.code){var n="Tab"==e.code,o="Space"==e.code,i="Enter"==e.code;if(n&&"false"==t.getAttribute("aria-selected"))return e.preventDefault(),void t.parentElement.nextElementSibling.querySelector("[type='radio']").focus();if(!o&&!i)return}"true"==t.getAttribute("aria-selected")?(t.setAttribute("aria-selected","false"),t.checked=!1):(g(),t.setAttribute("aria-selected","true"),t.checked=!0)};return t.addEventListener("click",g),d.addEventListener("click",(function(e){console.log(e.target),t.parentElement.classList.toggle("power-off")?L():A(),O(0),g()})),[].slice.call(o).forEach((function(e){e.addEventListener("click",b),e.addEventListener("keydown",b)})),[].slice.call(i).forEach((function(e){e.addEventListener("keydown",h),e.addEventListener("change",m)})),[].slice.call(r).forEach((function(e){e.addEventListener("click",f)})),[].slice.call(a).forEach((function(e){e.addEventListener("click",v)})),s.addEventListener("change",(function(e){s.parentElement.setAttribute("data-value",e.srcElement.value),m()})),[].slice.call(u).forEach((function(e){e.addEventListener("mousedown",(function(e){e.target.classList.add("active")})),e.addEventListener("mouseup",(function(e){e.target.classList.remove("active")}))})),c.addEventListener("click",(function(){s.parentElement.setAttribute("data-value",-1)})),{updateFont:function(e){p(e)},getValueChanges:function(){return m()}}};document.addEventListener("DOMContentLoaded",l);var d=function(e){return Number(e)-Number(r.a.BODY_FONT_SIZE)},u=[{id:1,value:"500",omoType:"BoldOne"},{id:2,value:"600",omoType:"BookOne"},{id:3,value:"800",omoType:"MediumOne"}],g=function(e){return u.filter((function(t){return t.value===e}))},p=[{id:1,value:1.25},{id:2,value:1.5},{id:3,value:1.75},{id:4,value:2}],f=function(e){return p.filter((function(t){return t.value===e}))},m=[{id:1,value:1.8},{id:2,value:2},{id:3,value:2.2},{id:4,value:2.4}],h=function(e){return m.filter((function(t){return t.value===e}))},v=[{id:1,style:"OmoTypeA",value:"".concat("OmoType","A-")},{id:2,style:"OmoTypeB",value:"".concat("OmoType","B-")},{id:3,style:"OmoTypeC",value:"".concat("OmoType","C-")},{id:4,style:"OmoTypeD",value:"".concat("OmoType","D-")},{id:5,style:"OmoTypeE",value:"".concat("OmoType","E-")}],b=[{id:1,style:"OmoTypeA",value:"".concat("OmoType","A-")},{id:2,style:"OmoTypeB",value:"".concat("OmoType","B-")},{id:3,style:"OmoTypeC",value:"".concat("OmoType","C-")},{id:4,style:"OmoTypeD",value:"".concat("OmoType","D-")},{id:5,style:"OmoTypeE",value:"".concat("OmoType","E-")}],_=function(e){return v.filter((function(t){return t.value===e}))},w=[{id:0,background:"#EFF3EE"},{id:1,background:"#D9D8D8"},{id:2,background:"#231F20"},{id:3,background:"#9FB5DE"},{id:4,background:"#B894C4"},{id:5,background:"#E2B0AF"}],y=function(e){return w.filter((function(t){return t.id===Number(e)}))},E=function(e){return w.filter((function(t){return t.background===e}))},x=function(){var e,t=document.getElementById("applyOverides").checked,n=Number(document.getElementById("totem_bsize").value)+Number(r.a.BODY_FONT_SIZE),o=Number(document.getElementById("totem_bsize").value)+Number(r.a.HEADER_FONT_SIZE),i=(e=document.getElementById("totem_body_ff").value,v.filter((function(t){return t.id===Number(e)}))),a=function(e){return b.filter((function(t){return t.id===Number(e)}))}(document.getElementById("totem_body_ff").value),s=function(e){return u.filter((function(t){return t.id===Number(e)}))}(document.getElementById("totem_font_weight").value),c=function(e){return p.filter((function(t){return t.id===Number(e)}))}(document.getElementById("totem_bspacing").value),l=function(e){return m.filter((function(t){return t.id===Number(e)}))}(document.getElementById("totem_bheight").value),d=document.getElementById("selectedBackround").getAttribute("data-value"),g=y(d);return{checked:t,bodyFontSize:n,headerFontSize:o,bodyFontFamily:i[0].value,headerFontFamily:a[0].value,bodyFontWeight:s[0].value,bodyFontSpacing:c[0].value,bodyLineHeight:l[0].value,bgColor:g[0].background}};function k(){var e=x();console.log(e);var t="transparent"===e.bgColor?"":r.a.setBackGroundColor(r.a.BACKGROUND_COLOR_ELEMENTS,e.bgColor);t+=r.a.setHeaderStyle(r.a.transformHeaderStyles(r.a.HEADER_STYLE_ELEMENTS).join(","),e.headerFontFamily,e.bodyFontWeight,e.headerFontSize,e.bodyFontSpacing,e.bodyLineHeight,e.bgColor),t+=r.a.setBodyTextStyle(r.a.BODY_STYLE,e.bodyFontFamily,e.bodyFontWeight,e.bodyFontSize,e.bodyFontSpacing,e.bodyLineHeight,e.bgColor),t+=r.a.setOmoWidgetStyle(r.a.OMO_WIDGET_ELEMENTS,r.a.omoWidgetStyle);var n=r.a.TWEAK();return console.log(n),t+=n,console.log(t),t}var O=function(e){var t="".concat(r.a.OMO_WIDGET_COOKIE,"_"),n=x();n.checked=!(Number(e)>0);var o=JSON.stringify(n);localStorage.setItem("".concat(t),o),console.log("saved:".concat(o))},T=function(e){var t=localStorage.getItem("".concat(r.a.OMO_WIDGET_COOKIE,"_"));if(console.log(null===t),null!==t){!function(e,t){if(e.checked){var n=document.querySelector("#omo-widget");n.classList.add("has-changes"),n.querySelector(".omo-widget__main-toggle").parentElement.classList.toggle("power-off")}document.getElementById("applyOverides").checked=e.checked,document.getElementById("totem_bsize").value=d(e.bodyFontSize),document.getElementById("totem_body_ff").value=_(e.bodyFontFamily)[0].id,t.updateFont(document.getElementById("totem_body_ff").value),document.getElementById("totem_font_weight").value=g(e.bodyFontWeight)[0].id,document.getElementById("totem_bspacing").value=f(e.bodyFontSpacing)[0].id,document.getElementById("totem_bheight").value=h(e.bodyLineHeight)[0].id,document.getElementById("selectedBackround").setAttribute("data-value",E(e.bgColor)[0].id)}(JSON.parse(t),e);document.querySelector("#omo-widget");x().checked||(e.getValueChanges(),A())}};function S(){var e=document.getElementsByTagName("head")[0],t=e.getElementsByTagName("style").length;return e.getElementsByTagName("style")[t-1]}var A=function(){var e=document.getElementById("omolab_style_w"),t=S();if(e)return t.innerHTML=k(),void function(e){if(e){var t=document.createTextNode(" "),n=e.style.display;e.appendChild(t),e.style.display="none",setTimeout((function(){e.style.display=n,t.parentNode.removeChild(t)}),0)}}(t);var n=document.createElement("style");n.type="text/css",n.id="omolab_style_w",t=k(),n.styleSheet?n.styleSheet.cssText=t:n.appendChild(document.createTextNode(t)),document.getElementsByTagName("head")[0].appendChild(n)},L=function(){var e=document.getElementById("omolab_style_w"),t=document.getElementsByTagName("head")[0],n=S();console.log(e===n),e===n&&t.removeChild(n)},C=function(e,t){var n=document.createElement("div");for(n.innerHTML=s.a,console.log(e),console.log(t),function(e){var t=e.querySelector("body");t&&!t.classList.contains(r.a.OMOLAB_BODY_CLASS)&&t.classList.add(r.a.OMOLAB_BODY_CLASS)}(document),o=document.getElementsByClassName("omo-widget-container")[0];n.children.length>0;){var i=n.children[0];c.push(i),o.appendChild(i)}var a=l();r.a.readConfigurationFromFile(t.config).then((function(e){b.push({id:0,value:r.a.HEADER_FONT_FAMILY}),v.push({id:0,value:r.a.BODY_FONT_FAMILY}),m.push({id:0,value:r.a.BODY_LINE_HEIGHT}),u.push({id:0,value:r.a.BODY_FONT_WEIGHT}),p.push({id:0,value:r.a.BODY_FONT_SPACING}),w.push({id:-1,value:r.a.DEFAULT_BACKGROUND});var t=document.getElementById("selectedBackround");console.log(y(-1)),t.setAttribute("data-value",y(-1)[0].id),T(a)})).catch((function(e){console.log(e),alert(e)}))},B=["init","message"],N={};function z(e,t){if(!e)throw Error("API method required");if(e=e.toLowerCase(),-1===B.indexOf(e))throw Error("Method ".concat(e," is not supported"));switch(console.log("Handling API call ".concat(e),t),e){case"message":C(t,N);break;default:console.warn("No handler defined for ".concat(e))}}function M(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}!function(e){console.log("Omo-Widget starting");var t=e[e["Omo-Widget"]],n=t.q;if(n)for(var o=0;o<n.length;o++)"init"===n[o][0].toLowerCase()?N=M(N,n[o][1]):z(n[o][0],n[o][1]);(t=z).configurations=N}(window)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,