!function(e){var n={};function o(t){if(n[t])return n[t].exports;var a=n[t]={i:t,l:!1,exports:{}};return e[t].call(a.exports,a,a.exports,o),a.l=!0,a.exports}o.m=e,o.c=n,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)o.d(t,a,function(n){return e[n]}.bind(null,a));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o(o.s=37)}([function(e,n,o){var t=this;n.IMPORTANT_ELEMENTS_SELECTOR='*:not(img):not(:empty):not([aria-hidden="true"]):not([class*="icon"])';var a="omolab-w-body-".concat(Date.now(),"-").concat(Math.ceil(1e3*Math.random()));n.OMOLAB_BODY_CLASS=a;n.OMO_WIDGET_COOKIE="omolab-w-cookie";n.BODY_FONT_FAMILY,n.HEADER_STYLE_ELEMENTS=void 0,n.CUSTOM_HEADER_STYLE_ELEMENTS=void 0;var r=function(e){return"".concat(e,"px")},i=function(e){console.log("inverseFontFaceColor:"+e);var n="";return void 0!==e&&"#231F20"===e.trim()&&(n="color:white !important;"),n};n.transformHeaderStyles=function(e){return e.map((function(e){return"body.".concat(a," ").concat(e,", body.").concat(a," ").concat(e," * ")}))},n.setHeaderStyle=function(e,n,o,a,s,f,c){return"".concat(e,"{ \n    font-family:").concat(n," !important; \n    font-size:").concat(r(a||t.HEADER_FONT_SIZE)," !important; \n    font-weight:").concat(o," !important;\n    letter-spacing:").concat(r(s||t.HEADER_FONT_SPACING)," !important; \n    line-height:").concat(f||t.HEADER_LINE_HEIGHT," !important;\n    ").concat(i(c),"}\n")},n.OMO_WIDGET_ELEMENTS=void 0;var s=function(e){return e.map((function(e){return"body.".concat(a," ").concat(e)}))};n.omoWidgetStyle="{ color:black }\n";n.setOmoWidgetStyle=function(e,n){return"".concat(s(e).join(",")," ").concat(n)};n.TWEAK=function(){return(e=a,n=t.ELEMENTS_TO_TWEAK_STYLE,o=[],n.forEach((function(n){o.push("body.".concat(e," ").concat(n.element," {").concat(n.style,"}"))})),o).join(",").replace(",","\n");var e,n,o},n.BODY_STYLE=void 0;n.setBodyTextStyle=function(e,n,o,a,f,c,l){return n?"".concat(s(e).join(","),"{ \n    font-family:").concat(n," !important; \n    font-size:").concat(r(a||t.BODY_FONT_SIZE)," !important; \n    font-weight:").concat(o," !important;\n    letter-spacing:").concat(r(f||t.BODY_FONT_SPACING)," !important; \n    line-height:").concat(c||t.BODY_LINE_HEIGHT," !important; \n    ").concat(i(l),"}\n"):""},n.BACKGROUND_COLOR_ELEMENTS=void 0;n.setBackGroundColor=function(e,n){return n?"".concat(s(e).join(",")," { background-color: ").concat(n," !important; ").concat(i(n),"}\n"):""},o(12).polyfill();var f=o(15);n.readConfigurationFromFile=function(e){return new Promise((function(n,o){f.get(e).then((function(e){if(console.log(e),200!==e.status)throw Error(e.statusText);var o=e.data;if(t.BODY_FONT_FAMILY=o.BODY_FONT_FAMILY||"Roboto",t.HEADER_FONT_FAMILY=o.HEADER_FONT_FAMILY||"Roboto",t.HEADER_STYLE_ELEMENTS=o.HEADER_STYLE_ELEMENTS,t.CUSTOM_HEADER_STYLE_ELEMENTS=o.CUSTOM_HEADER_STYLE_ELEMENTS,t.OMO_WIDGET_ELEMENTS=o.OMO_WIDGET_ELEMENTS,t.ELEMENTS_TO_TWEAK_STYLE=o.ELEMENTS_TO_TWEAK_STYLE,t.BODY_STYLE=o.BODY_STYLE,t.BACKGROUND_COLOR_ELEMENTS=o.BACKGROUND_COLOR_ELEMENTS,t.HEADER_LINE_HEIGHT=o.HEADER_LINE_HEIGHT||0,t.HEADER_FONT_SPACING=o.HEADER_FONT_SPACING||20,t.HEADER_FONT_SIZE=o.HEADER_FONT_SIZE||20,t.BODY_LINE_HEIGHT=o.BODY_LINE_HEIGHT||0,t.BODY_LINE_HEIGHT_MAX=o.BODY_LINE_HEIGHT_MAX||40,t.BODY_FONT_SPACING=o.BODY_FONT_SPACING||0,t.BODY_FONT_SIZE=o.BODY_FONT_SIZE||13,t.BODY_FONT_SIZE_MAX=o.BODY_FONT_SIZE_MAX||30,t.BODY_FONT_WEIGHT=o.BODY_FONT_WEIGHT||"normal",t.DEFAULT_BACKGROUND=o.DEFAULT_BACKGROUND||"transparent",[t.HEADER_STYLE_ELEMENTS,t.BODY_STYLE,t.BACKGROUND_COLOR_ELEMENTS,t.OMO_WIDGET_ELEMENTS,t.CUSTOM_HEADER_STYLE_ELEMENTS].includes(void 0))throw Error("HEADER_STYLE_ELEMENTS,CUSTOM_HEADER_STYLE_ELEMENTS, OMO_WIDGET_ELEMENTS,BODY_STYLE, BACKGROUND_COLOR_ELEMENTS are mandatory!!!");n("FINISHED LOADING STYLESHEET")})).catch((function(n){o("".concat(n," in file ").concat(e))}))}))}},function(e,n,o){"use strict";var t=o(3),a=Object.prototype.toString;function r(e){return"[object Array]"===a.call(e)}function i(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function f(e){return"[object Function]"===a.call(e)}function c(e,n){if(null!=e)if("object"!=typeof e&&(e=[e]),r(e))for(var o=0,t=e.length;o<t;o++)n.call(null,e[o],o,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&n.call(null,e[a],a,e)}e.exports={isArray:r,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:i,isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:f,isStream:function(e){return s(e)&&f(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var n={};function o(o,t){"object"==typeof n[t]&&"object"==typeof o?n[t]=e(n[t],o):n[t]=o}for(var t=0,a=arguments.length;t<a;t++)c(arguments[t],o);return n},deepMerge:function e(){var n={};function o(o,t){"object"==typeof n[t]&&"object"==typeof o?n[t]=e(n[t],o):n[t]="object"==typeof o?e({},o):o}for(var t=0,a=arguments.length;t<a;t++)c(arguments[t],o);return n},extend:function(e,n,o){return c(n,(function(n,a){e[a]=o&&"function"==typeof n?t(n,o):n})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,n){var o,t,a=e.exports={};function r(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function s(e){if(o===setTimeout)return setTimeout(e,0);if((o===r||!o)&&setTimeout)return o=setTimeout,setTimeout(e,0);try{return o(e,0)}catch(n){try{return o.call(null,e,0)}catch(n){return o.call(this,e,0)}}}!function(){try{o="function"==typeof setTimeout?setTimeout:r}catch(e){o=r}try{t="function"==typeof clearTimeout?clearTimeout:i}catch(e){t=i}}();var f,c=[],l=!1,u=-1;function m(){l&&f&&(l=!1,f.length?c=f.concat(c):u=-1,c.length&&p())}function p(){if(!l){var e=s(m);l=!0;for(var n=c.length;n;){for(f=c,c=[];++u<n;)f&&f[u].run();u=-1,n=c.length}f=null,l=!1,function(e){if(t===clearTimeout)return clearTimeout(e);if((t===i||!t)&&clearTimeout)return t=clearTimeout,clearTimeout(e);try{t(e)}catch(n){try{return t.call(null,e)}catch(n){return t.call(this,e)}}}(e)}}function d(e,n){this.fun=e,this.array=n}function g(){}a.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var o=1;o<arguments.length;o++)n[o-1]=arguments[o];c.push(new d(e,n)),1!==c.length||l||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=g,a.addListener=g,a.once=g,a.off=g,a.removeListener=g,a.removeAllListeners=g,a.emit=g,a.prependListener=g,a.prependOnceListener=g,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(e,n,o){"use strict";e.exports=function(e,n){return function(){for(var o=new Array(arguments.length),t=0;t<o.length;t++)o[t]=arguments[t];return e.apply(n,o)}}},function(e,n,o){"use strict";var t=o(1);function a(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,n,o){if(!n)return e;var r;if(o)r=o(n);else if(t.isURLSearchParams(n))r=n.toString();else{var i=[];t.forEach(n,(function(e,n){null!=e&&(t.isArray(e)?n+="[]":e=[e],t.forEach(e,(function(e){t.isDate(e)?e=e.toISOString():t.isObject(e)&&(e=JSON.stringify(e)),i.push(a(n)+"="+a(e))})))})),r=i.join("&")}if(r){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+r}return e}},function(e,n,o){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,n,o){"use strict";(function(n){var t=o(1),a=o(21),r={"Content-Type":"application/x-www-form-urlencoded"};function i(e,n){!t.isUndefined(e)&&t.isUndefined(e["Content-Type"])&&(e["Content-Type"]=n)}var s,f={adapter:("undefined"!=typeof XMLHttpRequest?s=o(7):void 0!==n&&"[object process]"===Object.prototype.toString.call(n)&&(s=o(7)),s),transformRequest:[function(e,n){return a(n,"Accept"),a(n,"Content-Type"),t.isFormData(e)||t.isArrayBuffer(e)||t.isBuffer(e)||t.isStream(e)||t.isFile(e)||t.isBlob(e)?e:t.isArrayBufferView(e)?e.buffer:t.isURLSearchParams(e)?(i(n,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):t.isObject(e)?(i(n,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};f.headers={common:{Accept:"application/json, text/plain, */*"}},t.forEach(["delete","get","head"],(function(e){f.headers[e]={}})),t.forEach(["post","put","patch"],(function(e){f.headers[e]=t.merge(r)})),e.exports=f}).call(this,o(2))},function(e,n,o){"use strict";var t=o(1),a=o(22),r=o(4),i=o(24),s=o(27),f=o(28),c=o(8);e.exports=function(e){return new Promise((function(n,l){var u=e.data,m=e.headers;t.isFormData(u)&&delete m["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var d=e.auth.username||"",g=e.auth.password||"";m.Authorization="Basic "+btoa(d+":"+g)}var h=i(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),r(h,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var o="getAllResponseHeaders"in p?s(p.getAllResponseHeaders()):null,t={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:o,config:e,request:p};a(n,l,t),p=null}},p.onabort=function(){p&&(l(c("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){l(c("Network Error",e,null,p)),p=null},p.ontimeout=function(){var n="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(n=e.timeoutErrorMessage),l(c(n,e,"ECONNABORTED",p)),p=null},t.isStandardBrowserEnv()){var w=o(29),v=(e.withCredentials||f(h))&&e.xsrfCookieName?w.read(e.xsrfCookieName):void 0;v&&(m[e.xsrfHeaderName]=v)}if("setRequestHeader"in p&&t.forEach(m,(function(e,n){void 0===u&&"content-type"===n.toLowerCase()?delete m[n]:p.setRequestHeader(n,e)})),t.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(n){if("json"!==e.responseType)throw n}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),l(e),p=null)})),void 0===u&&(u=null),p.send(u)}))}},function(e,n,o){"use strict";var t=o(23);e.exports=function(e,n,o,a,r){var i=new Error(e);return t(i,n,o,a,r)}},function(e,n,o){"use strict";var t=o(1);e.exports=function(e,n){n=n||{};var o={},a=["url","method","params","data"],r=["headers","auth","proxy"],i=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];t.forEach(a,(function(e){void 0!==n[e]&&(o[e]=n[e])})),t.forEach(r,(function(a){t.isObject(n[a])?o[a]=t.deepMerge(e[a],n[a]):void 0!==n[a]?o[a]=n[a]:t.isObject(e[a])?o[a]=t.deepMerge(e[a]):void 0!==e[a]&&(o[a]=e[a])})),t.forEach(i,(function(t){void 0!==n[t]?o[t]=n[t]:void 0!==e[t]&&(o[t]=e[t])}));var s=a.concat(r).concat(i),f=Object.keys(n).filter((function(e){return-1===s.indexOf(e)}));return t.forEach(f,(function(t){void 0!==n[t]?o[t]=n[t]:void 0!==e[t]&&(o[t]=e[t])})),o}},function(e,n,o){"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},function(e,n){e.exports='<!DOCTYPE html>\n<html lang="en">\n\n<head>\n  <meta charset="UTF-8" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n  <meta http-equiv="X-UA-Compatible" content="ie=edge" />\n  <title>Omo</title>\n  \x3c!-- <link rel="stylesheet" href="/totemWidget.css" /> --\x3e\n</head>\n\n<body>\n  <div id="omo-widget" class="omo-widget">\n    <input type="checkbox" name="main-toggle" class="omo-widget__main-toggle" title="Open options" />\n    <fieldset data-setting-name="font-size">\n      <legend>Font size</legend>\n      <input type="radio" class="omo-widget__toggle-options" aria-selected="false" name="option-opened" value="1"\n        title="Font Size" />\n      \x3c!-- <svg width="32" height="27" xmlns="http://www.w3.org/2000/svg">\n          <g id="font-size" fill="var(--svgFill)" fill-rule="evenodd">\n            <path\n              d="M1.639 8.868h13.943c.197 0 .375.078.537.227a.74.74 0 01.24.55c0 .25-.081.454-.24.614a.74.74 0 01-.537.243H9.508v14.744a.906.906 0 01-.267.631.855.855 0 01-.643.28c-.284 0-.518-.092-.695-.28a.892.892 0 01-.27-.63V10.501H1.639a.764.764 0 01-.574-.229.773.773 0 01-.23-.574c0-.232.077-.43.23-.588a.75.75 0 01.574-.243"\n            />\n            <path\n              d="M9.661.224h20.914c.295 0 .562.113.802.342.242.227.363.501.363.822 0 .376-.12.683-.363.923-.24.242-.507.36-.802.36h-9.114v22.123c0 .347-.133.66-.4.94a1.277 1.277 0 01-.964.422c-.427 0-.777-.14-1.042-.422-.269-.28-.404-.593-.404-.94V2.67h-8.99c-.349 0-.638-.11-.864-.337a1.182 1.182 0 01-.34-.865c0-.347.114-.643.34-.882.226-.243.515-.362.864-.362"\n            />\n          </g>\n        </svg> --\x3e\n\n      <svg viewBox="0 0 32 27">\n        <g id="font-size" fill="var(--svgFill)" fill-rule="evenodd">\n          <path\n            d="M1.639 8.868h13.943c.197 0 .375.078.537.227a.74.74 0 01.24.55c0 .25-.081.454-.24.614a.74.74 0 01-.537.243H9.508v14.744a.906.906 0 01-.267.631.855.855 0 01-.643.28c-.284 0-.518-.092-.695-.28a.892.892 0 01-.27-.63V10.501H1.639a.764.764 0 01-.574-.229.773.773 0 01-.23-.574c0-.232.077-.43.23-.588a.75.75 0 01.574-.243" />\n          <path\n            d="M9.661.224h20.914c.295 0 .562.113.802.342.242.227.363.501.363.822 0 .376-.12.683-.363.923-.24.242-.507.36-.802.36h-9.114v22.123c0 .347-.133.66-.4.94a1.277 1.277 0 01-.964.422c-.427 0-.777-.14-1.042-.422-.269-.28-.404-.593-.404-.94V2.67h-8.99c-.349 0-.638-.11-.864-.337a1.182 1.182 0 01-.34-.865c0-.347.114-.643.34-.882.226-.243.515-.362.864-.362" />\n        </g>\n      </svg>\n      <form action="#">\n        <button type="reset" class="omo-widget__reset">\n          \x3c!-- <svg width="23" height="25" xmlns="http://www.w3.org/2000/svg">\n              <path\n                id="reset"\n                fill="var(--svgFill)"\n                d="M6 3C5.3 2.3 4.6 1.5 3.7.6c-.2 2.5-.4 4.9-.7 7.3 2.6.1 5 .2 7.7.2-.9-1-1.7-1.8-2.5-2.7 2.6-1.4 6.5-.7 8.9 1.6 2.7 2.5 3.4 6.5 1.9 9.7-1.6 3.2-5.2 5.1-8.7 4.6-3.1-.5-6.8-3.1-7.1-8.2h-3c-.3 3.5 2.1 8.2 6.4 10.2 4.6 2.2 10.3 1 13.6-2.8 3.4-4.1 3.7-9.7.6-14C18.3 2.8 12.5-.2 6 3z"\n                fill-rule="nonzero"\n              />\n            </svg> --\x3e\n          <svg viewBox="0 0 25 25">\n            <path id="reset" fill="var(--svgFill)"\n              d="M6 3C5.3 2.3 4.6 1.5 3.7.6c-.2 2.5-.4 4.9-.7 7.3 2.6.1 5 .2 7.7.2-.9-1-1.7-1.8-2.5-2.7 2.6-1.4 6.5-.7 8.9 1.6 2.7 2.5 3.4 6.5 1.9 9.7-1.6 3.2-5.2 5.1-8.7 4.6-3.1-.5-6.8-3.1-7.1-8.2h-3c-.3 3.5 2.1 8.2 6.4 10.2 4.6 2.2 10.3 1 13.6-2.8 3.4-4.1 3.7-9.7.6-14C18.3 2.8 12.5-.2 6 3z"\n              fill-rule="nonzero" />\n          </svg>\n        </button>\n        <button type="button" tabindex="-1" class="omo-widget__add">+</button>\n        <button type="button" tabindex="-1" class="omo-widget__substract">\n          -\n        </button>\n        <input id="totem_bsize" type="number" class="omo-widget__option-value" value="0" min="1" max="30"\n          name="totem_bsize" required />\n      </form>\n    </fieldset>\n    <fieldset data-setting-name="font-type">\n      <legend>Font type</legend>\n      <input type="radio" class="omo-widget__toggle-options" aria-selected="false" name="option-opened" value="2"\n        title="Font Type" />\n      <svg viewBox="0 0 27 32">\n        <g fill="none" fill-rule="evenodd">\n          <path\n            d="M23.981 15.832c0-5.713-3.03-10.984-9.912-10.984-6.85 0-10.04 5.43-10.04 10.984 0 5.842 3.663 11.02 10.104 11.02 6.218 0 9.848-5.178 9.848-11.02m2.937-.062c0 7.545-5.02 13.575-12.818 13.575-7.828 0-12.974-6.062-12.974-13.575 0-6.44 4.324-13.417 13.007-13.417 8.838 0 12.785 6.85 12.785 13.417"\n            fill="var(--svgFill)" fill-rule="nonzero" />\n          <path d="M0 0h27v32H0z" />\n        </g>\n      </svg>\n      \x3c!-- <svg id="O" width="27" height="32" xmlns="http://www.w3.org/2000/svg">\n          <g fill="none" fill-rule="evenodd">\n            <path\n              d="M23.981 15.832c0-5.713-3.03-10.984-9.912-10.984-6.85 0-10.04 5.43-10.04 10.984 0 5.842 3.663 11.02 10.104 11.02 6.218 0 9.848-5.178 9.848-11.02m2.937-.062c0 7.545-5.02 13.575-12.818 13.575-7.828 0-12.974-6.062-12.974-13.575 0-6.44 4.324-13.417 13.007-13.417 8.838 0 12.785 6.85 12.785 13.417"\n              fill="var(--svgFill)"\n              fill-rule="nonzero"\n            />\n            <path d="M0 0h27v32H0z" />\n          </g>\n        </svg> --\x3e\n      <form action="#">\n        <button type="reset" class="omo-widget__reset" id="totem_body_ff_reset">\n          \x3c!-- <svg width="23" height="25" xmlns="http://www.w3.org/2000/svg">\n              <path\n                id="reset"\n                fill="var(--svgFill)"\n                d="M6 3C5.3 2.3 4.6 1.5 3.7.6c-.2 2.5-.4 4.9-.7 7.3 2.6.1 5 .2 7.7.2-.9-1-1.7-1.8-2.5-2.7 2.6-1.4 6.5-.7 8.9 1.6 2.7 2.5 3.4 6.5 1.9 9.7-1.6 3.2-5.2 5.1-8.7 4.6-3.1-.5-6.8-3.1-7.1-8.2h-3c-.3 3.5 2.1 8.2 6.4 10.2 4.6 2.2 10.3 1 13.6-2.8 3.4-4.1 3.7-9.7.6-14C18.3 2.8 12.5-.2 6 3z"\n                fill-rule="nonzero"\n              />\n            </svg> --\x3e\n\n          <svg viewBox="0 0 25 25">\n            <path id="reset" fill="var(--svgFill)"\n              d="M6 3C5.3 2.3 4.6 1.5 3.7.6c-.2 2.5-.4 4.9-.7 7.3 2.6.1 5 .2 7.7.2-.9-1-1.7-1.8-2.5-2.7 2.6-1.4 6.5-.7 8.9 1.6 2.7 2.5 3.4 6.5 1.9 9.7-1.6 3.2-5.2 5.1-8.7 4.6-3.1-.5-6.8-3.1-7.1-8.2h-3c-.3 3.5 2.1 8.2 6.4 10.2 4.6 2.2 10.3 1 13.6-2.8 3.4-4.1 3.7-9.7.6-14C18.3 2.8 12.5-.2 6 3z"\n              fill-rule="nonzero" />\n          </svg>\n        </button>\n        <button type="button" tabindex="-1" class="omo-widget__add">+</button>\n        <div class="omo-widget__type-preview">\n          <svg viewBox="0 0 27 32">\n            <g fill="none" fill-rule="evenodd">\n              <path\n                d="M23.981 15.832c0-5.713-3.03-10.984-9.912-10.984-6.85 0-10.04 5.43-10.04 10.984 0 5.842 3.663 11.02 10.104 11.02 6.218 0 9.848-5.178 9.848-11.02m2.937-.062c0 7.545-5.02 13.575-12.818 13.575-7.828 0-12.974-6.062-12.974-13.575 0-6.44 4.324-13.417 13.007-13.417 8.838 0 12.785 6.85 12.785 13.417"\n                fill="var(--svgFill)" fill-rule="nonzero" />\n              <path d="M0 0h27v32H0z" />\n            </g>\n          </svg>\n\n          \x3c!-- <svg\n              id="O"\n              width="27"\n              height="32"\n              xmlns="http://www.w3.org/2000/svg"\n            >\n              <g fill="none" fill-rule="evenodd">\n                <path\n                  d="M23.981 15.832c0-5.713-3.03-10.984-9.912-10.984-6.85 0-10.04 5.43-10.04 10.984 0 5.842 3.663 11.02 10.104 11.02 6.218 0 9.848-5.178 9.848-11.02m2.937-.062c0 7.545-5.02 13.575-12.818 13.575-7.828 0-12.974-6.062-12.974-13.575 0-6.44 4.324-13.417 13.007-13.417 8.838 0 12.785 6.85 12.785 13.417"\n                  fill="var(--svgFill)"\n                  fill-rule="nonzero"\n                />\n                <path d="M0 0h27v32H0z" />\n              </g>\n            </svg> --\x3e\n          <svg viewBox="0 0 27 32">\n            <g fill="none" fill-rule="evenodd">\n              <path\n                d="M2.022 29.984c-.899-.323-1.224-1.08-.899-2.051 2.52-8.855 5.724-17.854 9.395-26.133C11.022.72 11.85 0 13.182 0s2.195.72 2.7 1.8c3.6 7.919 7.055 16.954 9.574 25.917.252 1.008.036 1.944-1.08 2.268-.828.217-1.69 0-2.088-1.188a217.784 217.784 0 00-1.943-6.407H6.162c-.647 2.088-1.26 4.14-1.87 6.228-.36 1.259-1.262 1.69-2.27 1.366zm5.04-10.33H19.41a226.489 226.489 0 00-6.228-16.378c-2.303 5.255-4.319 10.798-6.119 16.378z"\n                fill="var(--svgFill)" fill-rule="nonzero" />\n              <path d="M0 0h27v32H0z" />\n            </g>\n          </svg>\n\n          \x3c!-- <svg\n              id="A"\n              width="27"\n              height="32"\n              xmlns="http://www.w3.org/2000/svg"\n            >\n              <g fill="none" fill-rule="evenodd">\n                <path\n                  d="M2.022 29.984c-.899-.323-1.224-1.08-.899-2.051 2.52-8.855 5.724-17.854 9.395-26.133C11.022.72 11.85 0 13.182 0s2.195.72 2.7 1.8c3.6 7.919 7.055 16.954 9.574 25.917.252 1.008.036 1.944-1.08 2.268-.828.217-1.69 0-2.088-1.188a217.784 217.784 0 00-1.943-6.407H6.162c-.647 2.088-1.26 4.14-1.87 6.228-.36 1.259-1.262 1.69-2.27 1.366zm5.04-10.33H19.41a226.489 226.489 0 00-6.228-16.378c-2.303 5.255-4.319 10.798-6.119 16.378z"\n                  fill="var(--svgFill)"\n                  fill-rule="nonzero"\n                />\n                <path d="M0 0h27v32H0z" />\n              </g>\n            </svg> --\x3e\n          <svg viewBox="0 0 27 32">\n            <g fill="none" fill-rule="evenodd">\n              <path\n                d="M14.087 30.949H4.584C3.685 30.949 3 30.23 3 29.222V3.7C3 2.08 3.792 1 5.556 1h7.379c6.372 0 9.503 2.771 9.503 7.127 0 3.384-1.764 5.688-4.751 6.659 4.104.972 6.155 3.637 6.155 7.74 0 5.687-4.571 8.423-9.755 8.423zM6.24 13.851h6.946c3.168 0 6.012-1.476 6.012-5.436 0-3.06-2.34-4.607-6.587-4.607H6.24v10.043zm0 2.735v11.556h7.234c4.067 0 7.02-1.584 7.02-5.688 0-3.816-2.196-5.868-6.875-5.868H6.24z"\n                fill="var(--svgFill)" fill-rule="nonzero" />\n              <path d="M0 0h27v32H0z" />\n            </g>\n          </svg>\n\n          \x3c!-- <svg\n              id="B"\n              width="27"\n              height="32"\n              xmlns="http://www.w3.org/2000/svg"\n            >\n              <g fill="none" fill-rule="evenodd">\n                <path\n                  d="M14.087 30.949H4.584C3.685 30.949 3 30.23 3 29.222V3.7C3 2.08 3.792 1 5.556 1h7.379c6.372 0 9.503 2.771 9.503 7.127 0 3.384-1.764 5.688-4.751 6.659 4.104.972 6.155 3.637 6.155 7.74 0 5.687-4.571 8.423-9.755 8.423zM6.24 13.851h6.946c3.168 0 6.012-1.476 6.012-5.436 0-3.06-2.34-4.607-6.587-4.607H6.24v10.043zm0 2.735v11.556h7.234c4.067 0 7.02-1.584 7.02-5.688 0-3.816-2.196-5.868-6.875-5.868H6.24z"\n                  fill="var(--svgFill)"\n                  fill-rule="nonzero"\n                />\n                <path d="M0 0h27v32H0z" />\n              </g>\n            </svg> --\x3e\n          <svg viewBox="0 0 27 32">\n            <g fill="none" fill-rule="evenodd">\n              <path\n                d="M23.031 7.937c-1.691-3.168-4.318-4.463-8.136-4.463-7.415 0-10.942 5.507-10.942 12.67 0 7.307 3.959 12.382 10.655 12.382 4.933 0 7.235-1.8 8.495-4.104.504-.864 1.404-1.296 2.268-.899.865.396.973 1.439.576 2.159-1.619 3.456-5.363 5.688-11.376 5.688-8.53 0-13.929-6.048-13.929-15.298C.642 7.829 5.286.63 14.968.63c4.753 0 9.253 1.908 10.872 5.795.396.899.324 1.691-.469 2.195-.791.433-1.799.145-2.34-.683z"\n                fill="var(--svgFill)" fill-rule="nonzero" />\n              <path d="M0 0h27v32H0z" />\n            </g>\n          </svg>\n          \x3c!-- C iznad --\x3e\n          <svg viewBox="0 0 27 32">\n            <g fill="none" fill-rule="evenodd">\n              <path\n                d="M12.619 30.974H3.836c-1.296 0-2.268-.971-2.268-2.268V3.258c0-1.296.972-2.232 2.268-2.232h8.315c8.711 0 14.578 4.788 14.578 14.686 0 10.223-6.623 15.262-14.11 15.262zm-.864-27.141H4.809v24.333h7.343c6.983 0 11.23-4.393 11.23-12.383 0-8.062-3.995-11.95-11.627-11.95z"\n                fill="var(--svgFill)" fill-rule="nonzero" />\n              <path d="M0 0h27v32H0z" />\n            </g>\n          </svg>\n          \x3c!--D IZNAD --\x3e\n\n          <svg viewBox="0 0 27 32">\n            <g fill="none" fill-rule="evenodd">\n              <path\n                d="M22.407 31.584H5.525a2.127 2.127 0 01-2.124-2.123V3.724c0-1.152.972-2.088 2.124-2.088h16.917c.721 0 1.332.576 1.332 1.44 0 .72-.611 1.368-1.332 1.368H6.641v10.438h14.254c.756 0 1.367.576 1.367 1.404 0 .756-.611 1.404-1.367 1.404H6.641v11.087h15.766c.756 0 1.367.611 1.367 1.367 0 .829-.611 1.44-1.367 1.44z"\n                fill="var(--svgFill)" fill-rule="nonzero" />\n              <path d="M0 0h27v32H0z" />\n            </g>\n          </svg>\n          \x3c!-- E iznad --\x3e\n        </div>\n        <button type="button" tabindex="-1" class="omo-widget__substract">\n          -\n        </button>\n        <input id="totem_body_ff" type="number" class="omo-widget__option-value" value="0" min="1" max="5"\n          name="totem_body_ff" />\n      </form>\n    </fieldset>\n    <fieldset data-setting-name="font-weight">\n      <legend>Font weight</legend>\n      <input type="radio" class="omo-widget__toggle-options" aria-selected="false" name="option-opened" value="2"\n        title="Font Weight" />\n      <svg viewBox="0 0 35 24">\n        <g id="font-weight" fill="var(--svgFill)" fill-rule="evenodd">\n          <path\n            d="M2.069 12.225v9.878H7.95c3.437 0 6.073-1.361 6.073-4.94 0-3.245-1.855-4.938-5.826-4.938h-6.13zm0-1.522h5.908c2.635 0 4.965-1.251 4.965-4.553 0-2.552-1.97-3.854-5.547-3.854H2.069v8.407zm6.379 12.925H1.15a.832.832 0 01-.86-.86V2.517c0-1.055.503-1.746 1.61-1.746h5.852c4.662 0 6.992 2.106 6.992 5.379 0 2.554-1.471 4.329-3.631 5.105 3.162.72 4.713 2.747 4.713 5.908 0 4.384-3.467 6.465-7.38 6.465zM21.577 13.03v7.546h5.162c2.746 0 4.522-1.026 4.522-3.607 0-2.55-1.47-3.938-4.55-3.938h-5.134zm0-2.912h4.607c2.192 0 4.189-1 4.189-3.688 0-2.11-1.552-3.165-4.44-3.165h-4.356v6.853zm5.605 13.51H19.83c-.97 0-1.692-.831-1.692-1.968V2.795c0-1.553.75-2.58 2.442-2.58h5.465c5.215 0 7.795 2.19 7.795 5.66 0 2.663-1.193 4.437-3.69 5.215 3.162.805 4.719 2.857 4.719 6.02 0 4.409-3.553 6.519-7.688 6.519z" />\n        </g>\n      </svg>\n\n      <form action="#">\n        <button type="reset" class="omo-widget__reset">\n          <svg viewBox="0 0 25 25">\n            <path id="reset" fill="var(--svgFill)"\n              d="M6 3C5.3 2.3 4.6 1.5 3.7.6c-.2 2.5-.4 4.9-.7 7.3 2.6.1 5 .2 7.7.2-.9-1-1.7-1.8-2.5-2.7 2.6-1.4 6.5-.7 8.9 1.6 2.7 2.5 3.4 6.5 1.9 9.7-1.6 3.2-5.2 5.1-8.7 4.6-3.1-.5-6.8-3.1-7.1-8.2h-3c-.3 3.5 2.1 8.2 6.4 10.2 4.6 2.2 10.3 1 13.6-2.8 3.4-4.1 3.7-9.7.6-14C18.3 2.8 12.5-.2 6 3z"\n              fill-rule="nonzero" />\n          </svg>\n        </button>\n        <button type="button" tabindex="-1" class="omo-widget__add">+</button>\n        <button type="button" tabindex="-1" class="omo-widget__substract">\n          -\n        </button>\n        <input id="totem_font_weight" type="number" class="omo-widget__option-value" value="0" min="1" max="3"\n          name="totem_font_weight" />\n      </form>\n    </fieldset>\n    <fieldset data-setting-name="letter-spacing">\n      <legend>Letter spacing</legend>\n      <input type="radio" class="omo-widget__toggle-options" aria-selected="false" name="option-opened" value="2"\n        title="Letter spacing" />\n\n      <svg viewBox="0 0 32 27">\n        <g id="letter-spacing" fill="var(--svgFill)" fill-rule="evenodd">\n          <path\n            d="M13.92 1.11c.266.07.451.21.56.427.103.21.131.433.076.665a96.993 96.993 0 01-2.443 7.826 106.542 106.542 0 01-2.869 7.164 2.435 2.435 0 01-.664.852 1.442 1.442 0 01-.93.344c-.373 0-.696-.113-.97-.344a2.484 2.484 0 01-.65-.852A103.151 103.151 0 013.08 9.92 98.362 98.362 0 01.662 2.305a1.1 1.1 0 01.026-.715c.09-.25.274-.41.558-.48a.975.975 0 01.72.067c.246.116.405.289.475.517.692 2.48 1.457 4.954 2.3 7.416a93.749 93.749 0 002.936 7.496 122.297 122.297 0 002.843-7.428 106.317 106.317 0 002.231-7.351c.07-.265.22-.47.45-.611a.864.864 0 01.718-.105M20.827 11.502h6.883a98.56 98.56 0 00-1.621-4.387 108.366 108.366 0 00-1.86-4.384 86.47 86.47 0 00-1.82 4.412 151.602 151.602 0 00-1.582 4.36m-3.24 6.778a.756.756 0 01-.438-.438.946.946 0 01-.013-.652 126.476 126.476 0 012.52-7.803c.94-2.615 1.96-5.132 3.06-7.562.123-.283.307-.516.557-.703.247-.186.557-.278.929-.278.37 0 .682.092.93.278.248.187.44.42.586.703a91.654 91.654 0 013.12 7.39 96.531 96.531 0 012.538 7.79c.07.246.07.494 0 .741-.07.25-.24.42-.506.505a1.047 1.047 0 01-.73-.05.804.804 0 01-.492-.586 72.045 72.045 0 00-.676-2.275c-.24-.75-.484-1.508-.733-2.27h-7.943c-.23.762-.46 1.52-.69 2.27-.23.758-.462 1.513-.691 2.275a.924.924 0 01-.532.598 1.19 1.19 0 01-.796.067M31.404 22.621c-.006-.03-.006-.06-.018-.088-.007-.02-.028-.039-.04-.059-.03-.057-.06-.117-.108-.166l-3.313-3.317a.68.68 0 10-.966.963l2.153 2.156H2.932l2.153-2.156a.684.684 0 000-.963.687.687 0 00-.965 0L.803 22.308c-.047.05-.078.11-.11.166-.01.02-.028.04-.038.06-.011.026-.01.057-.016.087a.669.669 0 00.164.65l3.315 3.32a.687.687 0 00.967 0 .686.686 0 00-.004-.968l-2.15-2.15H29.11l-2.15 2.15a.685.685 0 00-.001.967.686.686 0 00.966 0l3.313-3.319a.663.663 0 00.166-.65" />\n        </g>\n      </svg>\n\n      <form action="#">\n        <button type="reset" class="omo-widget__reset">\n          <svg viewBox="0 0 25 25">\n            <path id="reset" fill="var(--svgFill)"\n              d="M6 3C5.3 2.3 4.6 1.5 3.7.6c-.2 2.5-.4 4.9-.7 7.3 2.6.1 5 .2 7.7.2-.9-1-1.7-1.8-2.5-2.7 2.6-1.4 6.5-.7 8.9 1.6 2.7 2.5 3.4 6.5 1.9 9.7-1.6 3.2-5.2 5.1-8.7 4.6-3.1-.5-6.8-3.1-7.1-8.2h-3c-.3 3.5 2.1 8.2 6.4 10.2 4.6 2.2 10.3 1 13.6-2.8 3.4-4.1 3.7-9.7.6-14C18.3 2.8 12.5-.2 6 3z"\n              fill-rule="nonzero" />\n          </svg>\n        </button>\n        <button type="button" tabindex="-1" class="omo-widget__add">+</button>\n        <button type="button" tabindex="-1" class="omo-widget__substract">\n          -\n        </button>\n        <input id="totem_bspacing" type="number" class="omo-widget__option-value" value="0" min="1" max="4"\n          name="totem_bspacing" />\n      </form>\n    </fieldset>\n    <fieldset data-setting-name="line-height">\n      <legend>Line height</legend>\n      <input type="radio" class="omo-widget__toggle-options" aria-selected="false" name="option-opened" value="3"\n        title="Line height" />\n      <svg viewBox="0 0 32 28">\n        <g id="line-height" fill="var(--svgFill)" fill-rule="evenodd">\n          <path\n            d="M30.551.92H13.317a.82.82 0 000 1.639h17.234a.819.819 0 000-1.64M30.551 26.095H13.317a.818.818 0 100 1.634h17.234a.817.817 0 100-1.634M9.147 22.359l-2.585 2.586V3.707l2.585 2.587a.819.819 0 001.158-1.16L6.321 1.148c-.057-.056-.126-.091-.197-.13-.026-.014-.045-.037-.072-.048-.033-.013-.069-.01-.106-.02a.802.802 0 00-.779.198L1.184 5.132a.82.82 0 101.156 1.16l2.586-2.587v21.24L2.34 22.36a.814.814 0 00-1.156-.002.815.815 0 000 1.158l3.983 3.985a.8.8 0 00.779.199c.037-.01.073-.008.106-.02.027-.011.046-.036.072-.047.071-.04.14-.075.197-.132l3.984-3.986a.816.816 0 00-.001-1.157.817.817 0 00-1.157 0M30.551 10.989H13.317a.82.82 0 000 1.639h17.234a.82.82 0 000-1.64M30.551 16.024H13.317a.82.82 0 000 1.639h17.234a.819.819 0 000-1.64M30.551 5.954H13.317a.82.82 0 00-.819.82.82.82 0 00.82.817H30.55a.818.818 0 000-1.637M30.551 21.059H13.317a.82.82 0 000 1.638h17.234a.819.819 0 000-1.638" />\n        </g>\n      </svg>\n\n      \x3c!-- <svg width="32" height="28" xmlns="http://www.w3.org/2000/svg">\n          <g id="line-height" fill="var(--svgFill)" fill-rule="evenodd">\n            <path\n              d="M30.551.92H13.317a.82.82 0 000 1.639h17.234a.819.819 0 000-1.64M30.551 26.095H13.317a.818.818 0 100 1.634h17.234a.817.817 0 100-1.634M9.147 22.359l-2.585 2.586V3.707l2.585 2.587a.819.819 0 001.158-1.16L6.321 1.148c-.057-.056-.126-.091-.197-.13-.026-.014-.045-.037-.072-.048-.033-.013-.069-.01-.106-.02a.802.802 0 00-.779.198L1.184 5.132a.82.82 0 101.156 1.16l2.586-2.587v21.24L2.34 22.36a.814.814 0 00-1.156-.002.815.815 0 000 1.158l3.983 3.985a.8.8 0 00.779.199c.037-.01.073-.008.106-.02.027-.011.046-.036.072-.047.071-.04.14-.075.197-.132l3.984-3.986a.816.816 0 00-.001-1.157.817.817 0 00-1.157 0M30.551 10.989H13.317a.82.82 0 000 1.639h17.234a.82.82 0 000-1.64M30.551 16.024H13.317a.82.82 0 000 1.639h17.234a.819.819 0 000-1.64M30.551 5.954H13.317a.82.82 0 00-.819.82.82.82 0 00.82.817H30.55a.818.818 0 000-1.637M30.551 21.059H13.317a.82.82 0 000 1.638h17.234a.819.819 0 000-1.638"\n            />\n          </g>\n        </svg> --\x3e\n      <form action="#" data-setting-name="line-height">\n        <button type="reset" class="omo-widget__reset">\n          <svg viewBox="0 0 25 25">\n            <path id="reset" fill="var(--svgFill)"\n              d="M6 3C5.3 2.3 4.6 1.5 3.7.6c-.2 2.5-.4 4.9-.7 7.3 2.6.1 5 .2 7.7.2-.9-1-1.7-1.8-2.5-2.7 2.6-1.4 6.5-.7 8.9 1.6 2.7 2.5 3.4 6.5 1.9 9.7-1.6 3.2-5.2 5.1-8.7 4.6-3.1-.5-6.8-3.1-7.1-8.2h-3c-.3 3.5 2.1 8.2 6.4 10.2 4.6 2.2 10.3 1 13.6-2.8 3.4-4.1 3.7-9.7.6-14C18.3 2.8 12.5-.2 6 3z"\n              fill-rule="nonzero" />\n          </svg>\n          \x3c!-- <svg width="23" height="25" xmlns="http://www.w3.org/2000/svg">\n              <path\n                id="reset"\n                fill="var(--svgFill)"\n                d="M6 3C5.3 2.3 4.6 1.5 3.7.6c-.2 2.5-.4 4.9-.7 7.3 2.6.1 5 .2 7.7.2-.9-1-1.7-1.8-2.5-2.7 2.6-1.4 6.5-.7 8.9 1.6 2.7 2.5 3.4 6.5 1.9 9.7-1.6 3.2-5.2 5.1-8.7 4.6-3.1-.5-6.8-3.1-7.1-8.2h-3c-.3 3.5 2.1 8.2 6.4 10.2 4.6 2.2 10.3 1 13.6-2.8 3.4-4.1 3.7-9.7.6-14C18.3 2.8 12.5-.2 6 3z"\n                fill-rule="nonzero"\n              />\n            </svg> --\x3e\n        </button>\n        <button type="button" tabindex="-1" class="omo-widget__add">+</button>\n        <button type="button" tabindex="-1" class="omo-widget__substract">\n          -\n        </button>\n        <input id="totem_bheight" type="number" class="omo-widget__option-value" value="0" min="1" max="4"\n          name="totem_bheight" />\n      </form>\n    </fieldset>\n    <fieldset id="selectedBackround" data-setting-name="background">\n      <legend>Background</legend>\n      <input type="radio" class="omo-widget__toggle-options" aria-selected="false" name="option-opened" value="4"\n        title="Background" />\n      <form action="#">\n        <button type="reset" class="omo-widget__reset">\n          <svg viewBox="0 0 25 25">\n            <path id="reset" fill="var(--svgFill)"\n              d="M6 3C5.3 2.3 4.6 1.5 3.7.6c-.2 2.5-.4 4.9-.7 7.3 2.6.1 5 .2 7.7.2-.9-1-1.7-1.8-2.5-2.7 2.6-1.4 6.5-.7 8.9 1.6 2.7 2.5 3.4 6.5 1.9 9.7-1.6 3.2-5.2 5.1-8.7 4.6-3.1-.5-6.8-3.1-7.1-8.2h-3c-.3 3.5 2.1 8.2 6.4 10.2 4.6 2.2 10.3 1 13.6-2.8 3.4-4.1 3.7-9.7.6-14C18.3 2.8 12.5-.2 6 3z"\n              fill-rule="nonzero" />\n          </svg>\n        </button>\n        <input class="omo-widget__background-choice" type="radio" name="background" required value="0" />\n        <input class="omo-widget__background-choice" type="radio" name="background" required value="1" />\n        <input class="omo-widget__background-choice" type="radio" name="background" required value="2" />\n        <input class="omo-widget__background-choice" type="radio" name="background" required value="3" />\n        <input class="omo-widget__background-choice" type="radio" name="background" required value="4" />\n        <input class="omo-widget__background-choice" type="radio" name="background" required value="5" />\n      </form>\n    </fieldset>\n    <fieldset class="omo-widget__power-toggle-wrap" data-setting-name="widget-active">\n      <input id="applyOverides" class="omo-widget__power-toggle" type="checkbox" title="Toggle options" />\n      <svg viewBox="0 0 24 29">\n        <g id="power" fill="var(--svgFill)" fill-rule="evenodd">\n          <path\n            d="M20.397 7.824c6.246 6.773 1.866 17.455-7.376 17.809-9.519.363-13.263-11.426-7.376-17.81 1.09-1.181-.673-2.954-1.768-1.767-7.736 8.387-2.297 21.639 9.144 22.077 11.777.449 16.435-14.17 9.144-22.077-1.096-1.187-2.86.586-1.768 1.768" />\n          <path d="M11.77 1.718v10.445c0 1.612 2.5 1.612 2.5 0V1.718c0-1.613-2.5-1.613-2.5 0" />\n        </g>\n      </svg>\n    </fieldset>\n    <div class="omo-widget__link-wrap">\n      <a href="https://omolab.com/" target="_blank" data-setting-name="widget-info" title="Find out more">\n        <svg viewBox="0 0 10 31">\n          <g id="info" fill="var(--svgFill)" fill-rule="evenodd">\n            <path\n              d="M9.535 17.468a4.442 4.442 0 00-4.443-4.44 4.443 4.443 0 00-4.445 4.44v8.89a4.443 4.443 0 004.445 4.44 4.442 4.442 0 004.443-4.44v-8.89zM9.535 5.242A4.443 4.443 0 11.648 5.24a4.443 4.443 0 018.887 0" />\n          </g>\n        </svg>\n      </a>\n    </div>\n  </div>\n  \x3c!-- <script src="./totemWidget.js"><\/script>\n    <script>\n      initOmoWidgetControls();\n    <\/script> --\x3e\n</body>\n\n</html>'},function(e,n,o){(function(n,t){var a;
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   3.3.1
 */a=function(){"use strict";function e(e){return"function"==typeof e}var a=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},r=0,i=void 0,s=void 0,f=function(e,n){g[r]=e,g[r+1]=n,2===(r+=2)&&(s?s(h):b())},c="undefined"!=typeof window?window:void 0,l=c||{},u=l.MutationObserver||l.WebKitMutationObserver,m="undefined"==typeof self&&void 0!==n&&"[object process]"==={}.toString.call(n),p="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function d(){var e=setTimeout;return function(){return e(h,1)}}var g=new Array(1e3);function h(){for(var e=0;e<r;e+=2)(0,g[e])(g[e+1]),g[e]=void 0,g[e+1]=void 0;r=0}var w,v,y,_,b=void 0;function T(e,n){var o=arguments,t=this,a=new this.constructor(E);void 0===a[k]&&Y(a);var r,i=t._state;return i?(r=o[i-1],f((function(){return j(i,a,r,t._result)}))):N(t,a,e,n),a}function O(e){if(e&&"object"==typeof e&&e.constructor===this)return e;var n=new this(E);return F(n,e),n}m?b=function(){return n.nextTick(h)}:u?(v=0,y=new u(h),_=document.createTextNode(""),y.observe(_,{characterData:!0}),b=function(){_.data=v=++v%2}):p?((w=new MessageChannel).port1.onmessage=h,b=function(){return w.port2.postMessage(0)}):b=void 0===c?function(){try{var e=o(14);return i=e.runOnLoop||e.runOnContext,function(){i(h)}}catch(e){return d()}}():d();var k=Math.random().toString(36).substring(16);function E(){}var B=void 0,S=1,x=2,A=new H;function C(e){try{return e.then}catch(e){return A.error=e,A}}function L(n,o,t){o.constructor===n.constructor&&t===T&&o.constructor.resolve===O?function(e,n){n._state===S?D(e,n._result):n._state===x?z(e,n._result):N(n,void 0,(function(n){return F(e,n)}),(function(n){return z(e,n)}))}(n,o):t===A?z(n,A.error):void 0===t?D(n,o):e(t)?function(e,n,o){f((function(e){var t=!1,a=function(e,n,o,t){try{e.call(n,o,t)}catch(e){return e}}(o,n,(function(o){t||(t=!0,n!==o?F(e,o):D(e,o))}),(function(n){t||(t=!0,z(e,n))}),e._label);!t&&a&&(t=!0,z(e,a))}),e)}(n,o,t):D(n,o)}function F(e,n){var o;e===n?z(e,new TypeError("You cannot resolve a promise with itself")):"function"==typeof(o=n)||"object"==typeof o&&null!==o?L(e,n,C(n)):D(e,n)}function M(e){e._onerror&&e._onerror(e._result),R(e)}function D(e,n){e._state===B&&(e._result=n,e._state=S,0!==e._subscribers.length&&f(R,e))}function z(e,n){e._state===B&&(e._state=x,e._result=n,f(M,e))}function N(e,n,o,t){var a=e._subscribers,r=a.length;e._onerror=null,a[r]=n,a[r+S]=o,a[r+x]=t,0===r&&e._state&&f(R,e)}function R(e){var n=e._subscribers,o=e._state;if(0!==n.length){for(var t=void 0,a=void 0,r=e._result,i=0;i<n.length;i+=3)t=n[i],a=n[i+o],t?j(o,t,a,r):a(r);e._subscribers.length=0}}function H(){this.error=null}var I=new H;function j(n,o,t,a){var r=e(t),i=void 0,s=void 0,f=void 0,c=void 0;if(r){if((i=function(e,n){try{return e(n)}catch(e){return I.error=e,I}}(t,a))===I?(c=!0,s=i.error,i=null):f=!0,o===i)return void z(o,new TypeError("A promises callback cannot return that same promise."))}else i=a,f=!0;o._state!==B||(r&&f?F(o,i):c?z(o,s):n===S?D(o,i):n===x&&z(o,i))}var U=0;function Y(e){e[k]=U++,e._state=void 0,e._result=void 0,e._subscribers=[]}function q(e,n){this._instanceConstructor=e,this.promise=new e(E),this.promise[k]||Y(this.promise),a(n)?(this._input=n,this.length=n.length,this._remaining=n.length,this._result=new Array(this.length),0===this.length?D(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&D(this.promise,this._result))):z(this.promise,new Error("Array Methods must be provided an Array"))}function G(e){this[k]=U++,this._result=this._state=void 0,this._subscribers=[],E!==e&&("function"!=typeof e&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof G?function(e,n){try{n((function(n){F(e,n)}),(function(n){z(e,n)}))}catch(n){z(e,n)}}(this,e):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}function P(){var e=void 0;if(void 0!==t)e=t;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var n=e.Promise;if(n){var o=null;try{o=Object.prototype.toString.call(n.resolve())}catch(e){}if("[object Promise]"===o&&!n.cast)return}e.Promise=G}return q.prototype._enumerate=function(){for(var e=this.length,n=this._input,o=0;this._state===B&&o<e;o++)this._eachEntry(n[o],o)},q.prototype._eachEntry=function(e,n){var o=this._instanceConstructor,t=o.resolve;if(t===O){var a=C(e);if(a===T&&e._state!==B)this._settledAt(e._state,n,e._result);else if("function"!=typeof a)this._remaining--,this._result[n]=e;else if(o===G){var r=new o(E);L(r,e,a),this._willSettleAt(r,n)}else this._willSettleAt(new o((function(n){return n(e)})),n)}else this._willSettleAt(t(e),n)},q.prototype._settledAt=function(e,n,o){var t=this.promise;t._state===B&&(this._remaining--,e===x?z(t,o):this._result[n]=o),0===this._remaining&&D(t,this._result)},q.prototype._willSettleAt=function(e,n){var o=this;N(e,void 0,(function(e){return o._settledAt(S,n,e)}),(function(e){return o._settledAt(x,n,e)}))},G.all=function(e){return new q(this,e).promise},G.race=function(e){var n=this;return a(e)?new n((function(o,t){for(var a=e.length,r=0;r<a;r++)n.resolve(e[r]).then(o,t)})):new n((function(e,n){return n(new TypeError("You must pass an array to race."))}))},G.resolve=O,G.reject=function(e){var n=new this(E);return z(n,e),n},G._setScheduler=function(e){s=e},G._setAsap=function(e){f=e},G._asap=f,G.prototype={constructor:G,then:T,catch:function(e){return this.then(null,e)}},P(),G.polyfill=P,G.Promise=G,G},e.exports=a()}).call(this,o(2),o(13))},function(e,n){var o;o=function(){return this}();try{o=o||new Function("return this")()}catch(e){"object"==typeof window&&(o=window)}e.exports=o},function(e,n){},function(e,n,o){e.exports=o(16)},function(e,n,o){"use strict";var t=o(1),a=o(3),r=o(17),i=o(9);function s(e){var n=new r(e),o=a(r.prototype.request,n);return t.extend(o,r.prototype,n),t.extend(o,n),o}var f=s(o(6));f.Axios=r,f.create=function(e){return s(i(f.defaults,e))},f.Cancel=o(10),f.CancelToken=o(30),f.isCancel=o(5),f.all=function(e){return Promise.all(e)},f.spread=o(31),e.exports=f,e.exports.default=f},function(e,n,o){"use strict";var t=o(1),a=o(4),r=o(18),i=o(19),s=o(9);function f(e){this.defaults=e,this.interceptors={request:new r,response:new r}}f.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var n=[i,void 0],o=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){n.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){n.push(e.fulfilled,e.rejected)}));n.length;)o=o.then(n.shift(),n.shift());return o},f.prototype.getUri=function(e){return e=s(this.defaults,e),a(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},t.forEach(["delete","get","head","options"],(function(e){f.prototype[e]=function(n,o){return this.request(t.merge(o||{},{method:e,url:n}))}})),t.forEach(["post","put","patch"],(function(e){f.prototype[e]=function(n,o,a){return this.request(t.merge(a||{},{method:e,url:n,data:o}))}})),e.exports=f},function(e,n,o){"use strict";var t=o(1);function a(){this.handlers=[]}a.prototype.use=function(e,n){return this.handlers.push({fulfilled:e,rejected:n}),this.handlers.length-1},a.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},a.prototype.forEach=function(e){t.forEach(this.handlers,(function(n){null!==n&&e(n)}))},e.exports=a},function(e,n,o){"use strict";var t=o(1),a=o(20),r=o(5),i=o(6);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=a(e.data,e.headers,e.transformRequest),e.headers=t.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),t.forEach(["delete","get","head","post","put","patch","common"],(function(n){delete e.headers[n]})),(e.adapter||i.adapter)(e).then((function(n){return s(e),n.data=a(n.data,n.headers,e.transformResponse),n}),(function(n){return r(n)||(s(e),n&&n.response&&(n.response.data=a(n.response.data,n.response.headers,e.transformResponse))),Promise.reject(n)}))}},function(e,n,o){"use strict";var t=o(1);e.exports=function(e,n,o){return t.forEach(o,(function(o){e=o(e,n)})),e}},function(e,n,o){"use strict";var t=o(1);e.exports=function(e,n){t.forEach(e,(function(o,t){t!==n&&t.toUpperCase()===n.toUpperCase()&&(e[n]=o,delete e[t])}))}},function(e,n,o){"use strict";var t=o(8);e.exports=function(e,n,o){var a=o.config.validateStatus;!a||a(o.status)?e(o):n(t("Request failed with status code "+o.status,o.config,null,o.request,o))}},function(e,n,o){"use strict";e.exports=function(e,n,o,t,a){return e.config=n,o&&(e.code=o),e.request=t,e.response=a,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,n,o){"use strict";var t=o(25),a=o(26);e.exports=function(e,n){return e&&!t(n)?a(e,n):n}},function(e,n,o){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,n,o){"use strict";e.exports=function(e,n){return n?e.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):e}},function(e,n,o){"use strict";var t=o(1),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var n,o,r,i={};return e?(t.forEach(e.split("\n"),(function(e){if(r=e.indexOf(":"),n=t.trim(e.substr(0,r)).toLowerCase(),o=t.trim(e.substr(r+1)),n){if(i[n]&&a.indexOf(n)>=0)return;i[n]="set-cookie"===n?(i[n]?i[n]:[]).concat([o]):i[n]?i[n]+", "+o:o}})),i):i}},function(e,n,o){"use strict";var t=o(1);e.exports=t.isStandardBrowserEnv()?function(){var e,n=/(msie|trident)/i.test(navigator.userAgent),o=document.createElement("a");function a(e){var t=e;return n&&(o.setAttribute("href",t),t=o.href),o.setAttribute("href",t),{href:o.href,protocol:o.protocol?o.protocol.replace(/:$/,""):"",host:o.host,search:o.search?o.search.replace(/^\?/,""):"",hash:o.hash?o.hash.replace(/^#/,""):"",hostname:o.hostname,port:o.port,pathname:"/"===o.pathname.charAt(0)?o.pathname:"/"+o.pathname}}return e=a(window.location.href),function(n){var o=t.isString(n)?a(n):n;return o.protocol===e.protocol&&o.host===e.host}}():function(){return!0}},function(e,n,o){"use strict";var t=o(1);e.exports=t.isStandardBrowserEnv()?{write:function(e,n,o,a,r,i){var s=[];s.push(e+"="+encodeURIComponent(n)),t.isNumber(o)&&s.push("expires="+new Date(o).toGMTString()),t.isString(a)&&s.push("path="+a),t.isString(r)&&s.push("domain="+r),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,n,o){"use strict";var t=o(10);function a(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var n;this.promise=new Promise((function(e){n=e}));var o=this;e((function(e){o.reason||(o.reason=new t(e),n(o.reason))}))}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.source=function(){var e;return{token:new a((function(n){e=n})),cancel:e}},e.exports=a},function(e,n,o){"use strict";e.exports=function(e){return function(n){return e.apply(null,n)}}},function(e,n,o){var t=o(33);"string"==typeof t&&(t=[[e.i,t,""]]);var a={hmr:!0,transform:void 0};o(35)(t,a);t.locals&&(e.exports=t.locals)},function(e,n,o){(e.exports=o(34)(!1)).push([e.i,'@font-face {\n  font-family: OmoTypeA-BlackOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-BlackOne.woff");\n}\n@font-face {\n  font-family: OmoTypeA-BlackTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-BlackTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeA-BlackThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-BlackThree.woff");\n}\n@font-face {\n  font-family: OmoTypeA-BlackFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-BlackFour.woff");\n}\n@font-face {\n  font-family: OmoTypeA-BoldOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-BoldOne.woff");\n}\n@font-face {\n  font-family: OmoTypeA-BoldTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-BoldTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeA-BoldThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-BoldThree.woff");\n}\n@font-face {\n  font-family: OmoTypeA-BoldFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-BoldFour.woff");\n}\n@font-face {\n  font-family: OmoTypeA-BookOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-BookOne.woff");\n}\n@font-face {\n  font-family: OmoTypeA-BookTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-BookTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeA-BookThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-BookThree.woff");\n}\n@font-face {\n  font-family: OmoTypeA-BookFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-BookFour.woff");\n}\n@font-face {\n  font-family: OmoTypeA-LightOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-LightOne.woff");\n}\n@font-face {\n  font-family: OmoTypeA-LightTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-LightTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeA-LightThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-LightThree.woff");\n}\n@font-face {\n  font-family: OmoTypeA-LightFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-LightFour.woff");\n}\n@font-face {\n  font-family: OmoTypeA-RegularOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-RegularOne.woff");\n}\n@font-face {\n  font-family: OmoTypeA-RegularTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-RegularTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeA-RegularThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-RegularThree.woff");\n}\n@font-face {\n  font-family: OmoTypeA-RegularFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-RegularFour.woff");\n}\n@font-face {\n  font-family: OmoTypeA-MediumOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-MediumOne.woff");\n}\n@font-face {\n  font-family: OmoTypeA-MediumTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-MediumTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeA-MediumThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-MediumThree.woff");\n}\n@font-face {\n  font-family: OmoTypeA-MediumFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-MediumFour.woff");\n}\n\n@font-face {\n  font-family: OmoTypeB-BlackOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-BlackOne.woff");\n}\n@font-face {\n  font-family: OmoTypeB-BlackTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-BlackTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeB-BlackThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-BlackThree.woff");\n}\n@font-face {\n  font-family: OmoTypeB-BlackFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-BlackFour.woff");\n}\n@font-face {\n  font-family: OmoTypeB-BoldOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-BoldOne.woff");\n}\n@font-face {\n  font-family: OmoTypeB-BoldTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-BoldTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeB-BoldThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-BoldThree.woff");\n}\n@font-face {\n  font-family: OmoTypeB-BoldFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-BoldFour.woff");\n}\n@font-face {\n  font-family: OmoTypeB-BookOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-BookOne.woff");\n}\n@font-face {\n  font-family: OmoTypeB-BookTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-BookTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeB-BookThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-BookThree.woff");\n}\n@font-face {\n  font-family: OmoTypeB-BookFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-BookFour.woff");\n}\n@font-face {\n  font-family: OmoTypeB-LightOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-LightOne.woff");\n}\n@font-face {\n  font-family: OmoTypeB-LightTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-LightTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeB-LightThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-LightThree.woff");\n}\n@font-face {\n  font-family: OmoTypeB-LightFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-LightFour.woff");\n}\n@font-face {\n  font-family: OmoTypeB-RegularOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-RegularOne.woff");\n}\n@font-face {\n  font-family: OmoTypeB-RegularTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-RegularTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeB-RegularThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-RegularThree.woff");\n}\n@font-face {\n  font-family: OmoTypeB-RegularFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-RegularFour.woff");\n}\n@font-face {\n  font-family: OmoTypeB-MediumOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-MediumOne.woff");\n}\n@font-face {\n  font-family: OmoTypeB-MediumTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-MediumTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeB-MediumThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-MediumThree.woff");\n}\n@font-face {\n  font-family: OmoTypeB-MediumFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-MediumFour.woff");\n}\n\n@font-face {\n  font-family: OmoTypeC-BlackOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-BlackOne.woff");\n}\n@font-face {\n  font-family: OmoTypeC-BlackTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-BlackTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeC-BlackThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-BlackThree.woff");\n}\n@font-face {\n  font-family: OmoTypeC-BlackFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-BlackFour.woff");\n}\n@font-face {\n  font-family: OmoTypeC-BoldOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-BoldOne.woff");\n}\n@font-face {\n  font-family: OmoTypeC-BoldTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-BoldTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeC-BoldThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-BoldThree.woff");\n}\n@font-face {\n  font-family: OmoTypeC-BoldFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-BoldFour.woff");\n}\n@font-face {\n  font-family: OmoTypeC-BookOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-BookOne.woff");\n}\n@font-face {\n  font-family: OmoTypeC-BookTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-BookTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeC-BookThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-BookThree.woff");\n}\n@font-face {\n  font-family: OmoTypeC-BookFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-BookFour.woff");\n}\n@font-face {\n  font-family: OmoTypeC-LightOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-LightOne.woff");\n}\n@font-face {\n  font-family: OmoTypeC-LightTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-LightTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeC-LightThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-LightThree.woff");\n}\n@font-face {\n  font-family: OmoTypeC-LightFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-LightFour.woff");\n}\n@font-face {\n  font-family: OmoTypeC-RegularOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-RegularOne.woff");\n}\n@font-face {\n  font-family: OmoTypeC-RegularTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-RegularTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeC-RegularThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-RegularThree.woff");\n}\n@font-face {\n  font-family: OmoTypeC-RegularFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-RegularFour.woff");\n}\n@font-face {\n  font-family: OmoTypeC-MediumOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-MediumOne.woff");\n}\n@font-face {\n  font-family: OmoTypeC-MediumTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-MediumTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeC-MediumThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-MediumThree.woff");\n}\n@font-face {\n  font-family: OmoTypeC-MediumFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-MediumFour.woff");\n}\n\n@font-face {\n  font-family: OmoTypeD-BlackOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-BlackOne.woff");\n}\n@font-face {\n  font-family: OmoTypeD-BlackTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-BlackTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeD-BlackThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-BlackThree.woff");\n}\n@font-face {\n  font-family: OmoTypeD-BlackFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-BlackFour.woff");\n}\n@font-face {\n  font-family: OmoTypeD-BoldOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-BoldOne.woff");\n}\n@font-face {\n  font-family: OmoTypeD-BoldTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-BoldTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeD-BoldThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-BoldThree.woff");\n}\n@font-face {\n  font-family: OmoTypeD-BoldFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-BoldFour.woff");\n}\n@font-face {\n  font-family: OmoTypeD-BookOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-BookOne.woff");\n}\n@font-face {\n  font-family: OmoTypeD-BookTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-BookTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeD-BookThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-BookThree.woff");\n}\n@font-face {\n  font-family: OmoTypeD-BookFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-BookFour.woff");\n}\n@font-face {\n  font-family: OmoTypeD-LightOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-LightOne.woff");\n}\n@font-face {\n  font-family: OmoTypeD-LightTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-LightTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeD-LightThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-LightThree.woff");\n}\n@font-face {\n  font-family: OmoTypeD-LightFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-LightFour.woff");\n}\n@font-face {\n  font-family: OmoTypeD-RegularOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-RegularOne.woff");\n}\n@font-face {\n  font-family: OmoTypeD-RegularTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-RegularTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeD-RegularThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-RegularThree.woff");\n}\n@font-face {\n  font-family: OmoTypeD-RegularFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-RegularFour.woff");\n}\n@font-face {\n  font-family: OmoTypeD-MediumOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-MediumOne.woff");\n}\n@font-face {\n  font-family: OmoTypeD-MediumTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-MediumTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeD-MediumThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-MediumThree.woff");\n}\n@font-face {\n  font-family: OmoTypeD-MediumFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-MediumFour.woff");\n}\n\n@font-face {\n  font-family: OmoTypeE-BlackOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-BlackOne.woff");\n}\n@font-face {\n  font-family: OmoTypeE-BlackTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-BlackTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeE-BlackThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-BlackThree.woff");\n}\n@font-face {\n  font-family: OmoTypeE-BlackFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-BlackFour.woff");\n}\n@font-face {\n  font-family: OmoTypeE-BoldOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-BoldOne.woff");\n}\n@font-face {\n  font-family: OmoTypeE-BoldTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-BoldTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeE-BoldThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-BoldThree.woff");\n}\n@font-face {\n  font-family: OmoTypeE-BoldFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-BoldFour.woff");\n}\n@font-face {\n  font-family: OmoTypeE-BookOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-BookOne.woff");\n}\n@font-face {\n  font-family: OmoTypeE-BookTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-BookTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeE-BookThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-BookThree.woff");\n}\n@font-face {\n  font-family: OmoTypeE-BookFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-BookFour.woff");\n}\n@font-face {\n  font-family: OmoTypeE-LightOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-LightOne.woff");\n}\n@font-face {\n  font-family: OmoTypeE-LightTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-LightTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeE-LightThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-LightThree.woff");\n}\n@font-face {\n  font-family: OmoTypeE-LightFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-LightFour.woff");\n}\n@font-face {\n  font-family: OmoTypeE-RegularOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-RegularOne.woff");\n}\n@font-face {\n  font-family: OmoTypeE-RegularTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-RegularTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeE-RegularThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-RegularThree.woff");\n}\n@font-face {\n  font-family: OmoTypeE-RegularFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-RegularFour.woff");\n}\n@font-face {\n  font-family: OmoTypeE-MediumOne;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-MediumOne.woff");\n}\n@font-face {\n  font-family: OmoTypeE-MediumTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-MediumTwo.woff");\n}\n@font-face {\n  font-family: OmoTypeE-MediumThree;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-MediumThree.woff");\n}\n@font-face {\n  font-family: OmoTypeE-MediumFour;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-MediumFour.woff");\n}\n\n@font-face {\n  font-family: OmoTypeA-;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeA-RegularOne.woff");\n}\n\n@font-face {\n  font-family: OmoTypeB-;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeB-RegularOne.woff");\n}\n@font-face {\n  font-family: OmoTypeC-;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeC-RegularOne.woff");\n}\n@font-face {\n  font-family: OmoTypeD-;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeD-RegularOne.woff");\n}\n@font-face {\n  font-family: OmoTypeE-;\n  src: url("https://omo-lab.herokuapp.com/fonts/woff/OmoTypeE-RegularOne.woff");\n}\n@font-face {\n  font-family: OmoType-RegularStdTwo;\n  src: url("https://omo-lab.herokuapp.com/fonts/std/OmoType-RegularStdTwo.ttf");\n}\n\n.omo-widget {\n  --primary: #eb8b2d;\n  --secondary: #2093aa;\n  --svgFill: white;\n  --size: 46px;\n  --margin-size: 2px;\n  --sizeAdjusted: calc(var(--size) + 2 * var(--margin-size));\n  --animationSpeed: 0.15s;\n  position: fixed;\n  z-index: 9999999999999 !important;\n  bottom: calc(var(--size) * 0.5);\n  right: calc(var(--size) * 0.5);\n  background-color: black;\n  font-size: 0;\n  border-radius: calc(var(--size) / 2 + var(--margin-size));\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: reverse;\n  -ms-flex-direction: column-reverse;\n  flex-direction: column-reverse;\n}\n\n@media (min-width: 768px) {\n  .omo-widget {\n    --size: 50px;\n    --margin-size: 2px;\n    top: calc(var(--size) * 0.5);\n    bottom: auto;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: column;\n    flex-direction: column;\n  }\n}\n\n.omo-widget * {\n  margin: 0;\n  padding: 0;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.omo-widget *:focus {\n  outline: none;\n  -webkit-box-shadow: 0 0 0px var(--margin-size) var(--secondary);\n  box-shadow: 0 0 0px var(--margin-size) var(--secondary);\n}\n\n.omo-widget__main-toggle {\n  border: calc(5 * var(--margin-size)) solid black !important;\n  background: white !important;\n}\n\n.omo-widget__main-toggle ~ * {\n  -webkit-transition: height var(--animationSpeed) ease var(--animationSpeed),\n    opacity var(--animationSpeed) ease,\n    -webkit-transform var(--animationSpeed) ease;\n  transition: height var(--animationSpeed) ease var(--animationSpeed),\n    opacity var(--animationSpeed) ease,\n    -webkit-transform var(--animationSpeed) ease;\n  transition: height var(--animationSpeed) ease var(--animationSpeed),\n    transform var(--animationSpeed) ease, opacity var(--animationSpeed) ease;\n  transition: height var(--animationSpeed) ease var(--animationSpeed),\n    transform var(--animationSpeed) ease, opacity var(--animationSpeed) ease,\n    -webkit-transform var(--animationSpeed) ease;\n  -webkit-transform: scale(0.8);\n  transform: scale(0.8);\n  height: 0;\n  opacity: 0;\n  z-index: 2;\n  pointer-events: none;\n}\n\n.omo-widget__main-toggle:checked ~ * {\n  -webkit-transition: height var(--animationSpeed) ease,\n    opacity var(--animationSpeed) ease var(--animationSpeed),\n    -webkit-transform var(--animationSpeed) ease var(--animationSpeed);\n  transition: height var(--animationSpeed) ease,\n    opacity var(--animationSpeed) ease var(--animationSpeed),\n    -webkit-transform var(--animationSpeed) ease var(--animationSpeed);\n  transition: height var(--animationSpeed) ease,\n    transform var(--animationSpeed) ease var(--animationSpeed),\n    opacity var(--animationSpeed) ease var(--animationSpeed);\n  transition: height var(--animationSpeed) ease,\n    transform var(--animationSpeed) ease var(--animationSpeed),\n    opacity var(--animationSpeed) ease var(--animationSpeed),\n    -webkit-transform var(--animationSpeed) ease var(--animationSpeed);\n  height: var(--sizeAdjusted);\n  opacity: 1;\n  -webkit-transform: scale(1);\n  transform: scale(1);\n  pointer-events: all;\n}\n\n.omo-widget__main-toggle:checked ~ * .omo-widget__link-wrap {\n  height: calc(var(--size) + var(--margin-size));\n}\n\n.omo-widget__main-toggle:checked ~ * .omo-widget__link-wrap a {\n  margin-bottom: 0;\n}\n\n.omo-widget__power-toggle-wrap {\n  pointer-events: none !important;\n}\n\n.omo-widget__power-toggle-wrap > * {\n  opacity: 0.5;\n}\n\n.omo-widget.has-changes\n  .omo-widget__main-toggle:checked\n  ~ .omo-widget__power-toggle-wrap {\n  pointer-events: all !important;\n}\n\n.omo-widget.has-changes\n  .omo-widget__main-toggle:checked\n  ~ .omo-widget__power-toggle-wrap\n  > * {\n  opacity: 1;\n}\n\n.omo-widget.has-changes\n  .omo-widget__main-toggle:checked\n  ~ .omo-widget__power-toggle-wrap\n  .omo-widget__power-toggle {\n  background: var(--primary);\n}\n\n.omo-widget.has-changes .omo-widget__main-toggle {\n  background: var(--primary) !important;\n}\n\n.omo-widget.power-off > .omo-widget__main-toggle {\n  background: white !important;\n}\n\n.omo-widget.power-off\n  > .omo-widget__main-toggle:checked\n  ~ *:not(:nth-last-child(-n + 2)) {\n  opacity: 0.4;\n  pointer-events: none;\n}\n\n.omo-widget.power-off .omo-widget__power {\n  background: black !important;\n}\n\n.omo-widget__add,\n.omo-widget__substract,\n.omo-widget__reset,\n.omo-widget__power-toggle,\n.omo-widget__main-toggle,\n.omo-widget__toggle-options,\n.omo-widget__background-choice,\n.omo-widget__link-wrap a,\n.omo-widget__type-preview {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  display: block;\n  width: var(--size);\n  height: var(--size);\n  margin: var(--margin-size);\n  background: transparent;\n  border: 2px solid white;\n  border-radius: 50%;\n  font-size: 0;\n}\n\n.omo-widget__add:active,\n.omo-widget__add.active,\n.omo-widget__substract:active,\n.omo-widget__substract.active,\n.omo-widget__reset:active,\n.omo-widget__reset.active,\n.omo-widget__power-toggle:active,\n.omo-widget__power-toggle.active,\n.omo-widget__main-toggle:active,\n.omo-widget__main-toggle.active,\n.omo-widget__toggle-options:active,\n.omo-widget__toggle-options.active,\n.omo-widget__background-choice:active,\n.omo-widget__background-choice.active,\n.omo-widget__link-wrap a:active,\n.omo-widget__link-wrap a.active,\n.omo-widget__type-preview:active,\n.omo-widget__type-preview.active {\n  background-color: white;\n}\n\n.omo-widget__add:active + svg,\n.omo-widget__add:active > svg,\n.omo-widget__add.active + svg,\n.omo-widget__add.active > svg,\n.omo-widget__substract:active + svg,\n.omo-widget__substract:active > svg,\n.omo-widget__substract.active + svg,\n.omo-widget__substract.active > svg,\n.omo-widget__reset:active + svg,\n.omo-widget__reset:active > svg,\n.omo-widget__reset.active + svg,\n.omo-widget__reset.active > svg,\n.omo-widget__power-toggle:active + svg,\n.omo-widget__power-toggle:active > svg,\n.omo-widget__power-toggle.active + svg,\n.omo-widget__power-toggle.active > svg,\n.omo-widget__main-toggle:active + svg,\n.omo-widget__main-toggle:active > svg,\n.omo-widget__main-toggle.active + svg,\n.omo-widget__main-toggle.active > svg,\n.omo-widget__toggle-options:active + svg,\n.omo-widget__toggle-options:active > svg,\n.omo-widget__toggle-options.active + svg,\n.omo-widget__toggle-options.active > svg,\n.omo-widget__background-choice:active + svg,\n.omo-widget__background-choice:active > svg,\n.omo-widget__background-choice.active + svg,\n.omo-widget__background-choice.active > svg,\n.omo-widget__link-wrap a:active + svg,\n.omo-widget__link-wrap a:active > svg,\n.omo-widget__link-wrap a.active + svg,\n.omo-widget__link-wrap a.active > svg,\n.omo-widget__type-preview:active + svg,\n.omo-widget__type-preview:active > svg,\n.omo-widget__type-preview.active + svg,\n.omo-widget__type-preview.active > svg {\n  --svgFill: black;\n}\n\n.omo-widget__add:active::after,\n.omo-widget__add.active::after,\n.omo-widget__substract:active::after,\n.omo-widget__substract.active::after,\n.omo-widget__reset:active::after,\n.omo-widget__reset.active::after,\n.omo-widget__power-toggle:active::after,\n.omo-widget__power-toggle.active::after,\n.omo-widget__main-toggle:active::after,\n.omo-widget__main-toggle.active::after,\n.omo-widget__toggle-options:active::after,\n.omo-widget__toggle-options.active::after,\n.omo-widget__background-choice:active::after,\n.omo-widget__background-choice.active::after,\n.omo-widget__link-wrap a:active::after,\n.omo-widget__link-wrap a.active::after,\n.omo-widget__type-preview:active::after,\n.omo-widget__type-preview.active::after {\n  border-color: transparent transparent black transparent;\n}\n\n.omo-widget__link-wrap {\n  margin-bottom: 0;\n  overflow: hidden;\n}\n\n.omo-widget__link-wrap a {\n  background: var(--secondary);\n}\n\n.omo-widget__option-value {\n  display: none;\n}\n\n.omo-widget legend {\n  display: none;\n}\n\n.omo-widget svg {\n  display: block !important;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  pointer-events: none;\n  max-width: 50%;\n  max-height: 50%;\n  height: auto;\n}\n\n.omo-widget form {\n  position: relative;\n}\n\n.omo-widget form:valid::after {\n  content: "";\n  width: var(--size);\n  height: var(--size);\n  background: var(--primary);\n  position: absolute;\n  right: var(--margin-size);\n  top: var(--margin-size);\n  z-index: 323;\n  border-radius: 50%;\n}\n\n.omo-widget form:valid [type="reset"] {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.omo-widget__toggle-options ~ form {\n  -webkit-transition: width var(--animationSpeed) ease var(--animationSpeed);\n  transition: width var(--animationSpeed) ease var(--animationSpeed);\n  width: var(--sizeAdjusted);\n  height: var(--sizeAdjusted);\n  pointer-events: none;\n}\n\n.omo-widget__toggle-options ~ form > * {\n  -webkit-transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  opacity: 0;\n}\n\n.omo-widget__toggle-options:checked ~ form {\n  -webkit-transition: width var(--animationSpeed) ease;\n  transition: width var(--animationSpeed) ease;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  width: calc(3 * var(--sizeAdjusted));\n  pointer-events: all;\n}\n\n.omo-widget__toggle-options:checked ~ form [type="reset"] {\n  -webkit-transition: opacity var(--animationSpeed) ease;\n  transition: opacity var(--animationSpeed) ease;\n  position: absolute;\n  left: 0;\n  opacity: 0;\n}\n\n.omo-widget__toggle-options:checked ~ form:valid {\n  -webkit-transition: width var(--animationSpeed) ease,\n    padding var(--animationSpeed) ease;\n  transition: width var(--animationSpeed) ease,\n    padding var(--animationSpeed) ease;\n  width: calc(4 * var(--sizeAdjusted));\n  padding-left: var(--sizeAdjusted);\n}\n\n.omo-widget__toggle-options:checked ~ form:valid [type="reset"] {\n  -webkit-transition: opacity var(--animationSpeed) ease;\n  transition: opacity var(--animationSpeed) ease;\n  opacity: 1;\n}\n\n.omo-widget__toggle-options:checked ~ form > * {\n  -webkit-transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  opacity: 1;\n}\n\n.omo-widget__toggle-options > * {\n  -webkit-transition: opacity var(--animationSpeed) ease;\n  transition: opacity var(--animationSpeed) ease;\n  opacity: 1;\n}\n\n.omo-widget fieldset {\n  border: none;\n  position: relative;\n}\n\n.omo-widget form {\n  position: absolute;\n  top: 0;\n  right: 0;\n  background: black;\n  border-radius: calc(var(--sizeAdjusted) / 2);\n  padding-right: var(--sizeAdjusted);\n  z-index: -1;\n}\n\n.omo-widget [type="reset"] {\n  position: relative;\n}\n\n.omo-widget [type="reset"] svg {\n  width: 70%;\n  --svgFill: white;\n}\n\n.omo-widget [type="reset"]:active svg {\n  --svgFill: black;\n}\n\n.omo-widget__add,\n.omo-widget__substract {\n  position: relative;\n}\n\n.omo-widget__add::after,\n.omo-widget__substract::after {\n  --triangleSize: calc(var(--sizeAdjusted) / 3);\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translate(-50%, 0%) rotate(180deg);\n  transform: translate(-50%, 0%) rotate(180deg);\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 0 var(--triangleSize) var(--triangleSize) var(--triangleSize);\n  border-color: transparent transparent white transparent;\n}\n\n.omo-widget__add::after {\n  -webkit-transform: translate(-50%, -100%);\n  transform: translate(-50%, -100%);\n}\n\n.omo-widget {\n  --bgColor0: #eff3ee;\n  --bgColor1: #d9d8d8;\n  --bgColor2: #231f20;\n  --bgColor3: #9fb5de;\n  --bgColor4: #b894c4;\n  --bgColor5: #e2b0af;\n}\n\n.omo-widget [data-setting-name="background"] {\n  position: relative;\n  z-index: 1;\n}\n\n.omo-widget [data-setting-name="background"] form {\n  -webkit-transition: all var(--animationSpeed) ease var(--animationSpeed);\n  transition: all var(--animationSpeed) ease var(--animationSpeed);\n  height: calc(var(--sizeAdjusted) * 2 + 20px);\n  bottom: -10px;\n  top: auto;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n}\n\n.omo-widget [data-setting-name="background"] form > * {\n  -webkit-transition: opacity var(--animationSpeed) ease;\n  transition: opacity var(--animationSpeed) ease;\n  opacity: 0 !important;\n}\n\n.omo-widget [data-setting-name="background"] form:valid::after {\n  display: none;\n}\n\n.omo-widget [data-setting-name="background"] .omo-widget__toggle-options {\n  background: white;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__toggle-options:checked\n  ~ form {\n  -webkit-transition: width var(--animationSpeed) ease;\n  transition: width var(--animationSpeed) ease;\n  width: calc(var(--sizeAdjusted) * 3 + 20px);\n  padding: 10px;\n  border-top-right-radius: var(--sizeAdjusted/2);\n  border-bottom-right-radius: 0px;\n  margin-right: var(--sizeAdjusted);\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__toggle-options:checked\n  ~ form\n  > *:not(.omo-widget__reset) {\n  -webkit-transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  opacity: 1 !important;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__toggle-options:checked\n  ~ form:valid::before {\n  content: "";\n  position: absolute;\n  background: black;\n  width: calc(2 * var(--sizeAdjusted) + 20px);\n  height: calc(var(--sizeAdjusted) + 20px);\n  z-index: -1;\n  top: 0;\n  right: calc(100% - var(--sizeAdjusted) - 20px);\n  border-top-left-radius: calc(var(--sizeAdjusted) + 10px);\n  border-bottom-left-radius: calc(var(--sizeAdjusted) + 10px);\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__toggle-options:checked\n  ~ form:valid\n  .omo-widget__reset {\n  opacity: 1 !important;\n}\n\n.omo-widget [data-setting-name="background"]::after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: calc(100% - calc(2 * (var(--margin-size) + 2px)));\n  height: 0;\n  padding-top: calc(50% - 2 * var(--margin-size));\n  -webkit-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  border-radius: 50%;\n  border-top: calc(var(--size) / 2) solid white;\n  background: black;\n  pointer-events: none;\n}\n\n.omo-widget [data-setting-name="background"][data-value="0"]::after {\n  background: var(--bgColor0);\n}\n\n.omo-widget [data-setting-name="background"][data-value="1"]::after {\n  background: var(--bgColor1);\n}\n\n.omo-widget [data-setting-name="background"][data-value="2"]::after {\n  background: var(--bgColor2);\n}\n\n.omo-widget [data-setting-name="background"][data-value="3"]::after {\n  background: var(--bgColor3);\n}\n\n.omo-widget [data-setting-name="background"][data-value="4"]::after {\n  background: var(--bgColor4);\n}\n\n.omo-widget [data-setting-name="background"][data-value="5"]::after {\n  background: var(--bgColor5);\n}\n\n.omo-widget [data-setting-name="background"] .omo-widget__reset {\n  position: absolute;\n  right: calc(100% - 10px);\n  background: black;\n  left: auto !important;\n}\n\n.omo-widget [data-setting-name="background"] .omo-widget__reset:active {\n  background: white;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="0"] {\n  background: var(--bgColor0) !important;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="1"] {\n  background: var(--bgColor1) !important;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="2"] {\n  background: var(--bgColor2) !important;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="3"] {\n  background: var(--bgColor3) !important;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="4"] {\n  background: var(--bgColor4) !important;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="5"] {\n  background: var(--bgColor5) !important;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice:checked {\n  border-color: var(--primary);\n}\n\n.omo-widget\n  [data-setting-name="font-type"]\n  .omo-widget__toggle-options:checked\n  ~ form {\n  width: calc(4 * var(--sizeAdjusted));\n}\n\n.omo-widget\n  [data-setting-name="font-type"]\n  .omo-widget__toggle-options:checked\n  ~ form:valid {\n  -webkit-transition: width var(--animationSpeed) ease,\n    padding var(--animationSpeed) ease;\n  transition: width var(--animationSpeed) ease,\n    padding var(--animationSpeed) ease;\n  width: calc(5 * var(--sizeAdjusted));\n  padding-left: var(--sizeAdjusted);\n}\n\n.omo-widget\n  [data-setting-name="font-type"]\n  .omo-widget__toggle-options:checked\n  ~ form:valid\n  [type="reset"] {\n  -webkit-transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  opacity: 1;\n}\n\n.omo-widget__type-preview {\n  position: relative;\n  pointer-events: none;\n}\n\n.omo-widget__type-preview svg {\n  display: none !important;\n}\n\n.omo-widget__type-preview:not([data-selected]) svg:nth-child(1),\n.omo-widget__type-preview[data-selected="O"] svg:nth-child(1) {\n  display: block !important;\n}\n\n.omo-widget__type-preview[data-selected="A"] svg:nth-child(2) {\n  display: block !important;\n}\n\n.omo-widget__type-preview[data-selected="B"] svg:nth-child(3) {\n  display: block !important;\n}\n\n.omo-widget__type-preview[data-selected="C"] svg:nth-child(4) {\n  display: block !important;\n}\n\n.omo-widget__type-preview[data-selected="D"] svg:nth-child(5) {\n  display: block !important;\n}\n\n.omo-widget__type-preview[data-selected="E"] svg:nth-child(6) {\n  display: block !important;\n}\n',""])},function(e,n,o){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var o=function(e,n){var o=e[1]||"",t=e[3];if(!t)return o;if(n&&"function"==typeof btoa){var a=(i=t,s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),f="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(f," */")),r=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot).concat(e," */")}));return[o].concat(r).concat([a]).join("\n")}var i,s,f;return[o].join("\n")}(n,e);return n[2]?"@media ".concat(n[2],"{").concat(o,"}"):o})).join("")},n.i=function(e,o){"string"==typeof e&&(e=[[null,e,""]]);for(var t={},a=0;a<this.length;a++){var r=this[a][0];null!=r&&(t[r]=!0)}for(var i=0;i<e.length;i++){var s=e[i];null!=s[0]&&t[s[0]]||(o&&!s[2]?s[2]=o:o&&(s[2]="(".concat(s[2],") and (").concat(o,")")),n.push(s))}},n}},function(e,n,o){var t,a,r={},i=(t=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===a&&(a=t.apply(this,arguments)),a}),s=function(e){var n={};return function(o){if(void 0===n[o]){var t=e.call(this,o);if(t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[o]=t}return n[o]}}((function(e){return document.querySelector(e)})),f=null,c=0,l=[],u=o(36);function m(e,n){for(var o=0;o<e.length;o++){var t=e[o],a=r[t.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](t.parts[i]);for(;i<t.parts.length;i++)a.parts.push(v(t.parts[i],n))}else{var s=[];for(i=0;i<t.parts.length;i++)s.push(v(t.parts[i],n));r[t.id]={id:t.id,refs:1,parts:s}}}}function p(e,n){for(var o=[],t={},a=0;a<e.length;a++){var r=e[a],i=n.base?r[0]+n.base:r[0],s={css:r[1],media:r[2],sourceMap:r[3]};t[i]?t[i].parts.push(s):o.push(t[i]={id:i,parts:[s]})}return o}function d(e,n){var o=s(e.insertInto);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var t=l[l.length-1];if("top"===e.insertAt)t?t.nextSibling?o.insertBefore(n,t.nextSibling):o.appendChild(n):o.insertBefore(n,o.firstChild),l.push(n);else if("bottom"===e.insertAt)o.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=s(e.insertInto+" "+e.insertAt.before);o.insertBefore(n,a)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=l.indexOf(e);n>=0&&l.splice(n,1)}function h(e){var n=document.createElement("style");return e.attrs.type="text/css",w(n,e.attrs),d(e,n),n}function w(e,n){Object.keys(n).forEach((function(o){e.setAttribute(o,n[o])}))}function v(e,n){var o,t,a,r;if(n.transform&&e.css){if(!(r=n.transform(e.css)))return function(){};e.css=r}if(n.singleton){var i=c++;o=f||(f=h(n)),t=b.bind(null,o,i,!1),a=b.bind(null,o,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(o=function(e){var n=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",w(n,e.attrs),d(e,n),n}(n),t=O.bind(null,o,n),a=function(){g(o),o.href&&URL.revokeObjectURL(o.href)}):(o=h(n),t=T.bind(null,o),a=function(){g(o)});return t(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t(e=n)}else a()}}e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=i()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var o=p(e,n);return m(o,n),function(e){for(var t=[],a=0;a<o.length;a++){var i=o[a];(s=r[i.id]).refs--,t.push(s)}e&&m(p(e,n),n);for(a=0;a<t.length;a++){var s;if(0===(s=t[a]).refs){for(var f=0;f<s.parts.length;f++)s.parts[f]();delete r[s.id]}}}};var y,_=(y=[],function(e,n){return y[e]=n,y.filter(Boolean).join("\n")});function b(e,n,o,t){var a=o?"":t.css;if(e.styleSheet)e.styleSheet.cssText=_(n,a);else{var r=document.createTextNode(a),i=e.childNodes;i[n]&&e.removeChild(i[n]),i.length?e.insertBefore(r,i[n]):e.appendChild(r)}}function T(e,n){var o=n.css,t=n.media;if(t&&e.setAttribute("media",t),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}function O(e,n,o){var t=o.css,a=o.sourceMap,r=void 0===n.convertToAbsoluteUrls&&a;(n.convertToAbsoluteUrls||r)&&(t=u(t)),a&&(t+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var i=new Blob([t],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(i),s&&URL.revokeObjectURL(s)}},function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var o=n.protocol+"//"+n.host,t=o+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,n){var a,r=n.trim().replace(/^"(.*)"$/,(function(e,n){return n})).replace(/^'(.*)'$/,(function(e,n){return n}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(r)?e:(a=0===r.indexOf("//")?r:0===r.indexOf("/")?o+r:t+r.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")}))}},function(e,n,o){"use strict";o.r(n);var t,a=o(0),r=o.n(a),i=(o(32),o(11)),s=o.n(i),f=[];var c=function(e){return Number(e)-Number(r.a.BODY_FONT_SIZE)},l=[{id:1,value:"500",omoType:"BoldOne"},{id:2,value:"600",omoType:"BookOne"},{id:3,value:"800",omoType:"MediumOne"}],u=function(e){return l.filter((function(n){return n.value===e}))},m=[{id:1,value:1.25},{id:2,value:1.5},{id:3,value:1.75},{id:4,value:2}],p=function(e){return m.filter((function(n){return n.value===e}))},d=[{id:1,value:1.8},{id:2,value:2},{id:3,value:2.2},{id:4,value:2.4}],g=function(e){return d.filter((function(n){return n.value===e}))},h=[{id:1,style:"OmoTypeA",value:"".concat("OmoType","A-")},{id:2,style:"OmoTypeB",value:"".concat("OmoType","B-")},{id:3,style:"OmoTypeC",value:"".concat("OmoType","C-")},{id:4,style:"OmoTypeD",value:"".concat("OmoType","D-")},{id:5,style:"OmoTypeE",value:"".concat("OmoType","E-")}],w=[{id:1,style:"OmoTypeA",value:"".concat("OmoType","A-")},{id:2,style:"OmoTypeB",value:"".concat("OmoType","B-")},{id:3,style:"OmoTypeC",value:"".concat("OmoType","C-")},{id:4,style:"OmoTypeD",value:"".concat("OmoType","D-")},{id:5,style:"OmoTypeE",value:"".concat("OmoType","E-")}],v=function(e){return h.filter((function(n){return n.value===e}))},y=[{id:0,background:"#EFF3EE"},{id:1,background:"#D9D8D8"},{id:2,background:"#231F20"},{id:3,background:"#9FB5DE"},{id:4,background:"#B894C4"},{id:5,background:"#E2B0AF"}],_=function(e){return y.filter((function(n){return n.id===Number(e)}))},b=function(e){return y.filter((function(n){return n.background===e}))},T=function(){var e,n=document.getElementById("applyOverides").checked,o=Number(document.getElementById("totem_bsize").value)+Number(r.a.BODY_FONT_SIZE),t=Number(document.getElementById("totem_bsize").value)+Number(r.a.HEADER_FONT_SIZE),a=(e=document.getElementById("totem_body_ff").value,h.filter((function(n){return n.id===Number(e)}))),i=function(e){return w.filter((function(n){return n.id===Number(e)}))}(document.getElementById("totem_body_ff").value),s=function(e){return l.filter((function(n){return n.id===Number(e)}))}(document.getElementById("totem_font_weight").value),f=function(e){return m.filter((function(n){return n.id===Number(e)}))}(document.getElementById("totem_bspacing").value),c=function(e){return d.filter((function(n){return n.id===Number(e)}))}(document.getElementById("totem_bheight").value),u=document.getElementById("selectedBackround").getAttribute("data-value"),p=_(u);return{checked:n,bodyFontSize:o,headerFontSize:t,bodyFontFamily:a[0].value,headerFontFamily:i[0].value,bodyFontWeight:s[0].value,bodyFontSpacing:f[0].value,bodyLineHeight:c[0].value,bgColor:p[0].background}};function O(){var e=T();console.log(e);var n="transparent"===e.bgColor?"":r.a.setBackGroundColor(r.a.BACKGROUND_COLOR_ELEMENTS,e.bgColor);n+=r.a.setHeaderStyle(r.a.transformHeaderStyles(r.a.HEADER_STYLE_ELEMENTS).join(","),e.headerFontFamily,e.bodyFontWeight,e.headerFontSize,e.bodyFontSpacing,e.bodyLineHeight,e.bgColor),n+=r.a.setBodyTextStyle(r.a.BODY_STYLE,e.bodyFontFamily,e.bodyFontWeight,e.bodyFontSize,e.bodyFontSpacing,e.bodyLineHeight,e.bgColor),n+=r.a.setOmoWidgetStyle(r.a.OMO_WIDGET_ELEMENTS,r.a.omoWidgetStyle);var o=r.a.TWEAK();return console.log(o),n+=o,console.log(n),n}var k=function(e){var n="".concat(r.a.OMO_WIDGET_COOKIE,"_").concat(e),o=JSON.stringify(T());localStorage.setItem("".concat(n),o),console.log("saved:".concat(o))},E=function(e){var n=localStorage.getItem("".concat(r.a.OMO_WIDGET_COOKIE,"_"));(console.log(null===n),null!==n)&&(function(e,n){if(e.checked){var o=document.querySelector("#omo-widget");o.classList.add("has-changes"),o.querySelector(".omo-widget__main-toggle").parentElement.classList.toggle("power-off")}document.getElementById("applyOverides").checked=e.checked,document.getElementById("totem_bsize").value=c(e.bodyFontSize),document.getElementById("totem_body_ff").value=v(e.bodyFontFamily)[0].id,n.updateFont(document.getElementById("totem_body_ff").value),document.getElementById("totem_font_weight").value=u(e.bodyFontWeight)[0].id,document.getElementById("totem_bspacing").value=p(e.bodyFontSpacing)[0].id,document.getElementById("totem_bheight").value=g(e.bodyLineHeight)[0].id,document.getElementById("selectedBackround").setAttribute("data-value",b(e.bgColor)[0].id)}(JSON.parse(n),e),T().checked||(document.querySelector("#omo-widget").classList.add("has-changes"),S()))};function B(){var e=document.getElementsByTagName("head")[0],n=e.getElementsByTagName("style").length;return e.getElementsByTagName("style")[n-1]}var S=function(){var e=document.getElementById("omolab_style_w"),n=B();if(e)return n.innerHTML=O(),void function(e){if(e){var n=document.createTextNode(" "),o=e.style.display;e.appendChild(n),e.style.display="none",setTimeout((function(){e.style.display=o,n.parentNode.removeChild(n)}),0)}}(n);var o=document.createElement("style");o.type="text/css",o.id="omolab_style_w",n=O(),o.styleSheet?o.styleSheet.cssText=n:o.appendChild(document.createTextNode(n)),document.getElementsByTagName("head")[0].appendChild(o)},x=function(){var e=document.getElementById("omolab_style_w"),n=document.getElementsByTagName("head")[0],o=B();console.log(e===o),e===o&&n.removeChild(o)},A=function(e,n){var o=document.createElement("div");for(o.innerHTML=s.a,console.log(e),console.log(n),function(e){var n=e.querySelector("body");n&&!n.classList.contains(r.a.OMOLAB_BODY_CLASS)&&n.classList.add(r.a.OMOLAB_BODY_CLASS)}(document),t=document.getElementsByClassName("omo-widget-container")[0];o.children.length>0;){var a=o.children[0];f.push(a),t.appendChild(a)}var i,c,u,p,g,v,b,T,O,B,A,C,L,F,M,D,z,N,R=(i=document.querySelector("#omo-widget"),c=i.querySelector(".omo-widget__main-toggle"),u=i.querySelectorAll("form"),p=i.querySelectorAll(".omo-widget__toggle-options"),g=i.querySelectorAll(".omo-widget__option-value"),v=i.querySelectorAll('[type="button"]'),b=i.querySelectorAll(".omo-widget__reset"),T=i.querySelector('[data-setting-name="background"] form'),O=T.querySelector(".omo-widget__reset"),B=i.querySelector(".omo-widget__type-preview"),A=i.querySelector(".omo-widget__power-toggle"),C=function(){p.forEach((function(e){e.checked=!1,e.setAttribute("aria-selected","false")}))},L=function(e){B.setAttribute("data-selected",["O","A","B","C","D","E"][e])},F=function(e){var n=e.target.parentElement.querySelector("[type='number'"),o=parseInt(n.value),t=e.target.classList.contains("omo-widget__add");t&&o==n.getAttribute("max")||!t&&0==o||(n.value=t?o+1:o-1,M(),"totem_body_ff"===n.id&&L(n.value))},M=function(){var e=0;[].slice.call(u).forEach((function(n){console.log(n.checkValidity()),n.checkValidity()&&e++})),S(),k(""),i.classList[e>0?"add":"remove"]("has-changes")},D=function(e){var n="ArrowDown"==e.code,o="ArrowUp"==e.code;if("Tab"==e.code)return e.preventDefault(),void e.target.parentElement.parentElement.nextElementSibling.querySelector("[type='radio']").focus();var t=e.target.parentElement.querySelector(".add"),a=e.target.parentElement.querySelector(".substract");L(e.target.value),n?(a.classList.add("active"),setTimeout((function(){a.classList.remove("active")}),20),1==e.target.value&&(e.target.value=0,L(0))):o&&(t.classList.add("active"),setTimeout((function(){t.classList.remove("active")}),20))},z=function(e){"totem_body_ff_reset"===e.target.id&&L(0),C(),setTimeout((function(){M()}))},N=function(e){var n=e.target;if(console.log(e.target),e.code){var o="Tab"==e.code,t="Space"==e.code,a="Enter"==e.code;if(o&&"false"==n.getAttribute("aria-selected"))return e.preventDefault(),void n.parentElement.nextElementSibling.querySelector("[type='radio']").focus();if(!t&&!a)return}"true"==n.getAttribute("aria-selected")?(n.setAttribute("aria-selected","false"),n.checked=!1):(C(),n.setAttribute("aria-selected","true"),n.checked=!0)},c.addEventListener("click",C),A.addEventListener("click",(function(e){console.log(e.target),c.parentElement.classList.toggle("power-off")?x():S(),k(""),C()})),[].slice.call(p).forEach((function(e){e.addEventListener("click",N),e.addEventListener("keydown",N)})),[].slice.call(g).forEach((function(e){e.addEventListener("keydown",D),e.addEventListener("change",M)})),[].slice.call(v).forEach((function(e){e.addEventListener("click",F)})),[].slice.call(b).forEach((function(e){e.addEventListener("click",z)})),T.addEventListener("change",(function(e){T.parentElement.setAttribute("data-value",e.srcElement.value),M()})),O.addEventListener("click",(function(){T.parentElement.setAttribute("data-value",-1)})),{updateFont:function(e){L(e)}});r.a.readConfigurationFromFile(n.config).then((function(e){w.push({id:0,value:r.a.HEADER_FONT_FAMILY}),h.push({id:0,value:r.a.BODY_FONT_FAMILY}),d.push({id:0,value:r.a.BODY_LINE_HEIGHT}),l.push({id:0,value:r.a.BODY_FONT_WEIGHT}),m.push({id:0,value:r.a.BODY_FONT_SPACING}),y.push({id:-1,value:r.a.DEFAULT_BACKGROUND});var n=document.getElementById("selectedBackround");console.log(_(-1)),n.setAttribute("data-value",_(-1)[0].id),E(R)})).catch((function(e){console.log(e),alert(e)}))},C=["init","message"],L={};function F(e,n){if(!e)throw Error("API method required");if(e=e.toLowerCase(),-1===C.indexOf(e))throw Error("Method ".concat(e," is not supported"));switch(console.log("Handling API call ".concat(e),n),e){case"message":A(n,L);break;default:console.warn("No handler defined for ".concat(e))}}function M(e,n){for(var o in n)n.hasOwnProperty(o)&&(e[o]=n[o]);return e}!function(e){console.log("Omo-Widget starting");var n=e[e["Omo-Widget"]],o=n.q;if(o)for(var t=0;t<o.length;t++)"init"===o[t][0].toLowerCase()?L=M(L,o[t][1]):F(o[t][0],o[t][1]);(n=F).configurations=L}(window)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3RvdGVtV2lkZ2V0Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzNi1wcm9taXNlL2Rpc3QvZXM2LXByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3RvdGVtV2lkZ2V0LmNzcz9mYmM4Iiwid2VicGFjazovLy8uL3NyYy92aWV3cy90b3RlbVdpZGdldC5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvdG90ZW1XaWRnZXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4uanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJJTVBPUlRBTlRfRUxFTUVOVFNfU0VMRUNUT1IiLCJPTU9MQUJfQk9EWV9DTEFTUyIsIkRhdGUiLCJub3ciLCJNYXRoIiwiY2VpbCIsInJhbmRvbSIsIk9NT19XSURHRVRfQ09PS0lFIiwiQk9EWV9GT05UX0ZBTUlMWSIsIkhFQURFUl9TVFlMRV9FTEVNRU5UUyIsIkNVU1RPTV9IRUFERVJfU1RZTEVfRUxFTUVOVFMiLCJhZGRQaXhlbHNUb051bWJlciIsImludmVyc2VGb250RmFjZUNvbG9yIiwiYmdDb2xvciIsImNvbnNvbGUiLCJsb2ciLCJzdHlsZUJsYWNrIiwidHJpbSIsInRyYW5zZm9ybUhlYWRlclN0eWxlcyIsImVsZW1lbnRzIiwibWFwIiwiZWxlbWVudCIsInNldEhlYWRlclN0eWxlIiwiaGVhZGVyU3R5bGVFbGVtZW50cyIsImhlYWRlckZvbnRGYW1pbHkiLCJoZWFkZXJGb250V2VpZ2h0IiwiaGVhZGVyRm9udFNpemUiLCJoZWFkZXJGb250U3BhY2luZyIsImhlYWRlckxpbmVIZWlnaHQiLCJIRUFERVJfRk9OVF9TSVpFIiwiSEVBREVSX0ZPTlRfU1BBQ0lORyIsIkhFQURFUl9MSU5FX0hFSUdIVCIsIk9NT19XSURHRVRfRUxFTUVOVFMiLCJhcHBlbmRCb2R5VG9Dc3NTZWxlY3RvciIsIm9tb1dpZGdldFN0eWxlIiwic2V0T21vV2lkZ2V0U3R5bGUiLCJvbW9XaWRnZXRFbGVtZW50cyIsInN0eWxlIiwiam9pbiIsIlRXRUFLIiwiYm9keSIsImVsZW1lbnRzVG9Ud2VhayIsIkVMRU1FTlRTX1RPX1RXRUFLX1NUWUxFIiwiYXJyIiwiZm9yRWFjaCIsInB1c2giLCJyZXBsYWNlIiwiQk9EWV9TVFlMRSIsInNldEJvZHlUZXh0U3R5bGUiLCJib2R5RWxlbWVudHMiLCJib2R5Rm9udEZhbWlseSIsImJvZHlGb250V2VpZ2h0IiwiYm9keUZvbnRTaXplIiwiYm9keUZvbnRTcGFjaW5nIiwiYm9keUxpbmVIZWlnaHQiLCJCT0RZX0ZPTlRfU0laRSIsIkJPRFlfRk9OVF9TUEFDSU5HIiwiQk9EWV9MSU5FX0hFSUdIVCIsIkJBQ0tHUk9VTkRfQ09MT1JfRUxFTUVOVFMiLCJzZXRCYWNrR3JvdW5kQ29sb3IiLCJhcHBseVRvRWxlbWVudHMiLCJyZXF1aXJlIiwicG9seWZpbGwiLCJheGlvcyIsInJlYWRDb25maWd1cmF0aW9uRnJvbUZpbGUiLCJjb25mIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ0aGVuIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJFcnJvciIsInN0YXR1c1RleHQiLCJ0ZXh0IiwiZGF0YSIsIkhFQURFUl9GT05UX0ZBTUlMWSIsIkJPRFlfTElORV9IRUlHSFRfTUFYIiwiQk9EWV9GT05UX1NJWkVfTUFYIiwiQk9EWV9GT05UX1dFSUdIVCIsIkRFRkFVTFRfQkFDS0dST1VORCIsImluY2x1ZGVzIiwidW5kZWZpbmVkIiwiY2F0Y2giLCJlcnIiLCJ0b1N0cmluZyIsImlzQXJyYXkiLCJ2YWwiLCJpc1VuZGVmaW5lZCIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsIm9iaiIsImZuIiwibGVuZ3RoIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiY29uc3RydWN0b3IiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0Iiwid2luZG93IiwiZG9jdW1lbnQiLCJtZXJnZSIsInJlc3VsdCIsImFzc2lnblZhbHVlIiwiYXJndW1lbnRzIiwiZGVlcE1lcmdlIiwiZXh0ZW5kIiwiYSIsImIiLCJ0aGlzQXJnIiwic3RyIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsInByb2Nlc3MiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiZSIsInRoaXMiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImNvbmNhdCIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwibGVuIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsIm5leHRUaWNrIiwiYXJncyIsIkFycmF5IiwiYXBwbHkiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJ1dGlscyIsImVuY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInVybCIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJzZXJpYWxpemVkUGFyYW1zIiwicGFydHMiLCJ2IiwidG9JU09TdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwiaGFzaG1hcmtJbmRleCIsImluZGV4T2YiLCJzbGljZSIsIl9fQ0FOQ0VMX18iLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiYWRhcHRlciIsImRlZmF1bHRzIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJjb21tb24iLCJtZXRob2QiLCJzZXR0bGUiLCJidWlsZFVSTCIsImJ1aWxkRnVsbFBhdGgiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImNvbmZpZyIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsImZ1bGxQYXRoIiwiYmFzZVVSTCIsIm9wZW4iLCJ0b1VwcGVyQ2FzZSIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZWFkIiwidG9Mb3dlckNhc2UiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsInByb21pc2UiLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJlbmhhbmNlRXJyb3IiLCJtZXNzYWdlIiwiY29kZSIsImVycm9yIiwiY29uZmlnMSIsImNvbmZpZzIiLCJ2YWx1ZUZyb21Db25maWcyS2V5cyIsIm1lcmdlRGVlcFByb3BlcnRpZXNLZXlzIiwiZGVmYXVsdFRvQ29uZmlnMktleXMiLCJwcm9wIiwiYXhpb3NLZXlzIiwib3RoZXJLZXlzIiwia2V5cyIsImZpbHRlciIsIkNhbmNlbCIsImZhY3RvcnkiLCJ4IiwidmVydHhOZXh0IiwiY3VzdG9tU2NoZWR1bGVyRm4iLCJhc2FwIiwiY2FsbGJhY2siLCJhcmciLCJmbHVzaCIsInNjaGVkdWxlRmx1c2giLCJicm93c2VyV2luZG93IiwiYnJvd3Nlckdsb2JhbCIsIkJyb3dzZXJNdXRhdGlvbk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJpc05vZGUiLCJzZWxmIiwiaXNXb3JrZXIiLCJVaW50OENsYW1wZWRBcnJheSIsImltcG9ydFNjcmlwdHMiLCJNZXNzYWdlQ2hhbm5lbCIsInVzZVNldFRpbWVvdXQiLCJnbG9iYWxTZXRUaW1lb3V0IiwiY2hhbm5lbCIsIml0ZXJhdGlvbnMiLCJvYnNlcnZlciIsIm5vZGUiLCJvbkZ1bGZpbGxtZW50Iiwib25SZWplY3Rpb24iLCJfYXJndW1lbnRzIiwicGFyZW50IiwiY2hpbGQiLCJQUk9NSVNFX0lEIiwibWFrZVByb21pc2UiLCJfc3RhdGUiLCJpbnZva2VDYWxsYmFjayIsIl9yZXN1bHQiLCJzdWJzY3JpYmUiLCJfcmVzb2x2ZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvcnQyIiwicG9zdE1lc3NhZ2UiLCJ2ZXJ0eCIsInJ1bk9uTG9vcCIsInJ1bk9uQ29udGV4dCIsImF0dGVtcHRWZXJ0eCIsInN1YnN0cmluZyIsIlBFTkRJTkciLCJGVUxGSUxMRUQiLCJSRUpFQ1RFRCIsIkdFVF9USEVOX0VSUk9SIiwiRXJyb3JPYmplY3QiLCJnZXRUaGVuIiwiaGFuZGxlTWF5YmVUaGVuYWJsZSIsIm1heWJlVGhlbmFibGUiLCJ0aGVuJCQiLCJ0aGVuYWJsZSIsImZ1bGZpbGwiLCJfcmVqZWN0IiwicmVhc29uIiwiaGFuZGxlT3duVGhlbmFibGUiLCJzZWFsZWQiLCJmdWxmaWxsbWVudEhhbmRsZXIiLCJyZWplY3Rpb25IYW5kbGVyIiwidHJ5VGhlbiIsIl9sYWJlbCIsImhhbmRsZUZvcmVpZ25UaGVuYWJsZSIsIlR5cGVFcnJvciIsInB1Ymxpc2hSZWplY3Rpb24iLCJfb25lcnJvciIsInB1Ymxpc2giLCJfc3Vic2NyaWJlcnMiLCJzdWJzY3JpYmVycyIsInNldHRsZWQiLCJkZXRhaWwiLCJUUllfQ0FUQ0hfRVJST1IiLCJoYXNDYWxsYmFjayIsInN1Y2NlZWRlZCIsImZhaWxlZCIsInRyeUNhdGNoIiwiaWQiLCJFbnVtZXJhdG9yIiwiQ29uc3RydWN0b3IiLCJpbnB1dCIsIl9pbnN0YW5jZUNvbnN0cnVjdG9yIiwiX2lucHV0IiwiX3JlbWFpbmluZyIsIl9lbnVtZXJhdGUiLCJyZXNvbHZlciIsIm5lZWRzUmVzb2x2ZXIiLCJpbml0aWFsaXplUHJvbWlzZSIsIm5lZWRzTmV3IiwibG9jYWwiLCJnbG9iYWwiLCJGdW5jdGlvbiIsIlAiLCJwcm9taXNlVG9TdHJpbmciLCJjYXN0IiwiX2VhY2hFbnRyeSIsImVudHJ5IiwicmVzb2x2ZSQkIiwiX3RoZW4iLCJfc2V0dGxlZEF0IiwiX3dpbGxTZXR0bGVBdCIsInN0YXRlIiwiZW51bWVyYXRvciIsImFsbCIsImVudHJpZXMiLCJyYWNlIiwiXyIsIl9zZXRTY2hlZHVsZXIiLCJzY2hlZHVsZUZuIiwiX3NldEFzYXAiLCJhc2FwRm4iLCJfYXNhcCIsImciLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiY29udGV4dCIsImluc3RhbmNlIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJkZWZhdWx0IiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaW50ZXJjZXB0b3JzIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInNoaWZ0IiwiZ2V0VXJpIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsImgiLCJ0cmFuc2Zvcm1EYXRhIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJmbnMiLCJub3JtYWxpemVkTmFtZSIsImlzQXhpb3NFcnJvciIsInRvSlNPTiIsImRlc2NyaXB0aW9uIiwibnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwic3RhY2siLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJ0ZXN0IiwicmVsYXRpdmVVUkwiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlZCIsInNwbGl0IiwibGluZSIsInN1YnN0ciIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInNldEF0dHJpYnV0ZSIsInByb3RvY29sIiwiaG9zdCIsInNlYXJjaCIsImhhc2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsImNoYXJBdCIsImxvY2F0aW9uIiwicmVxdWVzdFVSTCIsIndyaXRlIiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJ0b0dNVFN0cmluZyIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsInRva2VuIiwic291cmNlIiwiY29udGVudCIsIm9wdGlvbnMiLCJ0cmFuc2Zvcm0iLCJsb2NhbHMiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwiaXRlbSIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJfaSIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJhdG9iIiwiZ2V0RWxlbWVudCIsInNlbGVjdG9yIiwic3R5bGVUYXJnZXQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJ0YXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJkb21TdHlsZSIsInJlZnMiLCJqIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiaW5zZXJ0SW50byIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwiaW5zZXJ0QXQiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwiZmlyc3RDaGlsZCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImlkeCIsInNwbGljZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImF0dHJzIiwidHlwZSIsImFkZEF0dHJzIiwiZWwiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJsaW5rIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJ1cGRhdGVMaW5rIiwiYXBwbHlUb1RhZyIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwiaW5kZXgiLCJyZXBsYWNlbWVudCIsIkJvb2xlYW4iLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwiYmFzZVVybCIsImN1cnJlbnREaXIiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwiJDEiLCJzZXRGb250U2l6ZSIsIk51bWJlciIsIkZPTlRfV0VJR0hUIiwib21vVHlwZSIsInNldEZvbnRXZWlnaHRJZCIsIkxFVFRFUl9TUEFDSU5HIiwic2V0c2V0TGV0dGVyU3BhY2luZ0lkIiwiTElORV9IRUlHSFQiLCJzZXRMaW5lSGVpZ2h0SWQiLCJCT0RZX0ZPTlRfQ0hPT1NFUiIsIkhFQURFUl9GT05UX0NIT09TRVIiLCJzZXRGb250RmFtaWx5SWQiLCJDT0xPUl9NQVAiLCJiYWNrZ3JvdW5kIiwiZ2V0Q29sb3IiLCJnZXRDb2xvclZhbHVlIiwiZ2V0VXNlckFwcGxpZWRWYWx1ZXMiLCJhcHBsaWVkIiwiZ2V0RWxlbWVudEJ5SWQiLCJjaGVja2VkIiwiYkZvbnRTaXplIiwiaEZvbnRTaXplIiwiYkZvbnRGYW1pbHkiLCJoRm9udEZhbWlseSIsInNldEhlYWRlckZvbnRGYW1pbHkiLCJiRm9udFdlaWd0aCIsInNldEZvbnRXZWlnaHQiLCJiRm9udFNwYWNpbmciLCJzZXRMZXR0ZXJTcGFjaW5nIiwiYkZvbnRMaW5lSGVpZ2h0Iiwic2V0TGluZUhlaWdodCIsImNvbG9yIiwiZ2V0QXR0cmlidXRlIiwiYmFja2dyb3VuZENvbG9yIiwiZ2VuZXJhdGVPbW9TdHlsZSIsInZhbHVlcyIsInR3ZWFrcyIsInNhdmVDb29raWUiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwicmVhZENvb2tpZSIsImdldEl0ZW0iLCJ3aWRnZXQiLCJjbGFzc0xpc3QiLCJwYXJlbnRFbGVtZW50IiwidG9nZ2xlIiwidXBkYXRlRm9udCIsInNldFVzZXJBcHBsaWVkVmFsdWVzIiwiYXBwbHlPdmVyaWRlcyIsImdldExhc3RBcHBsaWVkU3R5bGVTaGVldCIsImNoaWxkcmVuIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJvbW9TdHlsZSIsImlubmVySFRNTCIsImRpc3AiLCJkaXNwbGF5IiwiZm9yY2VSZWRyYXciLCJyZW1vdmVPdmVyaWRlcyIsImFwcGxpZWRTdHlsZSIsInNob3dXaWRnZXQiLCJjb25maWd1cmF0aW9ucyIsInRlbXBvcmFyeSIsImh0bWwiLCJkb2MiLCJjb250YWlucyIsImFkZCIsImFkZE9tb2xhYkNsYXNzU2NvcGVUb0JvZHkiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwidG1wIiwibWFpblRvZ2dsZSIsImZvcm1zIiwib3B0aW9uRGlzcGxheVRvZ2dsZXMiLCJ2YWx1ZUlucHV0cyIsImluY3JlbWVudENvbnRyb2xCdXR0b25zIiwicmVzZXRFbGVtZW50cyIsImJhY2tncm91bmRTZXR0aW5nc0Zvcm0iLCJiYWNrZ3JvdW5kU2V0dGluZ3NSZXNldCIsImZvbnRUeXBlUHJldmlldyIsInBvd2VyVG9nZ2xlIiwiY2xvc2VPcHRpb25zIiwidXBkYXRlRm9udEZhbWlseVByZXZpZXciLCJoYW5kbGVCdXR0b25DbGljayIsImhhbmRsZVZhbHVlQ2hhbmdlIiwiaGFuZGxlVmFsdWVLZXlib2FyZEV2ZW50cyIsImhhbmRsZVJlc2V0Q2xpY2siLCJoYW5kbGVPcHRpb25EaXNwbGF5VG9nZ2xlIiwiaGFuZGxlIiwicXVlcnlTZWxlY3RvckFsbCIsIm9wdGlvbkRpc3BsYXlUb2dnbGUiLCJldmVudCIsImN1clZhbCIsInBhcnNlSW50IiwiaXNBZGQiLCJjaGFuZ2VzQWN0aXZlIiwiZm9ybSIsImNoZWNrVmFsaWRpdHkiLCJpc0Rvd24iLCJpc1VwIiwicHJldmVudERlZmF1bHQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJmb2N1cyIsImFkZEJ0biIsInN1YnN0cmFjdEJ0biIsImlzVGFiIiwiaXNTcGFjZSIsImlzRW50ZXIiLCJyYWRpbyIsImJ1dHRvbiIsInJlc2V0Iiwic3JjRWxlbWVudCIsImFsZXJ0Iiwic3VwcG9ydGVkQVBJIiwiYXBpSGFuZGxlciIsImFwaSIsIndhcm4iLCJleHRlbmRPYmplY3QiLCJnbG9iYWxPYmplY3QiLCJxIiwiYXBwIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFN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VzhDLE1BRVpoa0IsT0FBTSxTQUFBQyxHQUNMdEUsUUFBUUMsSUFBSXFFLEdBQ1p1bEIsTUFBTXZsQixPQ3prQk53bEIsRUFBZSxDQUFDLE9BQVEsV0FFMUJuRCxFQUFpQixHQUlyQixTQUFTb0QsRUFBV0MsRUFBS3hmLEdBQ3ZCLElBQUt3ZixFQUFLLE1BQU10bUIsTUFBTSx1QkFHdEIsR0FGQXNtQixFQUFNQSxFQUFJMWIsZUFFeUIsSUFBL0J3YixFQUFhN2UsUUFBUStlLEdBQ3ZCLE1BQU10bUIsTUFBTSxVQUFELE9BQVdzbUIsRUFBWCxzQkFJYixPQUZBaHFCLFFBQVFDLElBQVIsNEJBQWlDK3BCLEdBQU94ZixHQUVoQ3dmLEdBRU4sSUFBSyxVQUNIdEQsRUFBV2xjLEVBQVFtYyxHQUNuQixNQUNGLFFBQ0UzbUIsUUFBUWlxQixLQUFSLGlDQUF1Q0QsS0FJN0MsU0FBU0UsRUFBYXJqQixFQUFHQyxHQUN2QixJQUFLLElBQU1ySSxLQUFPcUksRUFDWkEsRUFBRS9ILGVBQWVOLEtBQ25Cb0ksRUFBRXBJLEdBQU9xSSxFQUFFckksSUFHZixPQUFPb0ksR0FNVCxTQUFhUixHQUNYckcsUUFBUUMsSUFBSSx1QkFJWixJQUFJa3FCLEVBQWU5akIsRUFBT0EsRUFBTyxlQUMzQndCLEVBQVFzaUIsRUFBYUMsRUFDM0IsR0FBSXZpQixFQUNGLElBQUssSUFBSTNLLEVBQUksRUFBR0EsRUFBSTJLLEVBQU05QyxPQUFRN0gsSUFDRSxTQUE5QjJLLEVBQU0zSyxHQUFHLEdBQUdvUixjQUNkcVksRUFBaUJ1RCxFQUFhdkQsRUFBZ0I5ZSxFQUFNM0ssR0FBRyxJQUd2RDZzQixFQUFXbGlCLEVBQU0zSyxHQUFHLEdBQUkySyxFQUFNM0ssR0FBRyxLQU92Q2l0QixFQUFlSixHQUNGcEQsZUFBaUJBLEVBR2hDMEQsQ0FBSWhrQiIsImZpbGUiOiJPbW9XaWRnZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzcpO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXByb21pc2UtcmVqZWN0LWVycm9ycyAqL1xuLyogZXNsaW50LWRpc2FibGUgdmFycy1vbi10b3AgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXZhciAqL1xuY29uc3QgSU1QT1JUQU5UX0VMRU1FTlRTX1NFTEVDVE9SID1cbiAgJyo6bm90KGltZyk6bm90KDplbXB0eSk6bm90KFthcmlhLWhpZGRlbj1cInRydWVcIl0pOm5vdChbY2xhc3MqPVwiaWNvblwiXSknO1xuZXhwb3J0cy5JTVBPUlRBTlRfRUxFTUVOVFNfU0VMRUNUT1IgPSBJTVBPUlRBTlRfRUxFTUVOVFNfU0VMRUNUT1I7XG5cbi8qKiBHRU5FUkFURUQgT01PIENMQVNTIEJPRFkgKi9cbmNvbnN0IE9NT0xBQl9CT0RZX0NMQVNTID0gYG9tb2xhYi13LWJvZHktJHtEYXRlLm5vdygpfS0ke01hdGguY2VpbChcbiAgTWF0aC5yYW5kb20oKSAqIDEwMDBcbil9YDtcbmV4cG9ydHMuT01PTEFCX0JPRFlfQ0xBU1MgPSBPTU9MQUJfQk9EWV9DTEFTUztcblxuLyoqIENPT0tJRSBOQU1FICovXG5jb25zdCBPTU9fV0lER0VUX0NPT0tJRSA9IFwib21vbGFiLXctY29va2llXCI7XG5leHBvcnRzLk9NT19XSURHRVRfQ09PS0lFID0gT01PX1dJREdFVF9DT09LSUU7XG5cbmNvbnN0IENPTE9SX0JMQUNLID0gXCIjMjMxRjIwXCI7XG5jb25zdCBDT0xPUl9XSElURSA9IFwiI0VGRjNFRVwiO1xuXG52YXIgQk9EWV9GT05UX0ZBTUlMWTtcbmV4cG9ydHMuQk9EWV9GT05UX0ZBTUlMWTtcbi8qKiBIRUFERVIgU1RZTEVTICovXG52YXIgSEVBREVSX1NUWUxFX0VMRU1FTlRTO1xuZXhwb3J0cy5IRUFERVJfU1RZTEVfRUxFTUVOVFMgPSBIRUFERVJfU1RZTEVfRUxFTUVOVFM7XG5cbi8qKiBDVVNUT01fSEVBREVSX1NUWUxFUyAqL1xudmFyIENVU1RPTV9IRUFERVJfU1RZTEVfRUxFTUVOVFM7XG5leHBvcnRzLkNVU1RPTV9IRUFERVJfU1RZTEVfRUxFTUVOVFMgPSBDVVNUT01fSEVBREVSX1NUWUxFX0VMRU1FTlRTO1xuXG5jb25zdCBhZGRQaXhlbHNUb051bWJlciA9IHZhbHVlID0+IGAke3ZhbHVlfXB4YDtcblxuY29uc3QgdHJhbnNmb3JtSGVhZGVyU3R5bGVzID0gZWxlbWVudHMgPT5cbiAgZWxlbWVudHMubWFwKFxuICAgIGVsZW1lbnQgPT5cbiAgICAgIGBib2R5LiR7T01PTEFCX0JPRFlfQ0xBU1N9ICR7ZWxlbWVudH0sIGJvZHkuJHtPTU9MQUJfQk9EWV9DTEFTU30gJHtlbGVtZW50fSAqIGBcbiAgKTtcblxuLyoqXG4gKiBJTlZFUlQgRk9OVCBGQUNFIENPTExPUlxuICogQHBhcmFtIHt9IGJnQ29sb3JcbiAqL1xuY29uc3QgaW52ZXJzZUZvbnRGYWNlQ29sb3IgPSBiZ0NvbG9yID0+IHtcbiAgY29uc29sZS5sb2coXCJpbnZlcnNlRm9udEZhY2VDb2xvcjpcIiArIGJnQ29sb3IpO1xuICBsZXQgc3R5bGVCbGFjayA9IFwiXCI7XG5cbiAgaWYgKHR5cGVvZiBiZ0NvbG9yICE9PSBcInVuZGVmaW5lZFwiICYmIGJnQ29sb3IudHJpbSgpID09PSBDT0xPUl9CTEFDSykge1xuICAgIHN0eWxlQmxhY2sgPSBcImNvbG9yOndoaXRlICFpbXBvcnRhbnQ7XCI7XG4gIH1cbiAgLy8gaWYgKHR5cGVvZiBiZ0NvbG9yICE9PSBcInVuZGVmaW5lZFwiICYmIGJnQ29sb3IudHJpbSgpID09PSBDT0xPUl9XSElURSkge1xuICAvLyAgIHN0eWxlQmxhY2sgPSBcImNvbG9yOmJsYWNrICFpbXBvcnRhbnQ7XCI7XG4gIC8vIH1cbiAgcmV0dXJuIHN0eWxlQmxhY2s7XG59O1xuXG5jb25zdCBzZXRIZWFkZXJTdHlsZSA9IChcbiAgaGVhZGVyU3R5bGVFbGVtZW50cyxcbiAgaGVhZGVyRm9udEZhbWlseSxcbiAgaGVhZGVyRm9udFdlaWdodCxcbiAgaGVhZGVyRm9udFNpemUsXG4gIGhlYWRlckZvbnRTcGFjaW5nLFxuICBoZWFkZXJMaW5lSGVpZ2h0LFxuICBiZ0NvbG9yXG4pID0+IHtcbiAgY29uc3QgaGVhZGVyU3R5bGUgPSBgJHtoZWFkZXJTdHlsZUVsZW1lbnRzfXsgXG4gICAgZm9udC1mYW1pbHk6JHtoZWFkZXJGb250RmFtaWx5fSAhaW1wb3J0YW50OyBcbiAgICBmb250LXNpemU6JHtcbiAgICAgIGhlYWRlckZvbnRTaXplXG4gICAgICAgID8gYWRkUGl4ZWxzVG9OdW1iZXIoaGVhZGVyRm9udFNpemUpXG4gICAgICAgIDogYWRkUGl4ZWxzVG9OdW1iZXIodGhpcy5IRUFERVJfRk9OVF9TSVpFKVxuICAgIH0gIWltcG9ydGFudDsgXG4gICAgZm9udC13ZWlnaHQ6JHtoZWFkZXJGb250V2VpZ2h0fSAhaW1wb3J0YW50O1xuICAgIGxldHRlci1zcGFjaW5nOiR7XG4gICAgICBoZWFkZXJGb250U3BhY2luZ1xuICAgICAgICA/IGFkZFBpeGVsc1RvTnVtYmVyKGhlYWRlckZvbnRTcGFjaW5nKVxuICAgICAgICA6IGFkZFBpeGVsc1RvTnVtYmVyKHRoaXMuSEVBREVSX0ZPTlRfU1BBQ0lORylcbiAgICB9ICFpbXBvcnRhbnQ7IFxuICAgIGxpbmUtaGVpZ2h0OiR7XG4gICAgICBoZWFkZXJMaW5lSGVpZ2h0ID8gaGVhZGVyTGluZUhlaWdodCA6IHRoaXMuSEVBREVSX0xJTkVfSEVJR0hUXG4gICAgfSAhaW1wb3J0YW50O1xuICAgICR7aW52ZXJzZUZvbnRGYWNlQ29sb3IoYmdDb2xvcil9fVxcbmA7XG4gIHJldHVybiBoZWFkZXJTdHlsZTtcbn07XG5cbmV4cG9ydHMudHJhbnNmb3JtSGVhZGVyU3R5bGVzID0gdHJhbnNmb3JtSGVhZGVyU3R5bGVzO1xuZXhwb3J0cy5zZXRIZWFkZXJTdHlsZSA9IHNldEhlYWRlclN0eWxlO1xuXG4vKiogV0lER0VUIFNUWUxFICovXG52YXIgT01PX1dJREdFVF9FTEVNRU5UUztcbmV4cG9ydHMuT01PX1dJREdFVF9FTEVNRU5UUyA9IE9NT19XSURHRVRfRUxFTUVOVFM7XG5cbmNvbnN0IGFwcGVuZEJvZHlUb0Nzc1NlbGVjdG9yID0gZWxlbWVudHMgPT5cbiAgZWxlbWVudHMubWFwKGVsZW1lbnQgPT4gYGJvZHkuJHtPTU9MQUJfQk9EWV9DTEFTU30gJHtlbGVtZW50fWApO1xuXG5jb25zdCBvbW9XaWRnZXRTdHlsZSA9IFwieyBjb2xvcjpibGFjayB9XFxuXCI7XG5leHBvcnRzLm9tb1dpZGdldFN0eWxlID0gb21vV2lkZ2V0U3R5bGU7XG5cbi8qKiBTRVQgV0lER0VUIFNUWUxFICovXG5jb25zdCBzZXRPbW9XaWRnZXRTdHlsZSA9IChvbW9XaWRnZXRFbGVtZW50cywgc3R5bGUpID0+XG4gIGAke2FwcGVuZEJvZHlUb0Nzc1NlbGVjdG9yKG9tb1dpZGdldEVsZW1lbnRzKS5qb2luKFwiLFwiKX0gJHtzdHlsZX1gO1xuZXhwb3J0cy5zZXRPbW9XaWRnZXRTdHlsZSA9IHNldE9tb1dpZGdldFN0eWxlO1xuXG4vKiogQ1VTVE9NIEVMRU1FTlRTIFRPIFRXRUFLIENTUyBERUZJTkVEIEhFUkVcbiAqICggT1ZFUkZMT1cgRVRDKSAqL1xuLy8gdmFyIEVMRU1FTlRTX1RPX1RXRUFLX1NUWUxFO1xuXG5jb25zdCBCT0RZX1NUWUxFX1RXRUFLUyA9IChib2R5LCBlbGVtZW50c1RvVHdlYWspID0+IHtcbiAgdmFyIGFyciA9IFtdO1xuICBlbGVtZW50c1RvVHdlYWsuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICBhcnIucHVzaChgYm9keS4ke2JvZHl9ICR7ZWxlbWVudC5lbGVtZW50fSB7JHtlbGVtZW50LnN0eWxlfX1gKTtcbiAgfSk7XG4gIHJldHVybiBhcnI7XG59O1xuXG5jb25zdCBUV0VBSyA9ICgpID0+XG4gIEJPRFlfU1RZTEVfVFdFQUtTKE9NT0xBQl9CT0RZX0NMQVNTLCB0aGlzLkVMRU1FTlRTX1RPX1RXRUFLX1NUWUxFKVxuICAgIC5qb2luKFwiLFwiKVxuICAgIC5yZXBsYWNlKFwiLFwiLCBcIlxcblwiKTtcbmV4cG9ydHMuVFdFQUsgPSBUV0VBSztcblxuLyoqIFNFVCBCT0RZIFNUWUxFICovXG52YXIgQk9EWV9TVFlMRTtcbmV4cG9ydHMuQk9EWV9TVFlMRSA9IEJPRFlfU1RZTEU7XG5cbmNvbnN0IGdldEZvbnROYW1lID0gcHJvcCA9PlxuICBgT21vVHlwZSR7Q1VSUkVOVF9DT05GSUdbcHJvcF0uZm9udFZlcnNpb259LSR7Q1VSUkVOVF9DT05GSUdbcHJvcF0uZm9udFdlaWdodH0ke0NVUlJFTlRfQ09ORklHW3Byb3BdLmxldHRlclNwYWNpbmd9YDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG5mdW5jdGlvbiBhcHBseUZvbnRGYW1pbHkoZm9udE5hbWUsIGVsZW1lbnRQcm9wKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgY29uc3QgZm9udExvYWRlZCA9IGRvY3VtZW50LmZvbnRzLmNoZWNrKGAxMnB4ICR7Zm9udE5hbWV9YCk7XG4gIGlmICghZm9udExvYWRlZCkge1xuICAgIGxldCB1cmwgPSBjaHJvbWUucnVudGltZS5nZXRVUkwoYGZvbnRzL3dvZmYvJHtmb250TmFtZX0ud29mZmApO1xuICAgIGxldCBkTWVkaXVtRm91ciA9IG5ldyBGb250RmFjZShmb250TmFtZSwgYHVybCgke3VybH0pYCk7XG4gICAgZE1lZGl1bUZvdXJcbiAgICAgIC5sb2FkKClcbiAgICAgIC50aGVuKGxvYWRlZEZvbnQgPT4gZG9jdW1lbnQuZm9udHMuYWRkKGxvYWRlZEZvbnQpKVxuICAgICAgLmNhdGNoKCgpID0+IHt9KTtcbiAgfVxuICBFTEVNRU5UU1tlbGVtZW50UHJvcF0uZm9udE5hbWUoKS5zdHlsZS5mb250RmFtaWx5ID0gZm9udE5hbWU7XG59XG5cbi8qKiBTRVQgT01PIFNUWUxFIE9OIFNFTEVDVEVEICBCT0RZIEVMRU1FTlRTICovXG5jb25zdCBzZXRCb2R5VGV4dFN0eWxlID0gKFxuICBib2R5RWxlbWVudHMsXG4gIGJvZHlGb250RmFtaWx5LFxuICBib2R5Rm9udFdlaWdodCxcbiAgYm9keUZvbnRTaXplLFxuICBib2R5Rm9udFNwYWNpbmcsXG4gIGJvZHlMaW5lSGVpZ2h0LFxuICBiZ0NvbG9yXG4pID0+IHtcbiAgY29uc3QgYm9keVRleHRTdHlsZSA9IGJvZHlGb250RmFtaWx5XG4gICAgPyBgJHthcHBlbmRCb2R5VG9Dc3NTZWxlY3Rvcihib2R5RWxlbWVudHMpLmpvaW4oXCIsXCIpfXsgXG4gICAgZm9udC1mYW1pbHk6JHtib2R5Rm9udEZhbWlseX0gIWltcG9ydGFudDsgXG4gICAgZm9udC1zaXplOiR7XG4gICAgICBib2R5Rm9udFNpemVcbiAgICAgICAgPyBhZGRQaXhlbHNUb051bWJlcihib2R5Rm9udFNpemUpXG4gICAgICAgIDogYWRkUGl4ZWxzVG9OdW1iZXIodGhpcy5CT0RZX0ZPTlRfU0laRSlcbiAgICB9ICFpbXBvcnRhbnQ7IFxuICAgIGZvbnQtd2VpZ2h0OiR7Ym9keUZvbnRXZWlnaHR9ICFpbXBvcnRhbnQ7XG4gICAgbGV0dGVyLXNwYWNpbmc6JHtcbiAgICAgIGJvZHlGb250U3BhY2luZ1xuICAgICAgICA/IGFkZFBpeGVsc1RvTnVtYmVyKGJvZHlGb250U3BhY2luZylcbiAgICAgICAgOiBhZGRQaXhlbHNUb051bWJlcih0aGlzLkJPRFlfRk9OVF9TUEFDSU5HKVxuICAgIH0gIWltcG9ydGFudDsgXG4gICAgbGluZS1oZWlnaHQ6JHtcbiAgICAgIGJvZHlMaW5lSGVpZ2h0ID8gYm9keUxpbmVIZWlnaHQgOiB0aGlzLkJPRFlfTElORV9IRUlHSFRcbiAgICB9ICFpbXBvcnRhbnQ7IFxuICAgICR7aW52ZXJzZUZvbnRGYWNlQ29sb3IoYmdDb2xvcil9fVxcbmBcbiAgICA6IFwiXCI7XG4gIHJldHVybiBib2R5VGV4dFN0eWxlO1xufTtcbmV4cG9ydHMuc2V0Qm9keVRleHRTdHlsZSA9IHNldEJvZHlUZXh0U3R5bGU7XG5cbi8qKiBTRVQgQkFDS0dST1VORCBDT0xPUlxuICpcbiAqIERFRklORSBFTEVNRU5UUyBGT1IgQkFDS0dST1VORCBDSEFOR0UgQ09MTE9SIEhFUkVcbiAqL1xudmFyIEJBQ0tHUk9VTkRfQ09MT1JfRUxFTUVOVFM7XG5leHBvcnRzLkJBQ0tHUk9VTkRfQ09MT1JfRUxFTUVOVFMgPSBCQUNLR1JPVU5EX0NPTE9SX0VMRU1FTlRTO1xuXG5jb25zdCBzZXRCYWNrR3JvdW5kQ29sb3IgPSAoYXBwbHlUb0VsZW1lbnRzLCBiZ0NvbG9yKSA9PiB7XG4gIHJldHVybiBiZ0NvbG9yXG4gICAgPyBgJHthcHBlbmRCb2R5VG9Dc3NTZWxlY3RvcihhcHBseVRvRWxlbWVudHMpLmpvaW4oXG4gICAgICAgIFwiLFwiXG4gICAgICApfSB7IGJhY2tncm91bmQtY29sb3I6ICR7YmdDb2xvcn0gIWltcG9ydGFudDsgJHtpbnZlcnNlRm9udEZhY2VDb2xvcihcbiAgICAgICAgYmdDb2xvclxuICAgICAgKX19XFxuYFxuICAgIDogXCJcIjtcbn07XG5leHBvcnRzLnNldEJhY2tHcm91bmRDb2xvciA9IHNldEJhY2tHcm91bmRDb2xvcjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHZhcnMtb24tdG9wXG4vLyB2YXIgZmV0Y2ggPSByZXF1aXJlKFwibm9kZS1mZXRjaFwiKTtcbnZhciBFUzZQcm9taXNlID0gcmVxdWlyZShcImVzNi1wcm9taXNlXCIpO1xuRVM2UHJvbWlzZS5wb2x5ZmlsbCgpO1xudmFyIGF4aW9zID0gcmVxdWlyZShcImF4aW9zXCIpO1xuXG5jb25zdCByZWFkQ29uZmlndXJhdGlvbkZyb21GaWxlID0gY29uZiA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgYXhpb3NcbiAgICAgIC5nZXQoY29uZilcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdGV4dCA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIHRoaXMuQk9EWV9GT05UX0ZBTUlMWSA9IHRleHQuQk9EWV9GT05UX0ZBTUlMWSB8fCBcIlJvYm90b1wiO1xuICAgICAgICB0aGlzLkhFQURFUl9GT05UX0ZBTUlMWSA9IHRleHQuSEVBREVSX0ZPTlRfRkFNSUxZIHx8IFwiUm9ib3RvXCI7XG5cbiAgICAgICAgdGhpcy5IRUFERVJfU1RZTEVfRUxFTUVOVFMgPSB0ZXh0LkhFQURFUl9TVFlMRV9FTEVNRU5UUztcbiAgICAgICAgdGhpcy5DVVNUT01fSEVBREVSX1NUWUxFX0VMRU1FTlRTID0gdGV4dC5DVVNUT01fSEVBREVSX1NUWUxFX0VMRU1FTlRTO1xuICAgICAgICB0aGlzLk9NT19XSURHRVRfRUxFTUVOVFMgPSB0ZXh0Lk9NT19XSURHRVRfRUxFTUVOVFM7XG4gICAgICAgIHRoaXMuRUxFTUVOVFNfVE9fVFdFQUtfU1RZTEUgPSB0ZXh0LkVMRU1FTlRTX1RPX1RXRUFLX1NUWUxFO1xuICAgICAgICB0aGlzLkJPRFlfU1RZTEUgPSB0ZXh0LkJPRFlfU1RZTEU7XG4gICAgICAgIHRoaXMuQkFDS0dST1VORF9DT0xPUl9FTEVNRU5UUyA9IHRleHQuQkFDS0dST1VORF9DT0xPUl9FTEVNRU5UUztcblxuICAgICAgICB0aGlzLkhFQURFUl9MSU5FX0hFSUdIVCA9IHRleHQuSEVBREVSX0xJTkVfSEVJR0hUIHx8IDA7XG4gICAgICAgIHRoaXMuSEVBREVSX0ZPTlRfU1BBQ0lORyA9IHRleHQuSEVBREVSX0ZPTlRfU1BBQ0lORyB8fCAyMDtcbiAgICAgICAgdGhpcy5IRUFERVJfRk9OVF9TSVpFID0gdGV4dC5IRUFERVJfRk9OVF9TSVpFIHx8IDIwO1xuICAgICAgICB0aGlzLkJPRFlfTElORV9IRUlHSFQgPSB0ZXh0LkJPRFlfTElORV9IRUlHSFQgfHwgMDtcbiAgICAgICAgdGhpcy5CT0RZX0xJTkVfSEVJR0hUX01BWCA9IHRleHQuQk9EWV9MSU5FX0hFSUdIVF9NQVggfHwgNDA7XG4gICAgICAgIHRoaXMuQk9EWV9GT05UX1NQQUNJTkcgPSB0ZXh0LkJPRFlfRk9OVF9TUEFDSU5HIHx8IDA7XG4gICAgICAgIHRoaXMuQk9EWV9GT05UX1NJWkUgPSB0ZXh0LkJPRFlfRk9OVF9TSVpFIHx8IDEzO1xuICAgICAgICB0aGlzLkJPRFlfRk9OVF9TSVpFX01BWCA9IHRleHQuQk9EWV9GT05UX1NJWkVfTUFYIHx8IDMwO1xuICAgICAgICB0aGlzLkJPRFlfRk9OVF9XRUlHSFQgPSB0ZXh0LkJPRFlfRk9OVF9XRUlHSFQgfHwgXCJub3JtYWxcIjtcbiAgICAgICAgdGhpcy5ERUZBVUxUX0JBQ0tHUk9VTkQgPSB0ZXh0LkRFRkFVTFRfQkFDS0dST1VORCB8fCBcInRyYW5zcGFyZW50XCI7XG4gICAgICAgIC8qKm11c3QgaGF2ZSBlbGVtZW50cyBmb3Igd2lkZ2V0IHRvIHdvcmtcbiAgICAgICAgICogZGVmYXVsdCBib2R5IGFuZCBoZWFkZXIgU0hPVUxEIEFMU08gQkUgREVGSU5FRCBJTiBDT05GIEZJTEUsIGlmIG5vdFxuICAgICAgICAgKiBzb21lIGFwcm94aW1hdG9uIHZhbHVlcyBhcmUgZ2l2ZW4gYWJvdmUgaS5lXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoXG4gICAgICAgICAgW1xuICAgICAgICAgICAgdGhpcy5IRUFERVJfU1RZTEVfRUxFTUVOVFMsXG4gICAgICAgICAgICB0aGlzLkJPRFlfU1RZTEUsXG4gICAgICAgICAgICB0aGlzLkJBQ0tHUk9VTkRfQ09MT1JfRUxFTUVOVFMsXG4gICAgICAgICAgICB0aGlzLk9NT19XSURHRVRfRUxFTUVOVFMsXG4gICAgICAgICAgICB0aGlzLkNVU1RPTV9IRUFERVJfU1RZTEVfRUxFTUVOVFNcbiAgICAgICAgICBdLmluY2x1ZGVzKHVuZGVmaW5lZClcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgICBgSEVBREVSX1NUWUxFX0VMRU1FTlRTLENVU1RPTV9IRUFERVJfU1RZTEVfRUxFTUVOVFMsIE9NT19XSURHRVRfRUxFTUVOVFMsQk9EWV9TVFlMRSwgQkFDS0dST1VORF9DT0xPUl9FTEVNRU5UUyBhcmUgbWFuZGF0b3J5ISEhYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShcIkZJTklTSEVEIExPQURJTkcgU1RZTEVTSEVFVFwiKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgcmVqZWN0KGAke2Vycn0gaW4gZmlsZSAke2NvbmZ9YCk7XG4gICAgICB9KTtcbiAgICAvLyAudGhlbih0ZXh0ID0+IHtcbiAgICAvLyB0aGlzLkJPRFlfRk9OVF9GQU1JTFkgPSB0ZXh0LkJPRFlfRk9OVF9GQU1JTFkgfHwgXCJSb2JvdG9cIjtcbiAgICAvLyB0aGlzLkhFQURFUl9GT05UX0ZBTUlMWSA9IHRleHQuSEVBREVSX0ZPTlRfRkFNSUxZIHx8IFwiUm9ib3RvXCI7XG5cbiAgICAvLyB0aGlzLkhFQURFUl9TVFlMRV9FTEVNRU5UUyA9IHRleHQuSEVBREVSX1NUWUxFX0VMRU1FTlRTO1xuICAgIC8vIHRoaXMuQ1VTVE9NX0hFQURFUl9TVFlMRV9FTEVNRU5UUyA9IHRleHQuQ1VTVE9NX0hFQURFUl9TVFlMRV9FTEVNRU5UUztcbiAgICAvLyB0aGlzLk9NT19XSURHRVRfRUxFTUVOVFMgPSB0ZXh0Lk9NT19XSURHRVRfRUxFTUVOVFM7XG4gICAgLy8gdGhpcy5FTEVNRU5UU19UT19UV0VBS19TVFlMRSA9IHRleHQuRUxFTUVOVFNfVE9fVFdFQUtfU1RZTEU7XG4gICAgLy8gdGhpcy5CT0RZX1NUWUxFID0gdGV4dC5CT0RZX1NUWUxFO1xuICAgIC8vIHRoaXMuQkFDS0dST1VORF9DT0xPUl9FTEVNRU5UUyA9IHRleHQuQkFDS0dST1VORF9DT0xPUl9FTEVNRU5UUztcblxuICAgIC8vIHRoaXMuSEVBREVSX0xJTkVfSEVJR0hUID0gdGV4dC5IRUFERVJfTElORV9IRUlHSFQgfHwgMDtcbiAgICAvLyB0aGlzLkhFQURFUl9GT05UX1NQQUNJTkcgPSB0ZXh0LkhFQURFUl9GT05UX1NQQUNJTkcgfHwgMjA7XG4gICAgLy8gdGhpcy5IRUFERVJfRk9OVF9TSVpFID0gdGV4dC5IRUFERVJfRk9OVF9TSVpFIHx8IDIwO1xuICAgIC8vIHRoaXMuQk9EWV9MSU5FX0hFSUdIVCA9IHRleHQuQk9EWV9MSU5FX0hFSUdIVCB8fCAwO1xuICAgIC8vIHRoaXMuQk9EWV9MSU5FX0hFSUdIVF9NQVggPSB0ZXh0LkJPRFlfTElORV9IRUlHSFRfTUFYIHx8IDQwO1xuICAgIC8vIHRoaXMuQk9EWV9GT05UX1NQQUNJTkcgPSB0ZXh0LkJPRFlfRk9OVF9TUEFDSU5HIHx8IDA7XG4gICAgLy8gdGhpcy5CT0RZX0ZPTlRfU0laRSA9IHRleHQuQk9EWV9GT05UX1NJWkUgfHwgMTM7XG4gICAgLy8gdGhpcy5CT0RZX0ZPTlRfU0laRV9NQVggPSB0ZXh0LkJPRFlfRk9OVF9TSVpFX01BWCB8fCAzMDtcbiAgICAvLyB0aGlzLkJPRFlfRk9OVF9XRUlHSFQgPSB0ZXh0LkJPRFlfRk9OVF9XRUlHSFQgfHwgXCJub3JtYWxcIjtcbiAgICAvLyB0aGlzLkRFRkFVTFRfQkFDS0dST1VORCA9IHRleHQuREVGQVVMVF9CQUNLR1JPVU5EIHx8IFwidHJhbnNwYXJlbnRcIjtcbiAgICAvLyAvKiptdXN0IGhhdmUgZWxlbWVudHMgZm9yIHdpZGdldCB0byB3b3JrXG4gICAgLy8gICogZGVmYXVsdCBib2R5IGFuZCBoZWFkZXIgU0hPVUxEIEFMU08gQkUgREVGSU5FRCBJTiBDT05GIEZJTEUsIGlmIG5vdFxuICAgIC8vICAqIHNvbWUgYXByb3hpbWF0b24gdmFsdWVzIGFyZSBnaXZlbiBhYm92ZSBpLmVcbiAgICAvLyAgKlxuICAgIC8vICAqL1xuICAgIC8vIGlmIChcbiAgICAvLyAgIFtcbiAgICAvLyAgICAgdGhpcy5IRUFERVJfU1RZTEVfRUxFTUVOVFMsXG4gICAgLy8gICAgIHRoaXMuQk9EWV9TVFlMRSxcbiAgICAvLyAgICAgdGhpcy5CQUNLR1JPVU5EX0NPTE9SX0VMRU1FTlRTLFxuICAgIC8vICAgICB0aGlzLk9NT19XSURHRVRfRUxFTUVOVFMsXG4gICAgLy8gICAgIHRoaXMuQ1VTVE9NX0hFQURFUl9TVFlMRV9FTEVNRU5UU1xuICAgIC8vICAgXS5pbmNsdWRlcyh1bmRlZmluZWQpXG4gICAgLy8gKSB7XG4gICAgLy8gICB0aHJvdyBFcnJvcihcbiAgICAvLyAgICAgYEhFQURFUl9TVFlMRV9FTEVNRU5UUyxDVVNUT01fSEVBREVSX1NUWUxFX0VMRU1FTlRTLCBPTU9fV0lER0VUX0VMRU1FTlRTLEJPRFlfU1RZTEUsIEJBQ0tHUk9VTkRfQ09MT1JfRUxFTUVOVFMgYXJlIG1hbmRhdG9yeSEhIWBcbiAgICAvLyAgICk7XG4gICAgLy8gfVxuICAgIC8vIHJlc29sdmUoXCJGSU5JU0hFRCBMT0FESU5HIFNUWUxFU0hFRVRcIik7XG4gICAgLy8gfSlcbiAgICAvLyAuY2F0Y2goZXJyID0+IHtcbiAgICAvLyAgIHJlamVjdChgJHtlcnJ9IGluIGZpbGUgJHtjb25mfWApO1xuICAgIC8vIH0pO1xuICB9KTtcbn07XG5leHBvcnRzLnJlYWRDb25maWd1cmF0aW9uRnJvbUZpbGUgPSByZWFkQ29uZmlndXJhdGlvbkZyb21GaWxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gZXF1YWwgdG8gbWVyZ2Ugd2l0aCB0aGUgZGlmZmVyZW5jZSBiZWluZyB0aGF0IG5vIHJlZmVyZW5jZVxuICogdG8gb3JpZ2luYWwgb2JqZWN0cyBpcyBrZXB0LlxuICpcbiAqIEBzZWUgbWVyZ2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGRlZXBNZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBkZWVwTWVyZ2U6IGRlZXBNZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCc7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKHRpbWVvdXRFcnJvck1lc3NhZ2UsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHZhciB2YWx1ZUZyb21Db25maWcyS2V5cyA9IFsndXJsJywgJ21ldGhvZCcsICdwYXJhbXMnLCAnZGF0YSddO1xuICB2YXIgbWVyZ2VEZWVwUHJvcGVydGllc0tleXMgPSBbJ2hlYWRlcnMnLCAnYXV0aCcsICdwcm94eSddO1xuICB2YXIgZGVmYXVsdFRvQ29uZmlnMktleXMgPSBbXG4gICAgJ2Jhc2VVUkwnLCAndXJsJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJywgJ3ZhbGlkYXRlU3RhdHVzJywgJ21heFJlZGlyZWN0cycsICdodHRwQWdlbnQnLFxuICAgICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJywgJ3NvY2tldFBhdGgnXG4gIF07XG5cbiAgdXRpbHMuZm9yRWFjaCh2YWx1ZUZyb21Db25maWcyS2V5cywgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gobWVyZ2VEZWVwUHJvcGVydGllc0tleXMsIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICh1dGlscy5pc09iamVjdChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goZGVmYXVsdFRvQ29uZmlnMktleXMsIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB2YXIgYXhpb3NLZXlzID0gdmFsdWVGcm9tQ29uZmlnMktleXNcbiAgICAuY29uY2F0KG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzKVxuICAgIC5jb25jYXQoZGVmYXVsdFRvQ29uZmlnMktleXMpO1xuXG4gIHZhciBvdGhlcktleXMgPSBPYmplY3RcbiAgICAua2V5cyhjb25maWcyKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gZmlsdGVyQXhpb3NLZXlzKGtleSkge1xuICAgICAgcmV0dXJuIGF4aW9zS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xuICAgIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gob3RoZXJLZXlzLCBmdW5jdGlvbiBvdGhlcktleXNEZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8IURPQ1RZUEUgaHRtbD5cXG48aHRtbCBsYW5nPVxcXCJlblxcXCI+XFxuXFxuPGhlYWQ+XFxuICA8bWV0YSBjaGFyc2V0PVxcXCJVVEYtOFxcXCIgLz5cXG4gIDxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXFxcIiAvPlxcbiAgPG1ldGEgaHR0cC1lcXVpdj1cXFwiWC1VQS1Db21wYXRpYmxlXFxcIiBjb250ZW50PVxcXCJpZT1lZGdlXFxcIiAvPlxcbiAgPHRpdGxlPk9tbzwvdGl0bGU+XFxuICA8IS0tIDxsaW5rIHJlbD1cXFwic3R5bGVzaGVldFxcXCIgaHJlZj1cXFwiL3RvdGVtV2lkZ2V0LmNzc1xcXCIgLz4gLS0+XFxuPC9oZWFkPlxcblxcbjxib2R5PlxcbiAgPGRpdiBpZD1cXFwib21vLXdpZGdldFxcXCIgY2xhc3M9XFxcIm9tby13aWRnZXRcXFwiPlxcbiAgICA8aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIG5hbWU9XFxcIm1haW4tdG9nZ2xlXFxcIiBjbGFzcz1cXFwib21vLXdpZGdldF9fbWFpbi10b2dnbGVcXFwiIHRpdGxlPVxcXCJPcGVuIG9wdGlvbnNcXFwiIC8+XFxuICAgIDxmaWVsZHNldCBkYXRhLXNldHRpbmctbmFtZT1cXFwiZm9udC1zaXplXFxcIj5cXG4gICAgICA8bGVnZW5kPkZvbnQgc2l6ZTwvbGVnZW5kPlxcbiAgICAgIDxpbnB1dCB0eXBlPVxcXCJyYWRpb1xcXCIgY2xhc3M9XFxcIm9tby13aWRnZXRfX3RvZ2dsZS1vcHRpb25zXFxcIiBhcmlhLXNlbGVjdGVkPVxcXCJmYWxzZVxcXCIgbmFtZT1cXFwib3B0aW9uLW9wZW5lZFxcXCIgdmFsdWU9XFxcIjFcXFwiXFxuICAgICAgICB0aXRsZT1cXFwiRm9udCBTaXplXFxcIiAvPlxcbiAgICAgIDwhLS0gPHN2ZyB3aWR0aD1cXFwiMzJcXFwiIGhlaWdodD1cXFwiMjdcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+XFxuICAgICAgICAgIDxnIGlkPVxcXCJmb250LXNpemVcXFwiIGZpbGw9XFxcInZhcigtLXN2Z0ZpbGwpXFxcIiBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoXFxuICAgICAgICAgICAgICBkPVxcXCJNMS42MzkgOC44NjhoMTMuOTQzYy4xOTcgMCAuMzc1LjA3OC41MzcuMjI3YS43NC43NCAwIDAxLjI0LjU1YzAgLjI1LS4wODEuNDU0LS4yNC42MTRhLjc0Ljc0IDAgMDEtLjUzNy4yNDNIOS41MDh2MTQuNzQ0YS45MDYuOTA2IDAgMDEtLjI2Ny42MzEuODU1Ljg1NSAwIDAxLS42NDMuMjhjLS4yODQgMC0uNTE4LS4wOTItLjY5NS0uMjhhLjg5Mi44OTIgMCAwMS0uMjctLjYzVjEwLjUwMUgxLjYzOWEuNzY0Ljc2NCAwIDAxLS41NzQtLjIyOS43NzMuNzczIDAgMDEtLjIzLS41NzRjMC0uMjMyLjA3Ny0uNDMuMjMtLjU4OGEuNzUuNzUgMCAwMS41NzQtLjI0M1xcXCJcXG4gICAgICAgICAgICAvPlxcbiAgICAgICAgICAgIDxwYXRoXFxuICAgICAgICAgICAgICBkPVxcXCJNOS42NjEuMjI0aDIwLjkxNGMuMjk1IDAgLjU2Mi4xMTMuODAyLjM0Mi4yNDIuMjI3LjM2My41MDEuMzYzLjgyMiAwIC4zNzYtLjEyLjY4My0uMzYzLjkyMy0uMjQuMjQyLS41MDcuMzYtLjgwMi4zNmgtOS4xMTR2MjIuMTIzYzAgLjM0Ny0uMTMzLjY2LS40Ljk0YTEuMjc3IDEuMjc3IDAgMDEtLjk2NC40MjJjLS40MjcgMC0uNzc3LS4xNC0xLjA0Mi0uNDIyLS4yNjktLjI4LS40MDQtLjU5My0uNDA0LS45NFYyLjY3aC04Ljk5Yy0uMzQ5IDAtLjYzOC0uMTEtLjg2NC0uMzM3YTEuMTgyIDEuMTgyIDAgMDEtLjM0LS44NjVjMC0uMzQ3LjExNC0uNjQzLjM0LS44ODIuMjI2LS4yNDMuNTE1LS4zNjIuODY0LS4zNjJcXFwiXFxuICAgICAgICAgICAgLz5cXG4gICAgICAgICAgPC9nPlxcbiAgICAgICAgPC9zdmc+IC0tPlxcblxcbiAgICAgIDxzdmcgdmlld0JveD1cXFwiMCAwIDMyIDI3XFxcIj5cXG4gICAgICAgIDxnIGlkPVxcXCJmb250LXNpemVcXFwiIGZpbGw9XFxcInZhcigtLXN2Z0ZpbGwpXFxcIiBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiPlxcbiAgICAgICAgICA8cGF0aFxcbiAgICAgICAgICAgIGQ9XFxcIk0xLjYzOSA4Ljg2OGgxMy45NDNjLjE5NyAwIC4zNzUuMDc4LjUzNy4yMjdhLjc0Ljc0IDAgMDEuMjQuNTVjMCAuMjUtLjA4MS40NTQtLjI0LjYxNGEuNzQuNzQgMCAwMS0uNTM3LjI0M0g5LjUwOHYxNC43NDRhLjkwNi45MDYgMCAwMS0uMjY3LjYzMS44NTUuODU1IDAgMDEtLjY0My4yOGMtLjI4NCAwLS41MTgtLjA5Mi0uNjk1LS4yOGEuODkyLjg5MiAwIDAxLS4yNy0uNjNWMTAuNTAxSDEuNjM5YS43NjQuNzY0IDAgMDEtLjU3NC0uMjI5Ljc3My43NzMgMCAwMS0uMjMtLjU3NGMwLS4yMzIuMDc3LS40My4yMy0uNTg4YS43NS43NSAwIDAxLjU3NC0uMjQzXFxcIiAvPlxcbiAgICAgICAgICA8cGF0aFxcbiAgICAgICAgICAgIGQ9XFxcIk05LjY2MS4yMjRoMjAuOTE0Yy4yOTUgMCAuNTYyLjExMy44MDIuMzQyLjI0Mi4yMjcuMzYzLjUwMS4zNjMuODIyIDAgLjM3Ni0uMTIuNjgzLS4zNjMuOTIzLS4yNC4yNDItLjUwNy4zNi0uODAyLjM2aC05LjExNHYyMi4xMjNjMCAuMzQ3LS4xMzMuNjYtLjQuOTRhMS4yNzcgMS4yNzcgMCAwMS0uOTY0LjQyMmMtLjQyNyAwLS43NzctLjE0LTEuMDQyLS40MjItLjI2OS0uMjgtLjQwNC0uNTkzLS40MDQtLjk0VjIuNjdoLTguOTljLS4zNDkgMC0uNjM4LS4xMS0uODY0LS4zMzdhMS4xODIgMS4xODIgMCAwMS0uMzQtLjg2NWMwLS4zNDcuMTE0LS42NDMuMzQtLjg4Mi4yMjYtLjI0My41MTUtLjM2Mi44NjQtLjM2MlxcXCIgLz5cXG4gICAgICAgIDwvZz5cXG4gICAgICA8L3N2Zz5cXG4gICAgICA8Zm9ybSBhY3Rpb249XFxcIiNcXFwiPlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJyZXNldFxcXCIgY2xhc3M9XFxcIm9tby13aWRnZXRfX3Jlc2V0XFxcIj5cXG4gICAgICAgICAgPCEtLSA8c3ZnIHdpZHRoPVxcXCIyM1xcXCIgaGVpZ2h0PVxcXCIyNVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj5cXG4gICAgICAgICAgICAgIDxwYXRoXFxuICAgICAgICAgICAgICAgIGlkPVxcXCJyZXNldFxcXCJcXG4gICAgICAgICAgICAgICAgZmlsbD1cXFwidmFyKC0tc3ZnRmlsbClcXFwiXFxuICAgICAgICAgICAgICAgIGQ9XFxcIk02IDNDNS4zIDIuMyA0LjYgMS41IDMuNy42Yy0uMiAyLjUtLjQgNC45LS43IDcuMyAyLjYuMSA1IC4yIDcuNy4yLS45LTEtMS43LTEuOC0yLjUtMi43IDIuNi0xLjQgNi41LS43IDguOSAxLjYgMi43IDIuNSAzLjQgNi41IDEuOSA5LjctMS42IDMuMi01LjIgNS4xLTguNyA0LjYtMy4xLS41LTYuOC0zLjEtNy4xLTguMmgtM2MtLjMgMy41IDIuMSA4LjIgNi40IDEwLjIgNC42IDIuMiAxMC4zIDEgMTMuNi0yLjggMy40LTQuMSAzLjctOS43LjYtMTRDMTguMyAyLjggMTIuNS0uMiA2IDN6XFxcIlxcbiAgICAgICAgICAgICAgICBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiXFxuICAgICAgICAgICAgICAvPlxcbiAgICAgICAgICAgIDwvc3ZnPiAtLT5cXG4gICAgICAgICAgPHN2ZyB2aWV3Qm94PVxcXCIwIDAgMjUgMjVcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGlkPVxcXCJyZXNldFxcXCIgZmlsbD1cXFwidmFyKC0tc3ZnRmlsbClcXFwiXFxuICAgICAgICAgICAgICBkPVxcXCJNNiAzQzUuMyAyLjMgNC42IDEuNSAzLjcuNmMtLjIgMi41LS40IDQuOS0uNyA3LjMgMi42LjEgNSAuMiA3LjcuMi0uOS0xLTEuNy0xLjgtMi41LTIuNyAyLjYtMS40IDYuNS0uNyA4LjkgMS42IDIuNyAyLjUgMy40IDYuNSAxLjkgOS43LTEuNiAzLjItNS4yIDUuMS04LjcgNC42LTMuMS0uNS02LjgtMy4xLTcuMS04LjJoLTNjLS4zIDMuNSAyLjEgOC4yIDYuNCAxMC4yIDQuNiAyLjIgMTAuMyAxIDEzLjYtMi44IDMuNC00LjEgMy43LTkuNy42LTE0QzE4LjMgMi44IDEyLjUtLjIgNiAzelxcXCJcXG4gICAgICAgICAgICAgIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCIgLz5cXG4gICAgICAgICAgPC9zdmc+XFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiIGNsYXNzPVxcXCJvbW8td2lkZ2V0X19hZGRcXFwiPis8L2J1dHRvbj5cXG4gICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiIGNsYXNzPVxcXCJvbW8td2lkZ2V0X19zdWJzdHJhY3RcXFwiPlxcbiAgICAgICAgICAtXFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgIDxpbnB1dCBpZD1cXFwidG90ZW1fYnNpemVcXFwiIHR5cGU9XFxcIm51bWJlclxcXCIgY2xhc3M9XFxcIm9tby13aWRnZXRfX29wdGlvbi12YWx1ZVxcXCIgdmFsdWU9XFxcIjBcXFwiIG1pbj1cXFwiMVxcXCIgbWF4PVxcXCIzMFxcXCJcXG4gICAgICAgICAgbmFtZT1cXFwidG90ZW1fYnNpemVcXFwiIHJlcXVpcmVkIC8+XFxuICAgICAgPC9mb3JtPlxcbiAgICA8L2ZpZWxkc2V0PlxcbiAgICA8ZmllbGRzZXQgZGF0YS1zZXR0aW5nLW5hbWU9XFxcImZvbnQtdHlwZVxcXCI+XFxuICAgICAgPGxlZ2VuZD5Gb250IHR5cGU8L2xlZ2VuZD5cXG4gICAgICA8aW5wdXQgdHlwZT1cXFwicmFkaW9cXFwiIGNsYXNzPVxcXCJvbW8td2lkZ2V0X190b2dnbGUtb3B0aW9uc1xcXCIgYXJpYS1zZWxlY3RlZD1cXFwiZmFsc2VcXFwiIG5hbWU9XFxcIm9wdGlvbi1vcGVuZWRcXFwiIHZhbHVlPVxcXCIyXFxcIlxcbiAgICAgICAgdGl0bGU9XFxcIkZvbnQgVHlwZVxcXCIgLz5cXG4gICAgICA8c3ZnIHZpZXdCb3g9XFxcIjAgMCAyNyAzMlxcXCI+XFxuICAgICAgICA8ZyBmaWxsPVxcXCJub25lXFxcIiBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiPlxcbiAgICAgICAgICA8cGF0aFxcbiAgICAgICAgICAgIGQ9XFxcIk0yMy45ODEgMTUuODMyYzAtNS43MTMtMy4wMy0xMC45ODQtOS45MTItMTAuOTg0LTYuODUgMC0xMC4wNCA1LjQzLTEwLjA0IDEwLjk4NCAwIDUuODQyIDMuNjYzIDExLjAyIDEwLjEwNCAxMS4wMiA2LjIxOCAwIDkuODQ4LTUuMTc4IDkuODQ4LTExLjAybTIuOTM3LS4wNjJjMCA3LjU0NS01LjAyIDEzLjU3NS0xMi44MTggMTMuNTc1LTcuODI4IDAtMTIuOTc0LTYuMDYyLTEyLjk3NC0xMy41NzUgMC02LjQ0IDQuMzI0LTEzLjQxNyAxMy4wMDctMTMuNDE3IDguODM4IDAgMTIuNzg1IDYuODUgMTIuNzg1IDEzLjQxN1xcXCJcXG4gICAgICAgICAgICBmaWxsPVxcXCJ2YXIoLS1zdmdGaWxsKVxcXCIgZmlsbC1ydWxlPVxcXCJub256ZXJvXFxcIiAvPlxcbiAgICAgICAgICA8cGF0aCBkPVxcXCJNMCAwaDI3djMySDB6XFxcIiAvPlxcbiAgICAgICAgPC9nPlxcbiAgICAgIDwvc3ZnPlxcbiAgICAgIDwhLS0gPHN2ZyBpZD1cXFwiT1xcXCIgd2lkdGg9XFxcIjI3XFxcIiBoZWlnaHQ9XFxcIjMyXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPlxcbiAgICAgICAgICA8ZyBmaWxsPVxcXCJub25lXFxcIiBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoXFxuICAgICAgICAgICAgICBkPVxcXCJNMjMuOTgxIDE1LjgzMmMwLTUuNzEzLTMuMDMtMTAuOTg0LTkuOTEyLTEwLjk4NC02Ljg1IDAtMTAuMDQgNS40My0xMC4wNCAxMC45ODQgMCA1Ljg0MiAzLjY2MyAxMS4wMiAxMC4xMDQgMTEuMDIgNi4yMTggMCA5Ljg0OC01LjE3OCA5Ljg0OC0xMS4wMm0yLjkzNy0uMDYyYzAgNy41NDUtNS4wMiAxMy41NzUtMTIuODE4IDEzLjU3NS03LjgyOCAwLTEyLjk3NC02LjA2Mi0xMi45NzQtMTMuNTc1IDAtNi40NCA0LjMyNC0xMy40MTcgMTMuMDA3LTEzLjQxNyA4LjgzOCAwIDEyLjc4NSA2Ljg1IDEyLjc4NSAxMy40MTdcXFwiXFxuICAgICAgICAgICAgICBmaWxsPVxcXCJ2YXIoLS1zdmdGaWxsKVxcXCJcXG4gICAgICAgICAgICAgIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCJcXG4gICAgICAgICAgICAvPlxcbiAgICAgICAgICAgIDxwYXRoIGQ9XFxcIk0wIDBoMjd2MzJIMHpcXFwiIC8+XFxuICAgICAgICAgIDwvZz5cXG4gICAgICAgIDwvc3ZnPiAtLT5cXG4gICAgICA8Zm9ybSBhY3Rpb249XFxcIiNcXFwiPlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJyZXNldFxcXCIgY2xhc3M9XFxcIm9tby13aWRnZXRfX3Jlc2V0XFxcIiBpZD1cXFwidG90ZW1fYm9keV9mZl9yZXNldFxcXCI+XFxuICAgICAgICAgIDwhLS0gPHN2ZyB3aWR0aD1cXFwiMjNcXFwiIGhlaWdodD1cXFwiMjVcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+XFxuICAgICAgICAgICAgICA8cGF0aFxcbiAgICAgICAgICAgICAgICBpZD1cXFwicmVzZXRcXFwiXFxuICAgICAgICAgICAgICAgIGZpbGw9XFxcInZhcigtLXN2Z0ZpbGwpXFxcIlxcbiAgICAgICAgICAgICAgICBkPVxcXCJNNiAzQzUuMyAyLjMgNC42IDEuNSAzLjcuNmMtLjIgMi41LS40IDQuOS0uNyA3LjMgMi42LjEgNSAuMiA3LjcuMi0uOS0xLTEuNy0xLjgtMi41LTIuNyAyLjYtMS40IDYuNS0uNyA4LjkgMS42IDIuNyAyLjUgMy40IDYuNSAxLjkgOS43LTEuNiAzLjItNS4yIDUuMS04LjcgNC42LTMuMS0uNS02LjgtMy4xLTcuMS04LjJoLTNjLS4zIDMuNSAyLjEgOC4yIDYuNCAxMC4yIDQuNiAyLjIgMTAuMyAxIDEzLjYtMi44IDMuNC00LjEgMy43LTkuNy42LTE0QzE4LjMgMi44IDEyLjUtLjIgNiAzelxcXCJcXG4gICAgICAgICAgICAgICAgZmlsbC1ydWxlPVxcXCJub256ZXJvXFxcIlxcbiAgICAgICAgICAgICAgLz5cXG4gICAgICAgICAgICA8L3N2Zz4gLS0+XFxuXFxuICAgICAgICAgIDxzdmcgdmlld0JveD1cXFwiMCAwIDI1IDI1XFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBpZD1cXFwicmVzZXRcXFwiIGZpbGw9XFxcInZhcigtLXN2Z0ZpbGwpXFxcIlxcbiAgICAgICAgICAgICAgZD1cXFwiTTYgM0M1LjMgMi4zIDQuNiAxLjUgMy43LjZjLS4yIDIuNS0uNCA0LjktLjcgNy4zIDIuNi4xIDUgLjIgNy43LjItLjktMS0xLjctMS44LTIuNS0yLjcgMi42LTEuNCA2LjUtLjcgOC45IDEuNiAyLjcgMi41IDMuNCA2LjUgMS45IDkuNy0xLjYgMy4yLTUuMiA1LjEtOC43IDQuNi0zLjEtLjUtNi44LTMuMS03LjEtOC4yaC0zYy0uMyAzLjUgMi4xIDguMiA2LjQgMTAuMiA0LjYgMi4yIDEwLjMgMSAxMy42LTIuOCAzLjQtNC4xIDMuNy05LjcuNi0xNEMxOC4zIDIuOCAxMi41LS4yIDYgM3pcXFwiXFxuICAgICAgICAgICAgICBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiIC8+XFxuICAgICAgICAgIDwvc3ZnPlxcbiAgICAgICAgPC9idXR0b24+XFxuICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIiBjbGFzcz1cXFwib21vLXdpZGdldF9fYWRkXFxcIj4rPC9idXR0b24+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJvbW8td2lkZ2V0X190eXBlLXByZXZpZXdcXFwiPlxcbiAgICAgICAgICA8c3ZnIHZpZXdCb3g9XFxcIjAgMCAyNyAzMlxcXCI+XFxuICAgICAgICAgICAgPGcgZmlsbD1cXFwibm9uZVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj5cXG4gICAgICAgICAgICAgIDxwYXRoXFxuICAgICAgICAgICAgICAgIGQ9XFxcIk0yMy45ODEgMTUuODMyYzAtNS43MTMtMy4wMy0xMC45ODQtOS45MTItMTAuOTg0LTYuODUgMC0xMC4wNCA1LjQzLTEwLjA0IDEwLjk4NCAwIDUuODQyIDMuNjYzIDExLjAyIDEwLjEwNCAxMS4wMiA2LjIxOCAwIDkuODQ4LTUuMTc4IDkuODQ4LTExLjAybTIuOTM3LS4wNjJjMCA3LjU0NS01LjAyIDEzLjU3NS0xMi44MTggMTMuNTc1LTcuODI4IDAtMTIuOTc0LTYuMDYyLTEyLjk3NC0xMy41NzUgMC02LjQ0IDQuMzI0LTEzLjQxNyAxMy4wMDctMTMuNDE3IDguODM4IDAgMTIuNzg1IDYuODUgMTIuNzg1IDEzLjQxN1xcXCJcXG4gICAgICAgICAgICAgICAgZmlsbD1cXFwidmFyKC0tc3ZnRmlsbClcXFwiIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCIgLz5cXG4gICAgICAgICAgICAgIDxwYXRoIGQ9XFxcIk0wIDBoMjd2MzJIMHpcXFwiIC8+XFxuICAgICAgICAgICAgPC9nPlxcbiAgICAgICAgICA8L3N2Zz5cXG5cXG4gICAgICAgICAgPCEtLSA8c3ZnXFxuICAgICAgICAgICAgICBpZD1cXFwiT1xcXCJcXG4gICAgICAgICAgICAgIHdpZHRoPVxcXCIyN1xcXCJcXG4gICAgICAgICAgICAgIGhlaWdodD1cXFwiMzJcXFwiXFxuICAgICAgICAgICAgICB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiXFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgPGcgZmlsbD1cXFwibm9uZVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj5cXG4gICAgICAgICAgICAgICAgPHBhdGhcXG4gICAgICAgICAgICAgICAgICBkPVxcXCJNMjMuOTgxIDE1LjgzMmMwLTUuNzEzLTMuMDMtMTAuOTg0LTkuOTEyLTEwLjk4NC02Ljg1IDAtMTAuMDQgNS40My0xMC4wNCAxMC45ODQgMCA1Ljg0MiAzLjY2MyAxMS4wMiAxMC4xMDQgMTEuMDIgNi4yMTggMCA5Ljg0OC01LjE3OCA5Ljg0OC0xMS4wMm0yLjkzNy0uMDYyYzAgNy41NDUtNS4wMiAxMy41NzUtMTIuODE4IDEzLjU3NS03LjgyOCAwLTEyLjk3NC02LjA2Mi0xMi45NzQtMTMuNTc1IDAtNi40NCA0LjMyNC0xMy40MTcgMTMuMDA3LTEzLjQxNyA4LjgzOCAwIDEyLjc4NSA2Ljg1IDEyLjc4NSAxMy40MTdcXFwiXFxuICAgICAgICAgICAgICAgICAgZmlsbD1cXFwidmFyKC0tc3ZnRmlsbClcXFwiXFxuICAgICAgICAgICAgICAgICAgZmlsbC1ydWxlPVxcXCJub256ZXJvXFxcIlxcbiAgICAgICAgICAgICAgICAvPlxcbiAgICAgICAgICAgICAgICA8cGF0aCBkPVxcXCJNMCAwaDI3djMySDB6XFxcIiAvPlxcbiAgICAgICAgICAgICAgPC9nPlxcbiAgICAgICAgICAgIDwvc3ZnPiAtLT5cXG4gICAgICAgICAgPHN2ZyB2aWV3Qm94PVxcXCIwIDAgMjcgMzJcXFwiPlxcbiAgICAgICAgICAgIDxnIGZpbGw9XFxcIm5vbmVcXFwiIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCI+XFxuICAgICAgICAgICAgICA8cGF0aFxcbiAgICAgICAgICAgICAgICBkPVxcXCJNMi4wMjIgMjkuOTg0Yy0uODk5LS4zMjMtMS4yMjQtMS4wOC0uODk5LTIuMDUxIDIuNTItOC44NTUgNS43MjQtMTcuODU0IDkuMzk1LTI2LjEzM0MxMS4wMjIuNzIgMTEuODUgMCAxMy4xODIgMHMyLjE5NS43MiAyLjcgMS44YzMuNiA3LjkxOSA3LjA1NSAxNi45NTQgOS41NzQgMjUuOTE3LjI1MiAxLjAwOC4wMzYgMS45NDQtMS4wOCAyLjI2OC0uODI4LjIxNy0xLjY5IDAtMi4wODgtMS4xODhhMjE3Ljc4NCAyMTcuNzg0IDAgMDAtMS45NDMtNi40MDdINi4xNjJjLS42NDcgMi4wODgtMS4yNiA0LjE0LTEuODcgNi4yMjgtLjM2IDEuMjU5LTEuMjYyIDEuNjktMi4yNyAxLjM2NnptNS4wNC0xMC4zM0gxOS40MWEyMjYuNDg5IDIyNi40ODkgMCAwMC02LjIyOC0xNi4zNzhjLTIuMzAzIDUuMjU1LTQuMzE5IDEwLjc5OC02LjExOSAxNi4zNzh6XFxcIlxcbiAgICAgICAgICAgICAgICBmaWxsPVxcXCJ2YXIoLS1zdmdGaWxsKVxcXCIgZmlsbC1ydWxlPVxcXCJub256ZXJvXFxcIiAvPlxcbiAgICAgICAgICAgICAgPHBhdGggZD1cXFwiTTAgMGgyN3YzMkgwelxcXCIgLz5cXG4gICAgICAgICAgICA8L2c+XFxuICAgICAgICAgIDwvc3ZnPlxcblxcbiAgICAgICAgICA8IS0tIDxzdmdcXG4gICAgICAgICAgICAgIGlkPVxcXCJBXFxcIlxcbiAgICAgICAgICAgICAgd2lkdGg9XFxcIjI3XFxcIlxcbiAgICAgICAgICAgICAgaGVpZ2h0PVxcXCIzMlxcXCJcXG4gICAgICAgICAgICAgIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICA8ZyBmaWxsPVxcXCJub25lXFxcIiBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiPlxcbiAgICAgICAgICAgICAgICA8cGF0aFxcbiAgICAgICAgICAgICAgICAgIGQ9XFxcIk0yLjAyMiAyOS45ODRjLS44OTktLjMyMy0xLjIyNC0xLjA4LS44OTktMi4wNTEgMi41Mi04Ljg1NSA1LjcyNC0xNy44NTQgOS4zOTUtMjYuMTMzQzExLjAyMi43MiAxMS44NSAwIDEzLjE4MiAwczIuMTk1LjcyIDIuNyAxLjhjMy42IDcuOTE5IDcuMDU1IDE2Ljk1NCA5LjU3NCAyNS45MTcuMjUyIDEuMDA4LjAzNiAxLjk0NC0xLjA4IDIuMjY4LS44MjguMjE3LTEuNjkgMC0yLjA4OC0xLjE4OGEyMTcuNzg0IDIxNy43ODQgMCAwMC0xLjk0My02LjQwN0g2LjE2MmMtLjY0NyAyLjA4OC0xLjI2IDQuMTQtMS44NyA2LjIyOC0uMzYgMS4yNTktMS4yNjIgMS42OS0yLjI3IDEuMzY2em01LjA0LTEwLjMzSDE5LjQxYTIyNi40ODkgMjI2LjQ4OSAwIDAwLTYuMjI4LTE2LjM3OGMtMi4zMDMgNS4yNTUtNC4zMTkgMTAuNzk4LTYuMTE5IDE2LjM3OHpcXFwiXFxuICAgICAgICAgICAgICAgICAgZmlsbD1cXFwidmFyKC0tc3ZnRmlsbClcXFwiXFxuICAgICAgICAgICAgICAgICAgZmlsbC1ydWxlPVxcXCJub256ZXJvXFxcIlxcbiAgICAgICAgICAgICAgICAvPlxcbiAgICAgICAgICAgICAgICA8cGF0aCBkPVxcXCJNMCAwaDI3djMySDB6XFxcIiAvPlxcbiAgICAgICAgICAgICAgPC9nPlxcbiAgICAgICAgICAgIDwvc3ZnPiAtLT5cXG4gICAgICAgICAgPHN2ZyB2aWV3Qm94PVxcXCIwIDAgMjcgMzJcXFwiPlxcbiAgICAgICAgICAgIDxnIGZpbGw9XFxcIm5vbmVcXFwiIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCI+XFxuICAgICAgICAgICAgICA8cGF0aFxcbiAgICAgICAgICAgICAgICBkPVxcXCJNMTQuMDg3IDMwLjk0OUg0LjU4NEMzLjY4NSAzMC45NDkgMyAzMC4yMyAzIDI5LjIyMlYzLjdDMyAyLjA4IDMuNzkyIDEgNS41NTYgMWg3LjM3OWM2LjM3MiAwIDkuNTAzIDIuNzcxIDkuNTAzIDcuMTI3IDAgMy4zODQtMS43NjQgNS42ODgtNC43NTEgNi42NTkgNC4xMDQuOTcyIDYuMTU1IDMuNjM3IDYuMTU1IDcuNzQgMCA1LjY4Ny00LjU3MSA4LjQyMy05Ljc1NSA4LjQyM3pNNi4yNCAxMy44NTFoNi45NDZjMy4xNjggMCA2LjAxMi0xLjQ3NiA2LjAxMi01LjQzNiAwLTMuMDYtMi4zNC00LjYwNy02LjU4Ny00LjYwN0g2LjI0djEwLjA0M3ptMCAyLjczNXYxMS41NTZoNy4yMzRjNC4wNjcgMCA3LjAyLTEuNTg0IDcuMDItNS42ODggMC0zLjgxNi0yLjE5Ni01Ljg2OC02Ljg3NS01Ljg2OEg2LjI0elxcXCJcXG4gICAgICAgICAgICAgICAgZmlsbD1cXFwidmFyKC0tc3ZnRmlsbClcXFwiIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCIgLz5cXG4gICAgICAgICAgICAgIDxwYXRoIGQ9XFxcIk0wIDBoMjd2MzJIMHpcXFwiIC8+XFxuICAgICAgICAgICAgPC9nPlxcbiAgICAgICAgICA8L3N2Zz5cXG5cXG4gICAgICAgICAgPCEtLSA8c3ZnXFxuICAgICAgICAgICAgICBpZD1cXFwiQlxcXCJcXG4gICAgICAgICAgICAgIHdpZHRoPVxcXCIyN1xcXCJcXG4gICAgICAgICAgICAgIGhlaWdodD1cXFwiMzJcXFwiXFxuICAgICAgICAgICAgICB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiXFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgPGcgZmlsbD1cXFwibm9uZVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj5cXG4gICAgICAgICAgICAgICAgPHBhdGhcXG4gICAgICAgICAgICAgICAgICBkPVxcXCJNMTQuMDg3IDMwLjk0OUg0LjU4NEMzLjY4NSAzMC45NDkgMyAzMC4yMyAzIDI5LjIyMlYzLjdDMyAyLjA4IDMuNzkyIDEgNS41NTYgMWg3LjM3OWM2LjM3MiAwIDkuNTAzIDIuNzcxIDkuNTAzIDcuMTI3IDAgMy4zODQtMS43NjQgNS42ODgtNC43NTEgNi42NTkgNC4xMDQuOTcyIDYuMTU1IDMuNjM3IDYuMTU1IDcuNzQgMCA1LjY4Ny00LjU3MSA4LjQyMy05Ljc1NSA4LjQyM3pNNi4yNCAxMy44NTFoNi45NDZjMy4xNjggMCA2LjAxMi0xLjQ3NiA2LjAxMi01LjQzNiAwLTMuMDYtMi4zNC00LjYwNy02LjU4Ny00LjYwN0g2LjI0djEwLjA0M3ptMCAyLjczNXYxMS41NTZoNy4yMzRjNC4wNjcgMCA3LjAyLTEuNTg0IDcuMDItNS42ODggMC0zLjgxNi0yLjE5Ni01Ljg2OC02Ljg3NS01Ljg2OEg2LjI0elxcXCJcXG4gICAgICAgICAgICAgICAgICBmaWxsPVxcXCJ2YXIoLS1zdmdGaWxsKVxcXCJcXG4gICAgICAgICAgICAgICAgICBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiXFxuICAgICAgICAgICAgICAgIC8+XFxuICAgICAgICAgICAgICAgIDxwYXRoIGQ9XFxcIk0wIDBoMjd2MzJIMHpcXFwiIC8+XFxuICAgICAgICAgICAgICA8L2c+XFxuICAgICAgICAgICAgPC9zdmc+IC0tPlxcbiAgICAgICAgICA8c3ZnIHZpZXdCb3g9XFxcIjAgMCAyNyAzMlxcXCI+XFxuICAgICAgICAgICAgPGcgZmlsbD1cXFwibm9uZVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj5cXG4gICAgICAgICAgICAgIDxwYXRoXFxuICAgICAgICAgICAgICAgIGQ9XFxcIk0yMy4wMzEgNy45MzdjLTEuNjkxLTMuMTY4LTQuMzE4LTQuNDYzLTguMTM2LTQuNDYzLTcuNDE1IDAtMTAuOTQyIDUuNTA3LTEwLjk0MiAxMi42NyAwIDcuMzA3IDMuOTU5IDEyLjM4MiAxMC42NTUgMTIuMzgyIDQuOTMzIDAgNy4yMzUtMS44IDguNDk1LTQuMTA0LjUwNC0uODY0IDEuNDA0LTEuMjk2IDIuMjY4LS44OTkuODY1LjM5Ni45NzMgMS40MzkuNTc2IDIuMTU5LTEuNjE5IDMuNDU2LTUuMzYzIDUuNjg4LTExLjM3NiA1LjY4OC04LjUzIDAtMTMuOTI5LTYuMDQ4LTEzLjkyOS0xNS4yOThDLjY0MiA3LjgyOSA1LjI4Ni42MyAxNC45NjguNjNjNC43NTMgMCA5LjI1MyAxLjkwOCAxMC44NzIgNS43OTUuMzk2Ljg5OS4zMjQgMS42OTEtLjQ2OSAyLjE5NS0uNzkxLjQzMy0xLjc5OS4xNDUtMi4zNC0uNjgzelxcXCJcXG4gICAgICAgICAgICAgICAgZmlsbD1cXFwidmFyKC0tc3ZnRmlsbClcXFwiIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCIgLz5cXG4gICAgICAgICAgICAgIDxwYXRoIGQ9XFxcIk0wIDBoMjd2MzJIMHpcXFwiIC8+XFxuICAgICAgICAgICAgPC9nPlxcbiAgICAgICAgICA8L3N2Zz5cXG4gICAgICAgICAgPCEtLSBDIGl6bmFkIC0tPlxcbiAgICAgICAgICA8c3ZnIHZpZXdCb3g9XFxcIjAgMCAyNyAzMlxcXCI+XFxuICAgICAgICAgICAgPGcgZmlsbD1cXFwibm9uZVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj5cXG4gICAgICAgICAgICAgIDxwYXRoXFxuICAgICAgICAgICAgICAgIGQ9XFxcIk0xMi42MTkgMzAuOTc0SDMuODM2Yy0xLjI5NiAwLTIuMjY4LS45NzEtMi4yNjgtMi4yNjhWMy4yNThjMC0xLjI5Ni45NzItMi4yMzIgMi4yNjgtMi4yMzJoOC4zMTVjOC43MTEgMCAxNC41NzggNC43ODggMTQuNTc4IDE0LjY4NiAwIDEwLjIyMy02LjYyMyAxNS4yNjItMTQuMTEgMTUuMjYyem0tLjg2NC0yNy4xNDFINC44MDl2MjQuMzMzaDcuMzQzYzYuOTgzIDAgMTEuMjMtNC4zOTMgMTEuMjMtMTIuMzgzIDAtOC4wNjItMy45OTUtMTEuOTUtMTEuNjI3LTExLjk1elxcXCJcXG4gICAgICAgICAgICAgICAgZmlsbD1cXFwidmFyKC0tc3ZnRmlsbClcXFwiIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCIgLz5cXG4gICAgICAgICAgICAgIDxwYXRoIGQ9XFxcIk0wIDBoMjd2MzJIMHpcXFwiIC8+XFxuICAgICAgICAgICAgPC9nPlxcbiAgICAgICAgICA8L3N2Zz5cXG4gICAgICAgICAgPCEtLUQgSVpOQUQgLS0+XFxuXFxuICAgICAgICAgIDxzdmcgdmlld0JveD1cXFwiMCAwIDI3IDMyXFxcIj5cXG4gICAgICAgICAgICA8ZyBmaWxsPVxcXCJub25lXFxcIiBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiPlxcbiAgICAgICAgICAgICAgPHBhdGhcXG4gICAgICAgICAgICAgICAgZD1cXFwiTTIyLjQwNyAzMS41ODRINS41MjVhMi4xMjcgMi4xMjcgMCAwMS0yLjEyNC0yLjEyM1YzLjcyNGMwLTEuMTUyLjk3Mi0yLjA4OCAyLjEyNC0yLjA4OGgxNi45MTdjLjcyMSAwIDEuMzMyLjU3NiAxLjMzMiAxLjQ0IDAgLjcyLS42MTEgMS4zNjgtMS4zMzIgMS4zNjhINi42NDF2MTAuNDM4aDE0LjI1NGMuNzU2IDAgMS4zNjcuNTc2IDEuMzY3IDEuNDA0IDAgLjc1Ni0uNjExIDEuNDA0LTEuMzY3IDEuNDA0SDYuNjQxdjExLjA4N2gxNS43NjZjLjc1NiAwIDEuMzY3LjYxMSAxLjM2NyAxLjM2NyAwIC44MjktLjYxMSAxLjQ0LTEuMzY3IDEuNDR6XFxcIlxcbiAgICAgICAgICAgICAgICBmaWxsPVxcXCJ2YXIoLS1zdmdGaWxsKVxcXCIgZmlsbC1ydWxlPVxcXCJub256ZXJvXFxcIiAvPlxcbiAgICAgICAgICAgICAgPHBhdGggZD1cXFwiTTAgMGgyN3YzMkgwelxcXCIgLz5cXG4gICAgICAgICAgICA8L2c+XFxuICAgICAgICAgIDwvc3ZnPlxcbiAgICAgICAgICA8IS0tIEUgaXpuYWQgLS0+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiIGNsYXNzPVxcXCJvbW8td2lkZ2V0X19zdWJzdHJhY3RcXFwiPlxcbiAgICAgICAgICAtXFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgIDxpbnB1dCBpZD1cXFwidG90ZW1fYm9keV9mZlxcXCIgdHlwZT1cXFwibnVtYmVyXFxcIiBjbGFzcz1cXFwib21vLXdpZGdldF9fb3B0aW9uLXZhbHVlXFxcIiB2YWx1ZT1cXFwiMFxcXCIgbWluPVxcXCIxXFxcIiBtYXg9XFxcIjVcXFwiXFxuICAgICAgICAgIG5hbWU9XFxcInRvdGVtX2JvZHlfZmZcXFwiIC8+XFxuICAgICAgPC9mb3JtPlxcbiAgICA8L2ZpZWxkc2V0PlxcbiAgICA8ZmllbGRzZXQgZGF0YS1zZXR0aW5nLW5hbWU9XFxcImZvbnQtd2VpZ2h0XFxcIj5cXG4gICAgICA8bGVnZW5kPkZvbnQgd2VpZ2h0PC9sZWdlbmQ+XFxuICAgICAgPGlucHV0IHR5cGU9XFxcInJhZGlvXFxcIiBjbGFzcz1cXFwib21vLXdpZGdldF9fdG9nZ2xlLW9wdGlvbnNcXFwiIGFyaWEtc2VsZWN0ZWQ9XFxcImZhbHNlXFxcIiBuYW1lPVxcXCJvcHRpb24tb3BlbmVkXFxcIiB2YWx1ZT1cXFwiMlxcXCJcXG4gICAgICAgIHRpdGxlPVxcXCJGb250IFdlaWdodFxcXCIgLz5cXG4gICAgICA8c3ZnIHZpZXdCb3g9XFxcIjAgMCAzNSAyNFxcXCI+XFxuICAgICAgICA8ZyBpZD1cXFwiZm9udC13ZWlnaHRcXFwiIGZpbGw9XFxcInZhcigtLXN2Z0ZpbGwpXFxcIiBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiPlxcbiAgICAgICAgICA8cGF0aFxcbiAgICAgICAgICAgIGQ9XFxcIk0yLjA2OSAxMi4yMjV2OS44NzhINy45NWMzLjQzNyAwIDYuMDczLTEuMzYxIDYuMDczLTQuOTQgMC0zLjI0NS0xLjg1NS00LjkzOC01LjgyNi00LjkzOGgtNi4xM3ptMC0xLjUyMmg1LjkwOGMyLjYzNSAwIDQuOTY1LTEuMjUxIDQuOTY1LTQuNTUzIDAtMi41NTItMS45Ny0zLjg1NC01LjU0Ny0zLjg1NEgyLjA2OXY4LjQwN3ptNi4zNzkgMTIuOTI1SDEuMTVhLjgzMi44MzIgMCAwMS0uODYtLjg2VjIuNTE3YzAtMS4wNTUuNTAzLTEuNzQ2IDEuNjEtMS43NDZoNS44NTJjNC42NjIgMCA2Ljk5MiAyLjEwNiA2Ljk5MiA1LjM3OSAwIDIuNTU0LTEuNDcxIDQuMzI5LTMuNjMxIDUuMTA1IDMuMTYyLjcyIDQuNzEzIDIuNzQ3IDQuNzEzIDUuOTA4IDAgNC4zODQtMy40NjcgNi40NjUtNy4zOCA2LjQ2NXpNMjEuNTc3IDEzLjAzdjcuNTQ2aDUuMTYyYzIuNzQ2IDAgNC41MjItMS4wMjYgNC41MjItMy42MDcgMC0yLjU1LTEuNDctMy45MzgtNC41NS0zLjkzOGgtNS4xMzR6bTAtMi45MTJoNC42MDdjMi4xOTIgMCA0LjE4OS0xIDQuMTg5LTMuNjg4IDAtMi4xMS0xLjU1Mi0zLjE2NS00LjQ0LTMuMTY1aC00LjM1NnY2Ljg1M3ptNS42MDUgMTMuNTFIMTkuODNjLS45NyAwLTEuNjkyLS44MzEtMS42OTItMS45NjhWMi43OTVjMC0xLjU1My43NS0yLjU4IDIuNDQyLTIuNThoNS40NjVjNS4yMTUgMCA3Ljc5NSAyLjE5IDcuNzk1IDUuNjYgMCAyLjY2My0xLjE5MyA0LjQzNy0zLjY5IDUuMjE1IDMuMTYyLjgwNSA0LjcxOSAyLjg1NyA0LjcxOSA2LjAyIDAgNC40MDktMy41NTMgNi41MTktNy42ODggNi41MTl6XFxcIiAvPlxcbiAgICAgICAgPC9nPlxcbiAgICAgIDwvc3ZnPlxcblxcbiAgICAgIDxmb3JtIGFjdGlvbj1cXFwiI1xcXCI+XFxuICAgICAgICA8YnV0dG9uIHR5cGU9XFxcInJlc2V0XFxcIiBjbGFzcz1cXFwib21vLXdpZGdldF9fcmVzZXRcXFwiPlxcbiAgICAgICAgICA8c3ZnIHZpZXdCb3g9XFxcIjAgMCAyNSAyNVxcXCI+XFxuICAgICAgICAgICAgPHBhdGggaWQ9XFxcInJlc2V0XFxcIiBmaWxsPVxcXCJ2YXIoLS1zdmdGaWxsKVxcXCJcXG4gICAgICAgICAgICAgIGQ9XFxcIk02IDNDNS4zIDIuMyA0LjYgMS41IDMuNy42Yy0uMiAyLjUtLjQgNC45LS43IDcuMyAyLjYuMSA1IC4yIDcuNy4yLS45LTEtMS43LTEuOC0yLjUtMi43IDIuNi0xLjQgNi41LS43IDguOSAxLjYgMi43IDIuNSAzLjQgNi41IDEuOSA5LjctMS42IDMuMi01LjIgNS4xLTguNyA0LjYtMy4xLS41LTYuOC0zLjEtNy4xLTguMmgtM2MtLjMgMy41IDIuMSA4LjIgNi40IDEwLjIgNC42IDIuMiAxMC4zIDEgMTMuNi0yLjggMy40LTQuMSAzLjctOS43LjYtMTRDMTguMyAyLjggMTIuNS0uMiA2IDN6XFxcIlxcbiAgICAgICAgICAgICAgZmlsbC1ydWxlPVxcXCJub256ZXJvXFxcIiAvPlxcbiAgICAgICAgICA8L3N2Zz5cXG4gICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIHRhYmluZGV4PVxcXCItMVxcXCIgY2xhc3M9XFxcIm9tby13aWRnZXRfX2FkZFxcXCI+KzwvYnV0dG9uPlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIHRhYmluZGV4PVxcXCItMVxcXCIgY2xhc3M9XFxcIm9tby13aWRnZXRfX3N1YnN0cmFjdFxcXCI+XFxuICAgICAgICAgIC1cXG4gICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgPGlucHV0IGlkPVxcXCJ0b3RlbV9mb250X3dlaWdodFxcXCIgdHlwZT1cXFwibnVtYmVyXFxcIiBjbGFzcz1cXFwib21vLXdpZGdldF9fb3B0aW9uLXZhbHVlXFxcIiB2YWx1ZT1cXFwiMFxcXCIgbWluPVxcXCIxXFxcIiBtYXg9XFxcIjNcXFwiXFxuICAgICAgICAgIG5hbWU9XFxcInRvdGVtX2ZvbnRfd2VpZ2h0XFxcIiAvPlxcbiAgICAgIDwvZm9ybT5cXG4gICAgPC9maWVsZHNldD5cXG4gICAgPGZpZWxkc2V0IGRhdGEtc2V0dGluZy1uYW1lPVxcXCJsZXR0ZXItc3BhY2luZ1xcXCI+XFxuICAgICAgPGxlZ2VuZD5MZXR0ZXIgc3BhY2luZzwvbGVnZW5kPlxcbiAgICAgIDxpbnB1dCB0eXBlPVxcXCJyYWRpb1xcXCIgY2xhc3M9XFxcIm9tby13aWRnZXRfX3RvZ2dsZS1vcHRpb25zXFxcIiBhcmlhLXNlbGVjdGVkPVxcXCJmYWxzZVxcXCIgbmFtZT1cXFwib3B0aW9uLW9wZW5lZFxcXCIgdmFsdWU9XFxcIjJcXFwiXFxuICAgICAgICB0aXRsZT1cXFwiTGV0dGVyIHNwYWNpbmdcXFwiIC8+XFxuXFxuICAgICAgPHN2ZyB2aWV3Qm94PVxcXCIwIDAgMzIgMjdcXFwiPlxcbiAgICAgICAgPGcgaWQ9XFxcImxldHRlci1zcGFjaW5nXFxcIiBmaWxsPVxcXCJ2YXIoLS1zdmdGaWxsKVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj5cXG4gICAgICAgICAgPHBhdGhcXG4gICAgICAgICAgICBkPVxcXCJNMTMuOTIgMS4xMWMuMjY2LjA3LjQ1MS4yMS41Ni40MjcuMTAzLjIxLjEzMS40MzMuMDc2LjY2NWE5Ni45OTMgOTYuOTkzIDAgMDEtMi40NDMgNy44MjYgMTA2LjU0MiAxMDYuNTQyIDAgMDEtMi44NjkgNy4xNjQgMi40MzUgMi40MzUgMCAwMS0uNjY0Ljg1MiAxLjQ0MiAxLjQ0MiAwIDAxLS45My4zNDRjLS4zNzMgMC0uNjk2LS4xMTMtLjk3LS4zNDRhMi40ODQgMi40ODQgMCAwMS0uNjUtLjg1MkExMDMuMTUxIDEwMy4xNTEgMCAwMTMuMDggOS45MiA5OC4zNjIgOTguMzYyIDAgMDEuNjYyIDIuMzA1YTEuMSAxLjEgMCAwMS4wMjYtLjcxNWMuMDktLjI1LjI3NC0uNDEuNTU4LS40OGEuOTc1Ljk3NSAwIDAxLjcyLjA2N2MuMjQ2LjExNi40MDUuMjg5LjQ3NS41MTcuNjkyIDIuNDggMS40NTcgNC45NTQgMi4zIDcuNDE2YTkzLjc0OSA5My43NDkgMCAwMDIuOTM2IDcuNDk2IDEyMi4yOTcgMTIyLjI5NyAwIDAwMi44NDMtNy40MjggMTA2LjMxNyAxMDYuMzE3IDAgMDAyLjIzMS03LjM1MWMuMDctLjI2NS4yMi0uNDcuNDUtLjYxMWEuODY0Ljg2NCAwIDAxLjcxOC0uMTA1TTIwLjgyNyAxMS41MDJoNi44ODNhOTguNTYgOTguNTYgMCAwMC0xLjYyMS00LjM4NyAxMDguMzY2IDEwOC4zNjYgMCAwMC0xLjg2LTQuMzg0IDg2LjQ3IDg2LjQ3IDAgMDAtMS44MiA0LjQxMiAxNTEuNjAyIDE1MS42MDIgMCAwMC0xLjU4MiA0LjM2bS0zLjI0IDYuNzc4YS43NTYuNzU2IDAgMDEtLjQzOC0uNDM4Ljk0Ni45NDYgMCAwMS0uMDEzLS42NTIgMTI2LjQ3NiAxMjYuNDc2IDAgMDEyLjUyLTcuODAzYy45NC0yLjYxNSAxLjk2LTUuMTMyIDMuMDYtNy41NjIuMTIzLS4yODMuMzA3LS41MTYuNTU3LS43MDMuMjQ3LS4xODYuNTU3LS4yNzguOTI5LS4yNzguMzcgMCAuNjgyLjA5Mi45My4yNzguMjQ4LjE4Ny40NC40Mi41ODYuNzAzYTkxLjY1NCA5MS42NTQgMCAwMTMuMTIgNy4zOSA5Ni41MzEgOTYuNTMxIDAgMDEyLjUzOCA3Ljc5Yy4wNy4yNDYuMDcuNDk0IDAgLjc0MS0uMDcuMjUtLjI0LjQyLS41MDYuNTA1YTEuMDQ3IDEuMDQ3IDAgMDEtLjczLS4wNS44MDQuODA0IDAgMDEtLjQ5Mi0uNTg2IDcyLjA0NSA3Mi4wNDUgMCAwMC0uNjc2LTIuMjc1Yy0uMjQtLjc1LS40ODQtMS41MDgtLjczMy0yLjI3aC03Ljk0M2MtLjIzLjc2Mi0uNDYgMS41Mi0uNjkgMi4yNy0uMjMuNzU4LS40NjIgMS41MTMtLjY5MSAyLjI3NWEuOTI0LjkyNCAwIDAxLS41MzIuNTk4IDEuMTkgMS4xOSAwIDAxLS43OTYuMDY3TTMxLjQwNCAyMi42MjFjLS4wMDYtLjAzLS4wMDYtLjA2LS4wMTgtLjA4OC0uMDA3LS4wMi0uMDI4LS4wMzktLjA0LS4wNTktLjAzLS4wNTctLjA2LS4xMTctLjEwOC0uMTY2bC0zLjMxMy0zLjMxN2EuNjguNjggMCAxMC0uOTY2Ljk2M2wyLjE1MyAyLjE1NkgyLjkzMmwyLjE1My0yLjE1NmEuNjg0LjY4NCAwIDAwMC0uOTYzLjY4Ny42ODcgMCAwMC0uOTY1IDBMLjgwMyAyMi4zMDhjLS4wNDcuMDUtLjA3OC4xMS0uMTEuMTY2LS4wMS4wMi0uMDI4LjA0LS4wMzguMDYtLjAxMS4wMjYtLjAxLjA1Ny0uMDE2LjA4N2EuNjY5LjY2OSAwIDAwLjE2NC42NWwzLjMxNSAzLjMyYS42ODcuNjg3IDAgMDAuOTY3IDAgLjY4Ni42ODYgMCAwMC0uMDA0LS45NjhsLTIuMTUtMi4xNUgyOS4xMWwtMi4xNSAyLjE1YS42ODUuNjg1IDAgMDAtLjAwMS45NjcuNjg2LjY4NiAwIDAwLjk2NiAwbDMuMzEzLTMuMzE5YS42NjMuNjYzIDAgMDAuMTY2LS42NVxcXCIgLz5cXG4gICAgICAgIDwvZz5cXG4gICAgICA8L3N2Zz5cXG5cXG4gICAgICA8Zm9ybSBhY3Rpb249XFxcIiNcXFwiPlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJyZXNldFxcXCIgY2xhc3M9XFxcIm9tby13aWRnZXRfX3Jlc2V0XFxcIj5cXG4gICAgICAgICAgPHN2ZyB2aWV3Qm94PVxcXCIwIDAgMjUgMjVcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGlkPVxcXCJyZXNldFxcXCIgZmlsbD1cXFwidmFyKC0tc3ZnRmlsbClcXFwiXFxuICAgICAgICAgICAgICBkPVxcXCJNNiAzQzUuMyAyLjMgNC42IDEuNSAzLjcuNmMtLjIgMi41LS40IDQuOS0uNyA3LjMgMi42LjEgNSAuMiA3LjcuMi0uOS0xLTEuNy0xLjgtMi41LTIuNyAyLjYtMS40IDYuNS0uNyA4LjkgMS42IDIuNyAyLjUgMy40IDYuNSAxLjkgOS43LTEuNiAzLjItNS4yIDUuMS04LjcgNC42LTMuMS0uNS02LjgtMy4xLTcuMS04LjJoLTNjLS4zIDMuNSAyLjEgOC4yIDYuNCAxMC4yIDQuNiAyLjIgMTAuMyAxIDEzLjYtMi44IDMuNC00LjEgMy43LTkuNy42LTE0QzE4LjMgMi44IDEyLjUtLjIgNiAzelxcXCJcXG4gICAgICAgICAgICAgIGZpbGwtcnVsZT1cXFwibm9uemVyb1xcXCIgLz5cXG4gICAgICAgICAgPC9zdmc+XFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiIGNsYXNzPVxcXCJvbW8td2lkZ2V0X19hZGRcXFwiPis8L2J1dHRvbj5cXG4gICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiIGNsYXNzPVxcXCJvbW8td2lkZ2V0X19zdWJzdHJhY3RcXFwiPlxcbiAgICAgICAgICAtXFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgIDxpbnB1dCBpZD1cXFwidG90ZW1fYnNwYWNpbmdcXFwiIHR5cGU9XFxcIm51bWJlclxcXCIgY2xhc3M9XFxcIm9tby13aWRnZXRfX29wdGlvbi12YWx1ZVxcXCIgdmFsdWU9XFxcIjBcXFwiIG1pbj1cXFwiMVxcXCIgbWF4PVxcXCI0XFxcIlxcbiAgICAgICAgICBuYW1lPVxcXCJ0b3RlbV9ic3BhY2luZ1xcXCIgLz5cXG4gICAgICA8L2Zvcm0+XFxuICAgIDwvZmllbGRzZXQ+XFxuICAgIDxmaWVsZHNldCBkYXRhLXNldHRpbmctbmFtZT1cXFwibGluZS1oZWlnaHRcXFwiPlxcbiAgICAgIDxsZWdlbmQ+TGluZSBoZWlnaHQ8L2xlZ2VuZD5cXG4gICAgICA8aW5wdXQgdHlwZT1cXFwicmFkaW9cXFwiIGNsYXNzPVxcXCJvbW8td2lkZ2V0X190b2dnbGUtb3B0aW9uc1xcXCIgYXJpYS1zZWxlY3RlZD1cXFwiZmFsc2VcXFwiIG5hbWU9XFxcIm9wdGlvbi1vcGVuZWRcXFwiIHZhbHVlPVxcXCIzXFxcIlxcbiAgICAgICAgdGl0bGU9XFxcIkxpbmUgaGVpZ2h0XFxcIiAvPlxcbiAgICAgIDxzdmcgdmlld0JveD1cXFwiMCAwIDMyIDI4XFxcIj5cXG4gICAgICAgIDxnIGlkPVxcXCJsaW5lLWhlaWdodFxcXCIgZmlsbD1cXFwidmFyKC0tc3ZnRmlsbClcXFwiIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCI+XFxuICAgICAgICAgIDxwYXRoXFxuICAgICAgICAgICAgZD1cXFwiTTMwLjU1MS45MkgxMy4zMTdhLjgyLjgyIDAgMDAwIDEuNjM5aDE3LjIzNGEuODE5LjgxOSAwIDAwMC0xLjY0TTMwLjU1MSAyNi4wOTVIMTMuMzE3YS44MTguODE4IDAgMTAwIDEuNjM0aDE3LjIzNGEuODE3LjgxNyAwIDEwMC0xLjYzNE05LjE0NyAyMi4zNTlsLTIuNTg1IDIuNTg2VjMuNzA3bDIuNTg1IDIuNTg3YS44MTkuODE5IDAgMDAxLjE1OC0xLjE2TDYuMzIxIDEuMTQ4Yy0uMDU3LS4wNTYtLjEyNi0uMDkxLS4xOTctLjEzLS4wMjYtLjAxNC0uMDQ1LS4wMzctLjA3Mi0uMDQ4LS4wMzMtLjAxMy0uMDY5LS4wMS0uMTA2LS4wMmEuODAyLjgwMiAwIDAwLS43NzkuMTk4TDEuMTg0IDUuMTMyYS44Mi44MiAwIDEwMS4xNTYgMS4xNmwyLjU4Ni0yLjU4N3YyMS4yNEwyLjM0IDIyLjM2YS44MTQuODE0IDAgMDAtMS4xNTYtLjAwMi44MTUuODE1IDAgMDAwIDEuMTU4bDMuOTgzIDMuOTg1YS44LjggMCAwMC43NzkuMTk5Yy4wMzctLjAxLjA3My0uMDA4LjEwNi0uMDIuMDI3LS4wMTEuMDQ2LS4wMzYuMDcyLS4wNDcuMDcxLS4wNC4xNC0uMDc1LjE5Ny0uMTMybDMuOTg0LTMuOTg2YS44MTYuODE2IDAgMDAtLjAwMS0xLjE1Ny44MTcuODE3IDAgMDAtMS4xNTcgME0zMC41NTEgMTAuOTg5SDEzLjMxN2EuODIuODIgMCAwMDAgMS42MzloMTcuMjM0YS44Mi44MiAwIDAwMC0xLjY0TTMwLjU1MSAxNi4wMjRIMTMuMzE3YS44Mi44MiAwIDAwMCAxLjYzOWgxNy4yMzRhLjgxOS44MTkgMCAwMDAtMS42NE0zMC41NTEgNS45NTRIMTMuMzE3YS44Mi44MiAwIDAwLS44MTkuODIuODIuODIgMCAwMC44Mi44MTdIMzAuNTVhLjgxOC44MTggMCAwMDAtMS42MzdNMzAuNTUxIDIxLjA1OUgxMy4zMTdhLjgyLjgyIDAgMDAwIDEuNjM4aDE3LjIzNGEuODE5LjgxOSAwIDAwMC0xLjYzOFxcXCIgLz5cXG4gICAgICAgIDwvZz5cXG4gICAgICA8L3N2Zz5cXG5cXG4gICAgICA8IS0tIDxzdmcgd2lkdGg9XFxcIjMyXFxcIiBoZWlnaHQ9XFxcIjI4XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPlxcbiAgICAgICAgICA8ZyBpZD1cXFwibGluZS1oZWlnaHRcXFwiIGZpbGw9XFxcInZhcigtLXN2Z0ZpbGwpXFxcIiBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoXFxuICAgICAgICAgICAgICBkPVxcXCJNMzAuNTUxLjkySDEzLjMxN2EuODIuODIgMCAwMDAgMS42MzloMTcuMjM0YS44MTkuODE5IDAgMDAwLTEuNjRNMzAuNTUxIDI2LjA5NUgxMy4zMTdhLjgxOC44MTggMCAxMDAgMS42MzRoMTcuMjM0YS44MTcuODE3IDAgMTAwLTEuNjM0TTkuMTQ3IDIyLjM1OWwtMi41ODUgMi41ODZWMy43MDdsMi41ODUgMi41ODdhLjgxOS44MTkgMCAwMDEuMTU4LTEuMTZMNi4zMjEgMS4xNDhjLS4wNTctLjA1Ni0uMTI2LS4wOTEtLjE5Ny0uMTMtLjAyNi0uMDE0LS4wNDUtLjAzNy0uMDcyLS4wNDgtLjAzMy0uMDEzLS4wNjktLjAxLS4xMDYtLjAyYS44MDIuODAyIDAgMDAtLjc3OS4xOThMMS4xODQgNS4xMzJhLjgyLjgyIDAgMTAxLjE1NiAxLjE2bDIuNTg2LTIuNTg3djIxLjI0TDIuMzQgMjIuMzZhLjgxNC44MTQgMCAwMC0xLjE1Ni0uMDAyLjgxNS44MTUgMCAwMDAgMS4xNThsMy45ODMgMy45ODVhLjguOCAwIDAwLjc3OS4xOTljLjAzNy0uMDEuMDczLS4wMDguMTA2LS4wMi4wMjctLjAxMS4wNDYtLjAzNi4wNzItLjA0Ny4wNzEtLjA0LjE0LS4wNzUuMTk3LS4xMzJsMy45ODQtMy45ODZhLjgxNi44MTYgMCAwMC0uMDAxLTEuMTU3LjgxNy44MTcgMCAwMC0xLjE1NyAwTTMwLjU1MSAxMC45ODlIMTMuMzE3YS44Mi44MiAwIDAwMCAxLjYzOWgxNy4yMzRhLjgyLjgyIDAgMDAwLTEuNjRNMzAuNTUxIDE2LjAyNEgxMy4zMTdhLjgyLjgyIDAgMDAwIDEuNjM5aDE3LjIzNGEuODE5LjgxOSAwIDAwMC0xLjY0TTMwLjU1MSA1Ljk1NEgxMy4zMTdhLjgyLjgyIDAgMDAtLjgxOS44Mi44Mi44MiAwIDAwLjgyLjgxN0gzMC41NWEuODE4LjgxOCAwIDAwMC0xLjYzN00zMC41NTEgMjEuMDU5SDEzLjMxN2EuODIuODIgMCAwMDAgMS42MzhoMTcuMjM0YS44MTkuODE5IDAgMDAwLTEuNjM4XFxcIlxcbiAgICAgICAgICAgIC8+XFxuICAgICAgICAgIDwvZz5cXG4gICAgICAgIDwvc3ZnPiAtLT5cXG4gICAgICA8Zm9ybSBhY3Rpb249XFxcIiNcXFwiIGRhdGEtc2V0dGluZy1uYW1lPVxcXCJsaW5lLWhlaWdodFxcXCI+XFxuICAgICAgICA8YnV0dG9uIHR5cGU9XFxcInJlc2V0XFxcIiBjbGFzcz1cXFwib21vLXdpZGdldF9fcmVzZXRcXFwiPlxcbiAgICAgICAgICA8c3ZnIHZpZXdCb3g9XFxcIjAgMCAyNSAyNVxcXCI+XFxuICAgICAgICAgICAgPHBhdGggaWQ9XFxcInJlc2V0XFxcIiBmaWxsPVxcXCJ2YXIoLS1zdmdGaWxsKVxcXCJcXG4gICAgICAgICAgICAgIGQ9XFxcIk02IDNDNS4zIDIuMyA0LjYgMS41IDMuNy42Yy0uMiAyLjUtLjQgNC45LS43IDcuMyAyLjYuMSA1IC4yIDcuNy4yLS45LTEtMS43LTEuOC0yLjUtMi43IDIuNi0xLjQgNi41LS43IDguOSAxLjYgMi43IDIuNSAzLjQgNi41IDEuOSA5LjctMS42IDMuMi01LjIgNS4xLTguNyA0LjYtMy4xLS41LTYuOC0zLjEtNy4xLTguMmgtM2MtLjMgMy41IDIuMSA4LjIgNi40IDEwLjIgNC42IDIuMiAxMC4zIDEgMTMuNi0yLjggMy40LTQuMSAzLjctOS43LjYtMTRDMTguMyAyLjggMTIuNS0uMiA2IDN6XFxcIlxcbiAgICAgICAgICAgICAgZmlsbC1ydWxlPVxcXCJub256ZXJvXFxcIiAvPlxcbiAgICAgICAgICA8L3N2Zz5cXG4gICAgICAgICAgPCEtLSA8c3ZnIHdpZHRoPVxcXCIyM1xcXCIgaGVpZ2h0PVxcXCIyNVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj5cXG4gICAgICAgICAgICAgIDxwYXRoXFxuICAgICAgICAgICAgICAgIGlkPVxcXCJyZXNldFxcXCJcXG4gICAgICAgICAgICAgICAgZmlsbD1cXFwidmFyKC0tc3ZnRmlsbClcXFwiXFxuICAgICAgICAgICAgICAgIGQ9XFxcIk02IDNDNS4zIDIuMyA0LjYgMS41IDMuNy42Yy0uMiAyLjUtLjQgNC45LS43IDcuMyAyLjYuMSA1IC4yIDcuNy4yLS45LTEtMS43LTEuOC0yLjUtMi43IDIuNi0xLjQgNi41LS43IDguOSAxLjYgMi43IDIuNSAzLjQgNi41IDEuOSA5LjctMS42IDMuMi01LjIgNS4xLTguNyA0LjYtMy4xLS41LTYuOC0zLjEtNy4xLTguMmgtM2MtLjMgMy41IDIuMSA4LjIgNi40IDEwLjIgNC42IDIuMiAxMC4zIDEgMTMuNi0yLjggMy40LTQuMSAzLjctOS43LjYtMTRDMTguMyAyLjggMTIuNS0uMiA2IDN6XFxcIlxcbiAgICAgICAgICAgICAgICBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiXFxuICAgICAgICAgICAgICAvPlxcbiAgICAgICAgICAgIDwvc3ZnPiAtLT5cXG4gICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIHRhYmluZGV4PVxcXCItMVxcXCIgY2xhc3M9XFxcIm9tby13aWRnZXRfX2FkZFxcXCI+KzwvYnV0dG9uPlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIHRhYmluZGV4PVxcXCItMVxcXCIgY2xhc3M9XFxcIm9tby13aWRnZXRfX3N1YnN0cmFjdFxcXCI+XFxuICAgICAgICAgIC1cXG4gICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgPGlucHV0IGlkPVxcXCJ0b3RlbV9iaGVpZ2h0XFxcIiB0eXBlPVxcXCJudW1iZXJcXFwiIGNsYXNzPVxcXCJvbW8td2lkZ2V0X19vcHRpb24tdmFsdWVcXFwiIHZhbHVlPVxcXCIwXFxcIiBtaW49XFxcIjFcXFwiIG1heD1cXFwiNFxcXCJcXG4gICAgICAgICAgbmFtZT1cXFwidG90ZW1fYmhlaWdodFxcXCIgLz5cXG4gICAgICA8L2Zvcm0+XFxuICAgIDwvZmllbGRzZXQ+XFxuICAgIDxmaWVsZHNldCBpZD1cXFwic2VsZWN0ZWRCYWNrcm91bmRcXFwiIGRhdGEtc2V0dGluZy1uYW1lPVxcXCJiYWNrZ3JvdW5kXFxcIj5cXG4gICAgICA8bGVnZW5kPkJhY2tncm91bmQ8L2xlZ2VuZD5cXG4gICAgICA8aW5wdXQgdHlwZT1cXFwicmFkaW9cXFwiIGNsYXNzPVxcXCJvbW8td2lkZ2V0X190b2dnbGUtb3B0aW9uc1xcXCIgYXJpYS1zZWxlY3RlZD1cXFwiZmFsc2VcXFwiIG5hbWU9XFxcIm9wdGlvbi1vcGVuZWRcXFwiIHZhbHVlPVxcXCI0XFxcIlxcbiAgICAgICAgdGl0bGU9XFxcIkJhY2tncm91bmRcXFwiIC8+XFxuICAgICAgPGZvcm0gYWN0aW9uPVxcXCIjXFxcIj5cXG4gICAgICAgIDxidXR0b24gdHlwZT1cXFwicmVzZXRcXFwiIGNsYXNzPVxcXCJvbW8td2lkZ2V0X19yZXNldFxcXCI+XFxuICAgICAgICAgIDxzdmcgdmlld0JveD1cXFwiMCAwIDI1IDI1XFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBpZD1cXFwicmVzZXRcXFwiIGZpbGw9XFxcInZhcigtLXN2Z0ZpbGwpXFxcIlxcbiAgICAgICAgICAgICAgZD1cXFwiTTYgM0M1LjMgMi4zIDQuNiAxLjUgMy43LjZjLS4yIDIuNS0uNCA0LjktLjcgNy4zIDIuNi4xIDUgLjIgNy43LjItLjktMS0xLjctMS44LTIuNS0yLjcgMi42LTEuNCA2LjUtLjcgOC45IDEuNiAyLjcgMi41IDMuNCA2LjUgMS45IDkuNy0xLjYgMy4yLTUuMiA1LjEtOC43IDQuNi0zLjEtLjUtNi44LTMuMS03LjEtOC4yaC0zYy0uMyAzLjUgMi4xIDguMiA2LjQgMTAuMiA0LjYgMi4yIDEwLjMgMSAxMy42LTIuOCAzLjQtNC4xIDMuNy05LjcuNi0xNEMxOC4zIDIuOCAxMi41LS4yIDYgM3pcXFwiXFxuICAgICAgICAgICAgICBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiIC8+XFxuICAgICAgICAgIDwvc3ZnPlxcbiAgICAgICAgPC9idXR0b24+XFxuICAgICAgICA8aW5wdXQgY2xhc3M9XFxcIm9tby13aWRnZXRfX2JhY2tncm91bmQtY2hvaWNlXFxcIiB0eXBlPVxcXCJyYWRpb1xcXCIgbmFtZT1cXFwiYmFja2dyb3VuZFxcXCIgcmVxdWlyZWQgdmFsdWU9XFxcIjBcXFwiIC8+XFxuICAgICAgICA8aW5wdXQgY2xhc3M9XFxcIm9tby13aWRnZXRfX2JhY2tncm91bmQtY2hvaWNlXFxcIiB0eXBlPVxcXCJyYWRpb1xcXCIgbmFtZT1cXFwiYmFja2dyb3VuZFxcXCIgcmVxdWlyZWQgdmFsdWU9XFxcIjFcXFwiIC8+XFxuICAgICAgICA8aW5wdXQgY2xhc3M9XFxcIm9tby13aWRnZXRfX2JhY2tncm91bmQtY2hvaWNlXFxcIiB0eXBlPVxcXCJyYWRpb1xcXCIgbmFtZT1cXFwiYmFja2dyb3VuZFxcXCIgcmVxdWlyZWQgdmFsdWU9XFxcIjJcXFwiIC8+XFxuICAgICAgICA8aW5wdXQgY2xhc3M9XFxcIm9tby13aWRnZXRfX2JhY2tncm91bmQtY2hvaWNlXFxcIiB0eXBlPVxcXCJyYWRpb1xcXCIgbmFtZT1cXFwiYmFja2dyb3VuZFxcXCIgcmVxdWlyZWQgdmFsdWU9XFxcIjNcXFwiIC8+XFxuICAgICAgICA8aW5wdXQgY2xhc3M9XFxcIm9tby13aWRnZXRfX2JhY2tncm91bmQtY2hvaWNlXFxcIiB0eXBlPVxcXCJyYWRpb1xcXCIgbmFtZT1cXFwiYmFja2dyb3VuZFxcXCIgcmVxdWlyZWQgdmFsdWU9XFxcIjRcXFwiIC8+XFxuICAgICAgICA8aW5wdXQgY2xhc3M9XFxcIm9tby13aWRnZXRfX2JhY2tncm91bmQtY2hvaWNlXFxcIiB0eXBlPVxcXCJyYWRpb1xcXCIgbmFtZT1cXFwiYmFja2dyb3VuZFxcXCIgcmVxdWlyZWQgdmFsdWU9XFxcIjVcXFwiIC8+XFxuICAgICAgPC9mb3JtPlxcbiAgICA8L2ZpZWxkc2V0PlxcbiAgICA8ZmllbGRzZXQgY2xhc3M9XFxcIm9tby13aWRnZXRfX3Bvd2VyLXRvZ2dsZS13cmFwXFxcIiBkYXRhLXNldHRpbmctbmFtZT1cXFwid2lkZ2V0LWFjdGl2ZVxcXCI+XFxuICAgICAgPGlucHV0IGlkPVxcXCJhcHBseU92ZXJpZGVzXFxcIiBjbGFzcz1cXFwib21vLXdpZGdldF9fcG93ZXItdG9nZ2xlXFxcIiB0eXBlPVxcXCJjaGVja2JveFxcXCIgdGl0bGU9XFxcIlRvZ2dsZSBvcHRpb25zXFxcIiAvPlxcbiAgICAgIDxzdmcgdmlld0JveD1cXFwiMCAwIDI0IDI5XFxcIj5cXG4gICAgICAgIDxnIGlkPVxcXCJwb3dlclxcXCIgZmlsbD1cXFwidmFyKC0tc3ZnRmlsbClcXFwiIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCI+XFxuICAgICAgICAgIDxwYXRoXFxuICAgICAgICAgICAgZD1cXFwiTTIwLjM5NyA3LjgyNGM2LjI0NiA2Ljc3MyAxLjg2NiAxNy40NTUtNy4zNzYgMTcuODA5LTkuNTE5LjM2My0xMy4yNjMtMTEuNDI2LTcuMzc2LTE3LjgxIDEuMDktMS4xODEtLjY3My0yLjk1NC0xLjc2OC0xLjc2Ny03LjczNiA4LjM4Ny0yLjI5NyAyMS42MzkgOS4xNDQgMjIuMDc3IDExLjc3Ny40NDkgMTYuNDM1LTE0LjE3IDkuMTQ0LTIyLjA3Ny0xLjA5Ni0xLjE4Ny0yLjg2LjU4Ni0xLjc2OCAxLjc2OFxcXCIgLz5cXG4gICAgICAgICAgPHBhdGggZD1cXFwiTTExLjc3IDEuNzE4djEwLjQ0NWMwIDEuNjEyIDIuNSAxLjYxMiAyLjUgMFYxLjcxOGMwLTEuNjEzLTIuNS0xLjYxMy0yLjUgMFxcXCIgLz5cXG4gICAgICAgIDwvZz5cXG4gICAgICA8L3N2Zz5cXG4gICAgPC9maWVsZHNldD5cXG4gICAgPGRpdiBjbGFzcz1cXFwib21vLXdpZGdldF9fbGluay13cmFwXFxcIj5cXG4gICAgICA8YSBocmVmPVxcXCJodHRwczovL29tb2xhYi5jb20vXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCIgZGF0YS1zZXR0aW5nLW5hbWU9XFxcIndpZGdldC1pbmZvXFxcIiB0aXRsZT1cXFwiRmluZCBvdXQgbW9yZVxcXCI+XFxuICAgICAgICA8c3ZnIHZpZXdCb3g9XFxcIjAgMCAxMCAzMVxcXCI+XFxuICAgICAgICAgIDxnIGlkPVxcXCJpbmZvXFxcIiBmaWxsPVxcXCJ2YXIoLS1zdmdGaWxsKVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj5cXG4gICAgICAgICAgICA8cGF0aFxcbiAgICAgICAgICAgICAgZD1cXFwiTTkuNTM1IDE3LjQ2OGE0LjQ0MiA0LjQ0MiAwIDAwLTQuNDQzLTQuNDQgNC40NDMgNC40NDMgMCAwMC00LjQ0NSA0LjQ0djguODlhNC40NDMgNC40NDMgMCAwMDQuNDQ1IDQuNDQgNC40NDIgNC40NDIgMCAwMDQuNDQzLTQuNDR2LTguODl6TTkuNTM1IDUuMjQyQTQuNDQzIDQuNDQzIDAgMTEuNjQ4IDUuMjRhNC40NDMgNC40NDMgMCAwMTguODg3IDBcXFwiIC8+XFxuICAgICAgICAgIDwvZz5cXG4gICAgICAgIDwvc3ZnPlxcbiAgICAgIDwvYT5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG4gIDwhLS0gPHNjcmlwdCBzcmM9XFxcIi4vdG90ZW1XaWRnZXQuanNcXFwiPjwvc2NyaXB0PlxcbiAgICA8c2NyaXB0PlxcbiAgICAgIGluaXRPbW9XaWRnZXRDb250cm9scygpO1xcbiAgICA8L3NjcmlwdD4gLS0+XFxuPC9ib2R5PlxcblxcbjwvaHRtbD5cIjsiLCIvKiFcbiAqIEBvdmVydmlldyBlczYtcHJvbWlzZSAtIGEgdGlueSBpbXBsZW1lbnRhdGlvbiBvZiBQcm9taXNlcy9BKy5cbiAqIEBjb3B5cmlnaHQgQ29weXJpZ2h0IChjKSAyMDE0IFllaHVkYSBLYXR6LCBUb20gRGFsZSwgU3RlZmFuIFBlbm5lciBhbmQgY29udHJpYnV0b3JzIChDb252ZXJzaW9uIHRvIEVTNiBBUEkgYnkgSmFrZSBBcmNoaWJhbGQpXG4gKiBAbGljZW5zZSAgIExpY2Vuc2VkIHVuZGVyIE1JVCBsaWNlbnNlXG4gKiAgICAgICAgICAgIFNlZSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc3RlZmFucGVubmVyL2VzNi1wcm9taXNlL21hc3Rlci9MSUNFTlNFXG4gKiBAdmVyc2lvbiAgIDMuMy4xXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLkVTNlByb21pc2UgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG9iamVjdE9yRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHggPT09ICdvYmplY3QnICYmIHggIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG59XG5cbnZhciBfaXNBcnJheSA9IHVuZGVmaW5lZDtcbmlmICghQXJyYXkuaXNBcnJheSkge1xuICBfaXNBcnJheSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcbn0gZWxzZSB7XG4gIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbn1cblxudmFyIGlzQXJyYXkgPSBfaXNBcnJheTtcblxudmFyIGxlbiA9IDA7XG52YXIgdmVydHhOZXh0ID0gdW5kZWZpbmVkO1xudmFyIGN1c3RvbVNjaGVkdWxlckZuID0gdW5kZWZpbmVkO1xuXG52YXIgYXNhcCA9IGZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGFyZykge1xuICBxdWV1ZVtsZW5dID0gY2FsbGJhY2s7XG4gIHF1ZXVlW2xlbiArIDFdID0gYXJnO1xuICBsZW4gKz0gMjtcbiAgaWYgKGxlbiA9PT0gMikge1xuICAgIC8vIElmIGxlbiBpcyAyLCB0aGF0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byBzY2hlZHVsZSBhbiBhc3luYyBmbHVzaC5cbiAgICAvLyBJZiBhZGRpdGlvbmFsIGNhbGxiYWNrcyBhcmUgcXVldWVkIGJlZm9yZSB0aGUgcXVldWUgaXMgZmx1c2hlZCwgdGhleVxuICAgIC8vIHdpbGwgYmUgcHJvY2Vzc2VkIGJ5IHRoaXMgZmx1c2ggdGhhdCB3ZSBhcmUgc2NoZWR1bGluZy5cbiAgICBpZiAoY3VzdG9tU2NoZWR1bGVyRm4pIHtcbiAgICAgIGN1c3RvbVNjaGVkdWxlckZuKGZsdXNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZWR1bGVGbHVzaCgpO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2NoZWR1bGVyKHNjaGVkdWxlRm4pIHtcbiAgY3VzdG9tU2NoZWR1bGVyRm4gPSBzY2hlZHVsZUZuO1xufVxuXG5mdW5jdGlvbiBzZXRBc2FwKGFzYXBGbikge1xuICBhc2FwID0gYXNhcEZuO1xufVxuXG52YXIgYnJvd3NlcldpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdW5kZWZpbmVkO1xudmFyIGJyb3dzZXJHbG9iYWwgPSBicm93c2VyV2luZG93IHx8IHt9O1xudmFyIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID0gYnJvd3Nlckdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGJyb3dzZXJHbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBpc05vZGUgPSB0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICh7fSkudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nO1xuXG4vLyB0ZXN0IGZvciB3ZWIgd29ya2VyIGJ1dCBub3QgaW4gSUUxMFxudmFyIGlzV29ya2VyID0gdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgaW1wb3J0U2NyaXB0cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIE1lc3NhZ2VDaGFubmVsICE9PSAndW5kZWZpbmVkJztcblxuLy8gbm9kZVxuZnVuY3Rpb24gdXNlTmV4dFRpY2soKSB7XG4gIC8vIG5vZGUgdmVyc2lvbiAwLjEwLnggZGlzcGxheXMgYSBkZXByZWNhdGlvbiB3YXJuaW5nIHdoZW4gbmV4dFRpY2sgaXMgdXNlZCByZWN1cnNpdmVseVxuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2N1am9qcy93aGVuL2lzc3Vlcy80MTAgZm9yIGRldGFpbHNcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gIH07XG59XG5cbi8vIHZlcnR4XG5mdW5jdGlvbiB1c2VWZXJ0eFRpbWVyKCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZlcnR4TmV4dChmbHVzaCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzZU11dGF0aW9uT2JzZXJ2ZXIoKSB7XG4gIHZhciBpdGVyYXRpb25zID0gMDtcbiAgdmFyIG9ic2VydmVyID0gbmV3IEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKGZsdXNoKTtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gIG9ic2VydmVyLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgbm9kZS5kYXRhID0gaXRlcmF0aW9ucyA9ICsraXRlcmF0aW9ucyAlIDI7XG4gIH07XG59XG5cbi8vIHdlYiB3b3JrZXJcbmZ1bmN0aW9uIHVzZU1lc3NhZ2VDaGFubmVsKCkge1xuICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZsdXNoO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1c2VTZXRUaW1lb3V0KCkge1xuICAvLyBTdG9yZSBzZXRUaW1lb3V0IHJlZmVyZW5jZSBzbyBlczYtcHJvbWlzZSB3aWxsIGJlIHVuYWZmZWN0ZWQgYnlcbiAgLy8gb3RoZXIgY29kZSBtb2RpZnlpbmcgc2V0VGltZW91dCAobGlrZSBzaW5vbi51c2VGYWtlVGltZXJzKCkpXG4gIHZhciBnbG9iYWxTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2xvYmFsU2V0VGltZW91dChmbHVzaCwgMSk7XG4gIH07XG59XG5cbnZhciBxdWV1ZSA9IG5ldyBBcnJheSgxMDAwKTtcbmZ1bmN0aW9uIGZsdXNoKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gcXVldWVbaV07XG4gICAgdmFyIGFyZyA9IHF1ZXVlW2kgKyAxXTtcblxuICAgIGNhbGxiYWNrKGFyZyk7XG5cbiAgICBxdWV1ZVtpXSA9IHVuZGVmaW5lZDtcbiAgICBxdWV1ZVtpICsgMV0gPSB1bmRlZmluZWQ7XG4gIH1cblxuICBsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBhdHRlbXB0VmVydHgoKSB7XG4gIHRyeSB7XG4gICAgdmFyIHIgPSByZXF1aXJlO1xuICAgIHZhciB2ZXJ0eCA9IHIoJ3ZlcnR4Jyk7XG4gICAgdmVydHhOZXh0ID0gdmVydHgucnVuT25Mb29wIHx8IHZlcnR4LnJ1bk9uQ29udGV4dDtcbiAgICByZXR1cm4gdXNlVmVydHhUaW1lcigpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHVzZVNldFRpbWVvdXQoKTtcbiAgfVxufVxuXG52YXIgc2NoZWR1bGVGbHVzaCA9IHVuZGVmaW5lZDtcbi8vIERlY2lkZSB3aGF0IGFzeW5jIG1ldGhvZCB0byB1c2UgdG8gdHJpZ2dlcmluZyBwcm9jZXNzaW5nIG9mIHF1ZXVlZCBjYWxsYmFja3M6XG5pZiAoaXNOb2RlKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VOZXh0VGljaygpO1xufSBlbHNlIGlmIChCcm93c2VyTXV0YXRpb25PYnNlcnZlcikge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlTXV0YXRpb25PYnNlcnZlcigpO1xufSBlbHNlIGlmIChpc1dvcmtlcikge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlTWVzc2FnZUNoYW5uZWwoKTtcbn0gZWxzZSBpZiAoYnJvd3NlcldpbmRvdyA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSBhdHRlbXB0VmVydHgoKTtcbn0gZWxzZSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VTZXRUaW1lb3V0KCk7XG59XG5cbmZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pIHtcbiAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHM7XG5cbiAgdmFyIHBhcmVudCA9IHRoaXM7XG5cbiAgdmFyIGNoaWxkID0gbmV3IHRoaXMuY29uc3RydWN0b3Iobm9vcCk7XG5cbiAgaWYgKGNoaWxkW1BST01JU0VfSURdID09PSB1bmRlZmluZWQpIHtcbiAgICBtYWtlUHJvbWlzZShjaGlsZCk7XG4gIH1cblxuICB2YXIgX3N0YXRlID0gcGFyZW50Ll9zdGF0ZTtcblxuICBpZiAoX3N0YXRlKSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjYWxsYmFjayA9IF9hcmd1bWVudHNbX3N0YXRlIC0gMV07XG4gICAgICBhc2FwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGludm9rZUNhbGxiYWNrKF9zdGF0ZSwgY2hpbGQsIGNhbGxiYWNrLCBwYXJlbnQuX3Jlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9KSgpO1xuICB9IGVsc2Uge1xuICAgIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbik7XG4gIH1cblxuICByZXR1cm4gY2hpbGQ7XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yZXNvbHZlYCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgYmVjb21lIHJlc29sdmVkIHdpdGggdGhlXG4gIHBhc3NlZCBgdmFsdWVgLiBJdCBpcyBzaG9ydGhhbmQgZm9yIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVzb2x2ZSgxKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoMSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZXNvbHZlXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBbnl9IHZhbHVlIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCB3aXRoXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgZnVsZmlsbGVkIHdpdGggdGhlIGdpdmVuXG4gIGB2YWx1ZWBcbiovXG5mdW5jdGlvbiByZXNvbHZlKG9iamVjdCkge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuXG4gIGlmIChvYmplY3QgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0LmNvbnN0cnVjdG9yID09PSBDb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cblxuICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcbiAgX3Jlc29sdmUocHJvbWlzZSwgb2JqZWN0KTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbnZhciBQUk9NSVNFX0lEID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDE2KTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnZhciBQRU5ESU5HID0gdm9pZCAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xuXG52YXIgR0VUX1RIRU5fRVJST1IgPSBuZXcgRXJyb3JPYmplY3QoKTtcblxuZnVuY3Rpb24gc2VsZkZ1bGZpbGxtZW50KCkge1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIllvdSBjYW5ub3QgcmVzb2x2ZSBhIHByb21pc2Ugd2l0aCBpdHNlbGZcIik7XG59XG5cbmZ1bmN0aW9uIGNhbm5vdFJldHVybk93bigpIHtcbiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoJ0EgcHJvbWlzZXMgY2FsbGJhY2sgY2Fubm90IHJldHVybiB0aGF0IHNhbWUgcHJvbWlzZS4nKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGhlbihwcm9taXNlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBHRVRfVEhFTl9FUlJPUi5lcnJvciA9IGVycm9yO1xuICAgIHJldHVybiBHRVRfVEhFTl9FUlJPUjtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cnlUaGVuKHRoZW4sIHZhbHVlLCBmdWxmaWxsbWVudEhhbmRsZXIsIHJlamVjdGlvbkhhbmRsZXIpIHtcbiAgdHJ5IHtcbiAgICB0aGVuLmNhbGwodmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVGb3JlaWduVGhlbmFibGUocHJvbWlzZSwgdGhlbmFibGUsIHRoZW4pIHtcbiAgYXNhcChmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgIHZhciBzZWFsZWQgPSBmYWxzZTtcbiAgICB2YXIgZXJyb3IgPSB0cnlUaGVuKHRoZW4sIHRoZW5hYmxlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChzZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VhbGVkID0gdHJ1ZTtcbiAgICAgIGlmICh0aGVuYWJsZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuXG4gICAgICBfcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSwgJ1NldHRsZTogJyArIChwcm9taXNlLl9sYWJlbCB8fCAnIHVua25vd24gcHJvbWlzZScpKTtcblxuICAgIGlmICghc2VhbGVkICYmIGVycm9yKSB7XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgX3JlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgfVxuICB9LCBwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlT3duVGhlbmFibGUocHJvbWlzZSwgdGhlbmFibGUpIHtcbiAgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gRlVMRklMTEVEKSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgfSBlbHNlIGlmICh0aGVuYWJsZS5fc3RhdGUgPT09IFJFSkVDVEVEKSB7XG4gICAgX3JlamVjdChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgfSBlbHNlIHtcbiAgICBzdWJzY3JpYmUodGhlbmFibGUsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiBfcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlLCB0aGVuJCQpIHtcbiAgaWYgKG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IgPT09IHByb21pc2UuY29uc3RydWN0b3IgJiYgdGhlbiQkID09PSB0aGVuICYmIG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IucmVzb2x2ZSA9PT0gcmVzb2x2ZSkge1xuICAgIGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0aGVuJCQgPT09IEdFVF9USEVOX0VSUk9SKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIEdFVF9USEVOX0VSUk9SLmVycm9yKTtcbiAgICB9IGVsc2UgaWYgKHRoZW4kJCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih0aGVuJCQpKSB7XG4gICAgICBoYW5kbGVGb3JlaWduVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSwgdGhlbiQkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpIHtcbiAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgX3JlamVjdChwcm9taXNlLCBzZWxmRnVsZmlsbG1lbnQoKSk7XG4gIH0gZWxzZSBpZiAob2JqZWN0T3JGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIHZhbHVlLCBnZXRUaGVuKHZhbHVlKSk7XG4gIH0gZWxzZSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVibGlzaFJlamVjdGlvbihwcm9taXNlKSB7XG4gIGlmIChwcm9taXNlLl9vbmVycm9yKSB7XG4gICAgcHJvbWlzZS5fb25lcnJvcihwcm9taXNlLl9yZXN1bHQpO1xuICB9XG5cbiAgcHVibGlzaChwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gZnVsZmlsbChwcm9taXNlLCB2YWx1ZSkge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9taXNlLl9yZXN1bHQgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fc3RhdGUgPSBGVUxGSUxMRUQ7XG5cbiAgaWYgKHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzYXAocHVibGlzaCwgcHJvbWlzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3JlamVjdChwcm9taXNlLCByZWFzb24pIHtcbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHByb21pc2UuX3N0YXRlID0gUkVKRUNURUQ7XG4gIHByb21pc2UuX3Jlc3VsdCA9IHJlYXNvbjtcblxuICBhc2FwKHB1Ymxpc2hSZWplY3Rpb24sIHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmUocGFyZW50LCBjaGlsZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pIHtcbiAgdmFyIF9zdWJzY3JpYmVycyA9IHBhcmVudC5fc3Vic2NyaWJlcnM7XG4gIHZhciBsZW5ndGggPSBfc3Vic2NyaWJlcnMubGVuZ3RoO1xuXG4gIHBhcmVudC5fb25lcnJvciA9IG51bGw7XG5cbiAgX3N1YnNjcmliZXJzW2xlbmd0aF0gPSBjaGlsZDtcbiAgX3N1YnNjcmliZXJzW2xlbmd0aCArIEZVTEZJTExFRF0gPSBvbkZ1bGZpbGxtZW50O1xuICBfc3Vic2NyaWJlcnNbbGVuZ3RoICsgUkVKRUNURURdID0gb25SZWplY3Rpb247XG5cbiAgaWYgKGxlbmd0aCA9PT0gMCAmJiBwYXJlbnQuX3N0YXRlKSB7XG4gICAgYXNhcChwdWJsaXNoLCBwYXJlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2gocHJvbWlzZSkge1xuICB2YXIgc3Vic2NyaWJlcnMgPSBwcm9taXNlLl9zdWJzY3JpYmVycztcbiAgdmFyIHNldHRsZWQgPSBwcm9taXNlLl9zdGF0ZTtcblxuICBpZiAoc3Vic2NyaWJlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGNoaWxkID0gdW5kZWZpbmVkLFxuICAgICAgY2FsbGJhY2sgPSB1bmRlZmluZWQsXG4gICAgICBkZXRhaWwgPSBwcm9taXNlLl9yZXN1bHQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzY3JpYmVycy5sZW5ndGg7IGkgKz0gMykge1xuICAgIGNoaWxkID0gc3Vic2NyaWJlcnNbaV07XG4gICAgY2FsbGJhY2sgPSBzdWJzY3JpYmVyc1tpICsgc2V0dGxlZF07XG5cbiAgICBpZiAoY2hpbGQpIHtcbiAgICAgIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIGNoaWxkLCBjYWxsYmFjaywgZGV0YWlsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soZGV0YWlsKTtcbiAgICB9XG4gIH1cblxuICBwcm9taXNlLl9zdWJzY3JpYmVycy5sZW5ndGggPSAwO1xufVxuXG5mdW5jdGlvbiBFcnJvck9iamVjdCgpIHtcbiAgdGhpcy5lcnJvciA9IG51bGw7XG59XG5cbnZhciBUUllfQ0FUQ0hfRVJST1IgPSBuZXcgRXJyb3JPYmplY3QoKTtcblxuZnVuY3Rpb24gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCkge1xuICB0cnkge1xuICAgIHJldHVybiBjYWxsYmFjayhkZXRhaWwpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgVFJZX0NBVENIX0VSUk9SLmVycm9yID0gZTtcbiAgICByZXR1cm4gVFJZX0NBVENIX0VSUk9SO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIHByb21pc2UsIGNhbGxiYWNrLCBkZXRhaWwpIHtcbiAgdmFyIGhhc0NhbGxiYWNrID0gaXNGdW5jdGlvbihjYWxsYmFjayksXG4gICAgICB2YWx1ZSA9IHVuZGVmaW5lZCxcbiAgICAgIGVycm9yID0gdW5kZWZpbmVkLFxuICAgICAgc3VjY2VlZGVkID0gdW5kZWZpbmVkLFxuICAgICAgZmFpbGVkID0gdW5kZWZpbmVkO1xuXG4gIGlmIChoYXNDYWxsYmFjaykge1xuICAgIHZhbHVlID0gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCk7XG5cbiAgICBpZiAodmFsdWUgPT09IFRSWV9DQVRDSF9FUlJPUikge1xuICAgICAgZmFpbGVkID0gdHJ1ZTtcbiAgICAgIGVycm9yID0gdmFsdWUuZXJyb3I7XG4gICAgICB2YWx1ZSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1Y2NlZWRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIGNhbm5vdFJldHVybk93bigpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBkZXRhaWw7XG4gICAgc3VjY2VlZGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgIC8vIG5vb3BcbiAgfSBlbHNlIGlmIChoYXNDYWxsYmFjayAmJiBzdWNjZWVkZWQpIHtcbiAgICAgIF9yZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGZhaWxlZCkge1xuICAgICAgX3JlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBGVUxGSUxMRUQpIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gUkVKRUNURUQpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZVByb21pc2UocHJvbWlzZSwgcmVzb2x2ZXIpIHtcbiAgdHJ5IHtcbiAgICByZXNvbHZlcihmdW5jdGlvbiByZXNvbHZlUHJvbWlzZSh2YWx1ZSkge1xuICAgICAgX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIHJlamVjdFByb21pc2UocmVhc29uKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBfcmVqZWN0KHByb21pc2UsIGUpO1xuICB9XG59XG5cbnZhciBpZCA9IDA7XG5mdW5jdGlvbiBuZXh0SWQoKSB7XG4gIHJldHVybiBpZCsrO1xufVxuXG5mdW5jdGlvbiBtYWtlUHJvbWlzZShwcm9taXNlKSB7XG4gIHByb21pc2VbUFJPTUlTRV9JRF0gPSBpZCsrO1xuICBwcm9taXNlLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgcHJvbWlzZS5fcmVzdWx0ID0gdW5kZWZpbmVkO1xuICBwcm9taXNlLl9zdWJzY3JpYmVycyA9IFtdO1xufVxuXG5mdW5jdGlvbiBFbnVtZXJhdG9yKENvbnN0cnVjdG9yLCBpbnB1dCkge1xuICB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcblxuICBpZiAoIXRoaXMucHJvbWlzZVtQUk9NSVNFX0lEXSkge1xuICAgIG1ha2VQcm9taXNlKHRoaXMucHJvbWlzZSk7XG4gIH1cblxuICBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xuICAgIHRoaXMubGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICAgIHRoaXMuX3JlbWFpbmluZyA9IGlucHV0Lmxlbmd0aDtcblxuICAgIHRoaXMuX3Jlc3VsdCA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxlbmd0aCA9IHRoaXMubGVuZ3RoIHx8IDA7XG4gICAgICB0aGlzLl9lbnVtZXJhdGUoKTtcbiAgICAgIGlmICh0aGlzLl9yZW1haW5pbmcgPT09IDApIHtcbiAgICAgICAgZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIF9yZWplY3QodGhpcy5wcm9taXNlLCB2YWxpZGF0aW9uRXJyb3IoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGlvbkVycm9yKCkge1xuICByZXR1cm4gbmV3IEVycm9yKCdBcnJheSBNZXRob2RzIG11c3QgYmUgcHJvdmlkZWQgYW4gQXJyYXknKTtcbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl9lbnVtZXJhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgdmFyIF9pbnB1dCA9IHRoaXMuX2lucHV0O1xuXG4gIGZvciAodmFyIGkgPSAwOyB0aGlzLl9zdGF0ZSA9PT0gUEVORElORyAmJiBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLl9lYWNoRW50cnkoX2lucHV0W2ldLCBpKTtcbiAgfVxufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX2VhY2hFbnRyeSA9IGZ1bmN0aW9uIChlbnRyeSwgaSkge1xuICB2YXIgYyA9IHRoaXMuX2luc3RhbmNlQ29uc3RydWN0b3I7XG4gIHZhciByZXNvbHZlJCQgPSBjLnJlc29sdmU7XG5cbiAgaWYgKHJlc29sdmUkJCA9PT0gcmVzb2x2ZSkge1xuICAgIHZhciBfdGhlbiA9IGdldFRoZW4oZW50cnkpO1xuXG4gICAgaWYgKF90aGVuID09PSB0aGVuICYmIGVudHJ5Ll9zdGF0ZSAhPT0gUEVORElORykge1xuICAgICAgdGhpcy5fc2V0dGxlZEF0KGVudHJ5Ll9zdGF0ZSwgaSwgZW50cnkuX3Jlc3VsdCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgX3RoZW4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuICAgICAgdGhpcy5fcmVzdWx0W2ldID0gZW50cnk7XG4gICAgfSBlbHNlIGlmIChjID09PSBQcm9taXNlKSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IG5ldyBjKG5vb3ApO1xuICAgICAgaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCBlbnRyeSwgX3RoZW4pO1xuICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KHByb21pc2UsIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl93aWxsU2V0dGxlQXQobmV3IGMoZnVuY3Rpb24gKHJlc29sdmUkJCkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSQkKGVudHJ5KTtcbiAgICAgIH0pLCBpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fd2lsbFNldHRsZUF0KHJlc29sdmUkJChlbnRyeSksIGkpO1xuICB9XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fc2V0dGxlZEF0ID0gZnVuY3Rpb24gKHN0YXRlLCBpLCB2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZTtcblxuICBpZiAocHJvbWlzZS5fc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICB0aGlzLl9yZW1haW5pbmctLTtcblxuICAgIGlmIChzdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yZXN1bHRbaV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICB9XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fd2lsbFNldHRsZUF0ID0gZnVuY3Rpb24gKHByb21pc2UsIGkpIHtcbiAgdmFyIGVudW1lcmF0b3IgPSB0aGlzO1xuXG4gIHN1YnNjcmliZShwcm9taXNlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBlbnVtZXJhdG9yLl9zZXR0bGVkQXQoRlVMRklMTEVELCBpLCB2YWx1ZSk7XG4gIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICByZXR1cm4gZW51bWVyYXRvci5fc2V0dGxlZEF0KFJFSkVDVEVELCBpLCByZWFzb24pO1xuICB9KTtcbn07XG5cbi8qKlxuICBgUHJvbWlzZS5hbGxgIGFjY2VwdHMgYW4gYXJyYXkgb2YgcHJvbWlzZXMsIGFuZCByZXR1cm5zIGEgbmV3IHByb21pc2Ugd2hpY2hcbiAgaXMgZnVsZmlsbGVkIHdpdGggYW4gYXJyYXkgb2YgZnVsZmlsbG1lbnQgdmFsdWVzIGZvciB0aGUgcGFzc2VkIHByb21pc2VzLCBvclxuICByZWplY3RlZCB3aXRoIHRoZSByZWFzb24gb2YgdGhlIGZpcnN0IHBhc3NlZCBwcm9taXNlIHRvIGJlIHJlamVjdGVkLiBJdCBjYXN0cyBhbGxcbiAgZWxlbWVudHMgb2YgdGhlIHBhc3NlZCBpdGVyYWJsZSB0byBwcm9taXNlcyBhcyBpdCBydW5zIHRoaXMgYWxnb3JpdGhtLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSByZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSByZXNvbHZlKDIpO1xuICBsZXQgcHJvbWlzZTMgPSByZXNvbHZlKDMpO1xuICBsZXQgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gVGhlIGFycmF5IGhlcmUgd291bGQgYmUgWyAxLCAyLCAzIF07XG4gIH0pO1xuICBgYGBcblxuICBJZiBhbnkgb2YgdGhlIGBwcm9taXNlc2AgZ2l2ZW4gdG8gYGFsbGAgYXJlIHJlamVjdGVkLCB0aGUgZmlyc3QgcHJvbWlzZVxuICB0aGF0IGlzIHJlamVjdGVkIHdpbGwgYmUgZ2l2ZW4gYXMgYW4gYXJndW1lbnQgdG8gdGhlIHJldHVybmVkIHByb21pc2VzJ3NcbiAgcmVqZWN0aW9uIGhhbmRsZXIuIEZvciBleGFtcGxlOlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSByZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSByZWplY3QobmV3IEVycm9yKFwiMlwiKSk7XG4gIGxldCBwcm9taXNlMyA9IHJlamVjdChuZXcgRXJyb3IoXCIzXCIpKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zIGJlY2F1c2UgdGhlcmUgYXJlIHJlamVjdGVkIHByb21pc2VzIVxuICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgIC8vIGVycm9yLm1lc3NhZ2UgPT09IFwiMlwiXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIGFsbFxuICBAc3RhdGljXG4gIEBwYXJhbSB7QXJyYXl9IGVudHJpZXMgYXJyYXkgb2YgcHJvbWlzZXNcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgbGFiZWxpbmcgdGhlIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aGVuIGFsbCBgcHJvbWlzZXNgIGhhdmUgYmVlblxuICBmdWxmaWxsZWQsIG9yIHJlamVjdGVkIGlmIGFueSBvZiB0aGVtIGJlY29tZSByZWplY3RlZC5cbiAgQHN0YXRpY1xuKi9cbmZ1bmN0aW9uIGFsbChlbnRyaWVzKSB7XG4gIHJldHVybiBuZXcgRW51bWVyYXRvcih0aGlzLCBlbnRyaWVzKS5wcm9taXNlO1xufVxuXG4vKipcbiAgYFByb21pc2UucmFjZWAgcmV0dXJucyBhIG5ldyBwcm9taXNlIHdoaWNoIGlzIHNldHRsZWQgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZVxuICBmaXJzdCBwYXNzZWQgcHJvbWlzZSB0byBzZXR0bGUuXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAxJyk7XG4gICAgfSwgMjAwKTtcbiAgfSk7XG5cbiAgbGV0IHByb21pc2UyID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDInKTtcbiAgICB9LCAxMDApO1xuICB9KTtcblxuICBQcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyByZXN1bHQgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgaXQgd2FzIHJlc29sdmVkIGJlZm9yZSBwcm9taXNlMVxuICAgIC8vIHdhcyByZXNvbHZlZC5cbiAgfSk7XG4gIGBgYFxuXG4gIGBQcm9taXNlLnJhY2VgIGlzIGRldGVybWluaXN0aWMgaW4gdGhhdCBvbmx5IHRoZSBzdGF0ZSBvZiB0aGUgZmlyc3RcbiAgc2V0dGxlZCBwcm9taXNlIG1hdHRlcnMuIEZvciBleGFtcGxlLCBldmVuIGlmIG90aGVyIHByb21pc2VzIGdpdmVuIHRvIHRoZVxuICBgcHJvbWlzZXNgIGFycmF5IGFyZ3VtZW50IGFyZSByZXNvbHZlZCwgYnV0IHRoZSBmaXJzdCBzZXR0bGVkIHByb21pc2UgaGFzXG4gIGJlY29tZSByZWplY3RlZCBiZWZvcmUgdGhlIG90aGVyIHByb21pc2VzIGJlY2FtZSBmdWxmaWxsZWQsIHRoZSByZXR1cm5lZFxuICBwcm9taXNlIHdpbGwgYmVjb21lIHJlamVjdGVkOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDEnKTtcbiAgICB9LCAyMDApO1xuICB9KTtcblxuICBsZXQgcHJvbWlzZTIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ3Byb21pc2UgMicpKTtcbiAgICB9LCAxMDApO1xuICB9KTtcblxuICBQcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyBDb2RlIGhlcmUgbmV2ZXIgcnVuc1xuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAncHJvbWlzZSAyJyBiZWNhdXNlIHByb21pc2UgMiBiZWNhbWUgcmVqZWN0ZWQgYmVmb3JlXG4gICAgLy8gcHJvbWlzZSAxIGJlY2FtZSBmdWxmaWxsZWRcbiAgfSk7XG4gIGBgYFxuXG4gIEFuIGV4YW1wbGUgcmVhbC13b3JsZCB1c2UgY2FzZSBpcyBpbXBsZW1lbnRpbmcgdGltZW91dHM6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBQcm9taXNlLnJhY2UoW2FqYXgoJ2Zvby5qc29uJyksIHRpbWVvdXQoNTAwMCldKVxuICBgYGBcblxuICBAbWV0aG9kIHJhY2VcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FycmF5fSBwcm9taXNlcyBhcnJheSBvZiBwcm9taXNlcyB0byBvYnNlcnZlXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHdoaWNoIHNldHRsZXMgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZSBmaXJzdCBwYXNzZWRcbiAgcHJvbWlzZSB0byBzZXR0bGUuXG4qL1xuZnVuY3Rpb24gcmFjZShlbnRyaWVzKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgaWYgKCFpc0FycmF5KGVudHJpZXMpKSB7XG4gICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbiAoXywgcmVqZWN0KSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYW4gYXJyYXkgdG8gcmFjZS4nKSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZW50cmllcy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnJlc29sdmUoZW50cmllc1tpXSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yZWplY3RgIHJldHVybnMgYSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIHBhc3NlZCBgcmVhc29uYC5cbiAgSXQgaXMgc2hvcnRoYW5kIGZvciB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHJlamVjdChuZXcgRXJyb3IoJ1dIT09QUycpKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyBDb2RlIGhlcmUgZG9lc24ndCBydW4gYmVjYXVzZSB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCFcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ1dIT09QUydcbiAgfSk7XG4gIGBgYFxuXG4gIEluc3RlYWQgb2Ygd3JpdGluZyB0aGUgYWJvdmUsIHlvdXIgY29kZSBub3cgc2ltcGx5IGJlY29tZXMgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdXSE9PUFMnKSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyBDb2RlIGhlcmUgZG9lc24ndCBydW4gYmVjYXVzZSB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCFcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ1dIT09QUydcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgcmVqZWN0XG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBbnl9IHJlYXNvbiB2YWx1ZSB0aGF0IHRoZSByZXR1cm5lZCBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aC5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgZ2l2ZW4gYHJlYXNvbmAuXG4qL1xuZnVuY3Rpb24gcmVqZWN0KHJlYXNvbikge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcbiAgX3JlamVjdChwcm9taXNlLCByZWFzb24pO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gbmVlZHNSZXNvbHZlcigpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhIHJlc29sdmVyIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgcHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xufVxuXG5mdW5jdGlvbiBuZWVkc05ldygpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1Byb21pc2UnOiBQbGVhc2UgdXNlIHRoZSAnbmV3JyBvcGVyYXRvciwgdGhpcyBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbn1cblxuLyoqXG4gIFByb21pc2Ugb2JqZWN0cyByZXByZXNlbnQgdGhlIGV2ZW50dWFsIHJlc3VsdCBvZiBhbiBhc3luY2hyb25vdXMgb3BlcmF0aW9uLiBUaGVcbiAgcHJpbWFyeSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCBhIHByb21pc2UgaXMgdGhyb3VnaCBpdHMgYHRoZW5gIG1ldGhvZCwgd2hpY2hcbiAgcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2UncyBldmVudHVhbCB2YWx1ZSBvciB0aGUgcmVhc29uXG4gIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLlxuXG4gIFRlcm1pbm9sb2d5XG4gIC0tLS0tLS0tLS0tXG5cbiAgLSBgcHJvbWlzZWAgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIHdpdGggYSBgdGhlbmAgbWV0aG9kIHdob3NlIGJlaGF2aW9yIGNvbmZvcm1zIHRvIHRoaXMgc3BlY2lmaWNhdGlvbi5cbiAgLSBgdGhlbmFibGVgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB0aGF0IGRlZmluZXMgYSBgdGhlbmAgbWV0aG9kLlxuICAtIGB2YWx1ZWAgaXMgYW55IGxlZ2FsIEphdmFTY3JpcHQgdmFsdWUgKGluY2x1ZGluZyB1bmRlZmluZWQsIGEgdGhlbmFibGUsIG9yIGEgcHJvbWlzZSkuXG4gIC0gYGV4Y2VwdGlvbmAgaXMgYSB2YWx1ZSB0aGF0IGlzIHRocm93biB1c2luZyB0aGUgdGhyb3cgc3RhdGVtZW50LlxuICAtIGByZWFzb25gIGlzIGEgdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2h5IGEgcHJvbWlzZSB3YXMgcmVqZWN0ZWQuXG4gIC0gYHNldHRsZWRgIHRoZSBmaW5hbCByZXN0aW5nIHN0YXRlIG9mIGEgcHJvbWlzZSwgZnVsZmlsbGVkIG9yIHJlamVjdGVkLlxuXG4gIEEgcHJvbWlzZSBjYW4gYmUgaW4gb25lIG9mIHRocmVlIHN0YXRlczogcGVuZGluZywgZnVsZmlsbGVkLCBvciByZWplY3RlZC5cblxuICBQcm9taXNlcyB0aGF0IGFyZSBmdWxmaWxsZWQgaGF2ZSBhIGZ1bGZpbGxtZW50IHZhbHVlIGFuZCBhcmUgaW4gdGhlIGZ1bGZpbGxlZFxuICBzdGF0ZS4gIFByb21pc2VzIHRoYXQgYXJlIHJlamVjdGVkIGhhdmUgYSByZWplY3Rpb24gcmVhc29uIGFuZCBhcmUgaW4gdGhlXG4gIHJlamVjdGVkIHN0YXRlLiAgQSBmdWxmaWxsbWVudCB2YWx1ZSBpcyBuZXZlciBhIHRoZW5hYmxlLlxuXG4gIFByb21pc2VzIGNhbiBhbHNvIGJlIHNhaWQgdG8gKnJlc29sdmUqIGEgdmFsdWUuICBJZiB0aGlzIHZhbHVlIGlzIGFsc28gYVxuICBwcm9taXNlLCB0aGVuIHRoZSBvcmlnaW5hbCBwcm9taXNlJ3Mgc2V0dGxlZCBzdGF0ZSB3aWxsIG1hdGNoIHRoZSB2YWx1ZSdzXG4gIHNldHRsZWQgc3RhdGUuICBTbyBhIHByb21pc2UgdGhhdCAqcmVzb2x2ZXMqIGEgcHJvbWlzZSB0aGF0IHJlamVjdHMgd2lsbFxuICBpdHNlbGYgcmVqZWN0LCBhbmQgYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCBmdWxmaWxscyB3aWxsXG4gIGl0c2VsZiBmdWxmaWxsLlxuXG5cbiAgQmFzaWMgVXNhZ2U6XG4gIC0tLS0tLS0tLS0tLVxuXG4gIGBgYGpzXG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLy8gb24gc3VjY2Vzc1xuICAgIHJlc29sdmUodmFsdWUpO1xuXG4gICAgLy8gb24gZmFpbHVyZVxuICAgIHJlamVjdChyZWFzb24pO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAvLyBvbiBmdWxmaWxsbWVudFxuICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAvLyBvbiByZWplY3Rpb25cbiAgfSk7XG4gIGBgYFxuXG4gIEFkdmFuY2VkIFVzYWdlOlxuICAtLS0tLS0tLS0tLS0tLS1cblxuICBQcm9taXNlcyBzaGluZSB3aGVuIGFic3RyYWN0aW5nIGF3YXkgYXN5bmNocm9ub3VzIGludGVyYWN0aW9ucyBzdWNoIGFzXG4gIGBYTUxIdHRwUmVxdWVzdGBzLlxuXG4gIGBgYGpzXG4gIGZ1bmN0aW9uIGdldEpTT04odXJsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwpO1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGhhbmRsZXI7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICB4aHIuc2VuZCgpO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSB0aGlzLkRPTkUpIHtcbiAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignZ2V0SlNPTjogYCcgKyB1cmwgKyAnYCBmYWlsZWQgd2l0aCBzdGF0dXM6IFsnICsgdGhpcy5zdGF0dXMgKyAnXScpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBnZXRKU09OKCcvcG9zdHMuanNvbicpLnRoZW4oZnVuY3Rpb24oanNvbikge1xuICAgIC8vIG9uIGZ1bGZpbGxtZW50XG4gIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIC8vIG9uIHJlamVjdGlvblxuICB9KTtcbiAgYGBgXG5cbiAgVW5saWtlIGNhbGxiYWNrcywgcHJvbWlzZXMgYXJlIGdyZWF0IGNvbXBvc2FibGUgcHJpbWl0aXZlcy5cblxuICBgYGBqc1xuICBQcm9taXNlLmFsbChbXG4gICAgZ2V0SlNPTignL3Bvc3RzJyksXG4gICAgZ2V0SlNPTignL2NvbW1lbnRzJylcbiAgXSkudGhlbihmdW5jdGlvbih2YWx1ZXMpe1xuICAgIHZhbHVlc1swXSAvLyA9PiBwb3N0c0pTT05cbiAgICB2YWx1ZXNbMV0gLy8gPT4gY29tbWVudHNKU09OXG5cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9KTtcbiAgYGBgXG5cbiAgQGNsYXNzIFByb21pc2VcbiAgQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZXJcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAY29uc3RydWN0b3JcbiovXG5mdW5jdGlvbiBQcm9taXNlKHJlc29sdmVyKSB7XG4gIHRoaXNbUFJPTUlTRV9JRF0gPSBuZXh0SWQoKTtcbiAgdGhpcy5fcmVzdWx0ID0gdGhpcy5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3N1YnNjcmliZXJzID0gW107XG5cbiAgaWYgKG5vb3AgIT09IHJlc29sdmVyKSB7XG4gICAgdHlwZW9mIHJlc29sdmVyICE9PSAnZnVuY3Rpb24nICYmIG5lZWRzUmVzb2x2ZXIoKTtcbiAgICB0aGlzIGluc3RhbmNlb2YgUHJvbWlzZSA/IGluaXRpYWxpemVQcm9taXNlKHRoaXMsIHJlc29sdmVyKSA6IG5lZWRzTmV3KCk7XG4gIH1cbn1cblxuUHJvbWlzZS5hbGwgPSBhbGw7XG5Qcm9taXNlLnJhY2UgPSByYWNlO1xuUHJvbWlzZS5yZXNvbHZlID0gcmVzb2x2ZTtcblByb21pc2UucmVqZWN0ID0gcmVqZWN0O1xuUHJvbWlzZS5fc2V0U2NoZWR1bGVyID0gc2V0U2NoZWR1bGVyO1xuUHJvbWlzZS5fc2V0QXNhcCA9IHNldEFzYXA7XG5Qcm9taXNlLl9hc2FwID0gYXNhcDtcblxuUHJvbWlzZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQcm9taXNlLFxuXG4gIC8qKlxuICAgIFRoZSBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLFxuICAgIHdoaWNoIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlXG4gICAgcmVhc29uIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbih1c2VyKXtcbiAgICAgIC8vIHVzZXIgaXMgYXZhaWxhYmxlXG4gICAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIHVzZXIgaXMgdW5hdmFpbGFibGUsIGFuZCB5b3UgYXJlIGdpdmVuIHRoZSByZWFzb24gd2h5XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIENoYWluaW5nXG4gICAgLS0tLS0tLS1cbiAgXG4gICAgVGhlIHJldHVybiB2YWx1ZSBvZiBgdGhlbmAgaXMgaXRzZWxmIGEgcHJvbWlzZS4gIFRoaXMgc2Vjb25kLCAnZG93bnN0cmVhbSdcbiAgICBwcm9taXNlIGlzIHJlc29sdmVkIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZmlyc3QgcHJvbWlzZSdzIGZ1bGZpbGxtZW50XG4gICAgb3IgcmVqZWN0aW9uIGhhbmRsZXIsIG9yIHJlamVjdGVkIGlmIHRoZSBoYW5kbGVyIHRocm93cyBhbiBleGNlcHRpb24uXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICByZXR1cm4gdXNlci5uYW1lO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiAnZGVmYXVsdCBuYW1lJztcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh1c2VyTmFtZSkge1xuICAgICAgLy8gSWYgYGZpbmRVc2VyYCBmdWxmaWxsZWQsIGB1c2VyTmFtZWAgd2lsbCBiZSB0aGUgdXNlcidzIG5hbWUsIG90aGVyd2lzZSBpdFxuICAgICAgLy8gd2lsbCBiZSBgJ2RlZmF1bHQgbmFtZSdgXG4gICAgfSk7XG4gIFxuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgLy8gaWYgYGZpbmRVc2VyYCBmdWxmaWxsZWQsIGByZWFzb25gIHdpbGwgYmUgJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jy5cbiAgICAgIC8vIElmIGBmaW5kVXNlcmAgcmVqZWN0ZWQsIGByZWFzb25gIHdpbGwgYmUgJ2BmaW5kVXNlcmAgcmVqZWN0ZWQgYW5kIHdlJ3JlIHVuaGFwcHknLlxuICAgIH0pO1xuICAgIGBgYFxuICAgIElmIHRoZSBkb3duc3RyZWFtIHByb21pc2UgZG9lcyBub3Qgc3BlY2lmeSBhIHJlamVjdGlvbiBoYW5kbGVyLCByZWplY3Rpb24gcmVhc29ucyB3aWxsIGJlIHByb3BhZ2F0ZWQgZnVydGhlciBkb3duc3RyZWFtLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgdGhyb3cgbmV3IFBlZGFnb2dpY2FsRXhjZXB0aW9uKCdVcHN0cmVhbSBlcnJvcicpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAvLyBUaGUgYFBlZGdhZ29jaWFsRXhjZXB0aW9uYCBpcyBwcm9wYWdhdGVkIGFsbCB0aGUgd2F5IGRvd24gdG8gaGVyZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBBc3NpbWlsYXRpb25cbiAgICAtLS0tLS0tLS0tLS1cbiAgXG4gICAgU29tZXRpbWVzIHRoZSB2YWx1ZSB5b3Ugd2FudCB0byBwcm9wYWdhdGUgdG8gYSBkb3duc3RyZWFtIHByb21pc2UgY2FuIG9ubHkgYmVcbiAgICByZXRyaWV2ZWQgYXN5bmNocm9ub3VzbHkuIFRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHJldHVybmluZyBhIHByb21pc2UgaW4gdGhlXG4gICAgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uIGhhbmRsZXIuIFRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCB0aGVuIGJlIHBlbmRpbmdcbiAgICB1bnRpbCB0aGUgcmV0dXJuZWQgcHJvbWlzZSBpcyBzZXR0bGVkLiBUaGlzIGlzIGNhbGxlZCAqYXNzaW1pbGF0aW9uKi5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChjb21tZW50cykge1xuICAgICAgLy8gVGhlIHVzZXIncyBjb21tZW50cyBhcmUgbm93IGF2YWlsYWJsZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBJZiB0aGUgYXNzaW1saWF0ZWQgcHJvbWlzZSByZWplY3RzLCB0aGVuIHRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCBhbHNvIHJlamVjdC5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChjb21tZW50cykge1xuICAgICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCBmdWxmaWxscywgd2UnbGwgaGF2ZSB0aGUgdmFsdWUgaGVyZVxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgcmVqZWN0cywgd2UnbGwgaGF2ZSB0aGUgcmVhc29uIGhlcmVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgU2ltcGxlIEV4YW1wbGVcbiAgICAtLS0tLS0tLS0tLS0tLVxuICBcbiAgICBTeW5jaHJvbm91cyBFeGFtcGxlXG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBsZXQgcmVzdWx0O1xuICBcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gZmluZFJlc3VsdCgpO1xuICAgICAgLy8gc3VjY2Vzc1xuICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfVxuICAgIGBgYFxuICBcbiAgICBFcnJiYWNrIEV4YW1wbGVcbiAgXG4gICAgYGBganNcbiAgICBmaW5kUmVzdWx0KGZ1bmN0aW9uKHJlc3VsdCwgZXJyKXtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgfVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBQcm9taXNlIEV4YW1wbGU7XG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBmaW5kUmVzdWx0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgICAgLy8gc3VjY2Vzc1xuICAgIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEFkdmFuY2VkIEV4YW1wbGVcbiAgICAtLS0tLS0tLS0tLS0tLVxuICBcbiAgICBTeW5jaHJvbm91cyBFeGFtcGxlXG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBsZXQgYXV0aG9yLCBib29rcztcbiAgXG4gICAgdHJ5IHtcbiAgICAgIGF1dGhvciA9IGZpbmRBdXRob3IoKTtcbiAgICAgIGJvb2tzICA9IGZpbmRCb29rc0J5QXV0aG9yKGF1dGhvcik7XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9XG4gICAgYGBgXG4gIFxuICAgIEVycmJhY2sgRXhhbXBsZVxuICBcbiAgICBgYGBqc1xuICBcbiAgICBmdW5jdGlvbiBmb3VuZEJvb2tzKGJvb2tzKSB7XG4gIFxuICAgIH1cbiAgXG4gICAgZnVuY3Rpb24gZmFpbHVyZShyZWFzb24pIHtcbiAgXG4gICAgfVxuICBcbiAgICBmaW5kQXV0aG9yKGZ1bmN0aW9uKGF1dGhvciwgZXJyKXtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAvLyBmYWlsdXJlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZpbmRCb29va3NCeUF1dGhvcihhdXRob3IsIGZ1bmN0aW9uKGJvb2tzLCBlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3VuZEJvb2tzKGJvb2tzKTtcbiAgICAgICAgICAgICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICBmYWlsdXJlKHJlYXNvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzdWNjZXNzXG4gICAgICB9XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIFByb21pc2UgRXhhbXBsZTtcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGZpbmRBdXRob3IoKS5cbiAgICAgIHRoZW4oZmluZEJvb2tzQnlBdXRob3IpLlxuICAgICAgdGhlbihmdW5jdGlvbihib29rcyl7XG4gICAgICAgIC8vIGZvdW5kIGJvb2tzXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEBtZXRob2QgdGhlblxuICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uRnVsZmlsbGVkXG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3RlZFxuICAgIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgICBAcmV0dXJuIHtQcm9taXNlfVxuICAqL1xuICB0aGVuOiB0aGVuLFxuXG4gIC8qKlxuICAgIGBjYXRjaGAgaXMgc2ltcGx5IHN1Z2FyIGZvciBgdGhlbih1bmRlZmluZWQsIG9uUmVqZWN0aW9uKWAgd2hpY2ggbWFrZXMgaXQgdGhlIHNhbWVcbiAgICBhcyB0aGUgY2F0Y2ggYmxvY2sgb2YgYSB0cnkvY2F0Y2ggc3RhdGVtZW50LlxuICBcbiAgICBgYGBqc1xuICAgIGZ1bmN0aW9uIGZpbmRBdXRob3IoKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGRuJ3QgZmluZCB0aGF0IGF1dGhvcicpO1xuICAgIH1cbiAgXG4gICAgLy8gc3luY2hyb25vdXNcbiAgICB0cnkge1xuICAgICAgZmluZEF1dGhvcigpO1xuICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgIH1cbiAgXG4gICAgLy8gYXN5bmMgd2l0aCBwcm9taXNlc1xuICAgIGZpbmRBdXRob3IoKS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQG1ldGhvZCBjYXRjaFxuICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uUmVqZWN0aW9uXG4gICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG4gICdjYXRjaCc6IGZ1bmN0aW9uIF9jYXRjaChvblJlamVjdGlvbikge1xuICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3Rpb24pO1xuICB9XG59O1xuXG5mdW5jdGlvbiBwb2x5ZmlsbCgpIHtcbiAgICB2YXIgbG9jYWwgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbG9jYWwgPSBnbG9iYWw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbG9jYWwgPSBzZWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsb2NhbCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncG9seWZpbGwgZmFpbGVkIGJlY2F1c2UgZ2xvYmFsIG9iamVjdCBpcyB1bmF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgUCA9IGxvY2FsLlByb21pc2U7XG5cbiAgICBpZiAoUCkge1xuICAgICAgICB2YXIgcHJvbWlzZVRvU3RyaW5nID0gbnVsbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByb21pc2VUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChQLnJlc29sdmUoKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIHNpbGVudGx5IGlnbm9yZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9taXNlVG9TdHJpbmcgPT09ICdbb2JqZWN0IFByb21pc2VdJyAmJiAhUC5jYXN0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb2NhbC5Qcm9taXNlID0gUHJvbWlzZTtcbn1cblxucG9seWZpbGwoKTtcbi8vIFN0cmFuZ2UgY29tcGF0Li5cblByb21pc2UucG9seWZpbGwgPSBwb2x5ZmlsbDtcblByb21pc2UuUHJvbWlzZSA9IFByb21pc2U7XG5cbnJldHVybiBQcm9taXNlO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXM2LXByb21pc2UubWFwIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdG90ZW1XaWRnZXQuY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBQcmVwYXJlIGNzc1RyYW5zZm9ybWF0aW9uXG52YXIgdHJhbnNmb3JtO1xuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3RvdGVtV2lkZ2V0LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi90b3RlbVdpZGdldC5jc3NcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUEtQmxhY2tPbmU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQS1CbGFja09uZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVBLUJsYWNrVHdvO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUEtQmxhY2tUd28ud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQS1CbGFja1RocmVlO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUEtQmxhY2tUaHJlZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVBLUJsYWNrRm91cjtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVBLUJsYWNrRm91ci53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVBLUJvbGRPbmU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQS1Cb2xkT25lLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUEtQm9sZFR3bztcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVBLUJvbGRUd28ud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQS1Cb2xkVGhyZWU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQS1Cb2xkVGhyZWUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQS1Cb2xkRm91cjtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVBLUJvbGRGb3VyLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUEtQm9va09uZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVBLUJvb2tPbmUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQS1Cb29rVHdvO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUEtQm9va1R3by53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVBLUJvb2tUaHJlZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVBLUJvb2tUaHJlZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVBLUJvb2tGb3VyO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUEtQm9va0ZvdXIud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQS1MaWdodE9uZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVBLUxpZ2h0T25lLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUEtTGlnaHRUd287XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQS1MaWdodFR3by53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVBLUxpZ2h0VGhyZWU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQS1MaWdodFRocmVlLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUEtTGlnaHRGb3VyO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUEtTGlnaHRGb3VyLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUEtUmVndWxhck9uZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVBLVJlZ3VsYXJPbmUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQS1SZWd1bGFyVHdvO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUEtUmVndWxhclR3by53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVBLVJlZ3VsYXJUaHJlZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVBLVJlZ3VsYXJUaHJlZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVBLVJlZ3VsYXJGb3VyO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUEtUmVndWxhckZvdXIud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQS1NZWRpdW1PbmU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQS1NZWRpdW1PbmUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQS1NZWRpdW1Ud287XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQS1NZWRpdW1Ud28ud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQS1NZWRpdW1UaHJlZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVBLU1lZGl1bVRocmVlLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUEtTWVkaXVtRm91cjtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVBLU1lZGl1bUZvdXIud29mZlxcXCIpO1xcbn1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQi1CbGFja09uZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVCLUJsYWNrT25lLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUItQmxhY2tUd287XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQi1CbGFja1R3by53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVCLUJsYWNrVGhyZWU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQi1CbGFja1RocmVlLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUItQmxhY2tGb3VyO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUItQmxhY2tGb3VyLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUItQm9sZE9uZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVCLUJvbGRPbmUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQi1Cb2xkVHdvO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUItQm9sZFR3by53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVCLUJvbGRUaHJlZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVCLUJvbGRUaHJlZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVCLUJvbGRGb3VyO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUItQm9sZEZvdXIud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQi1Cb29rT25lO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUItQm9va09uZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVCLUJvb2tUd287XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQi1Cb29rVHdvLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUItQm9va1RocmVlO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUItQm9va1RocmVlLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUItQm9va0ZvdXI7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQi1Cb29rRm91ci53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVCLUxpZ2h0T25lO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUItTGlnaHRPbmUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQi1MaWdodFR3bztcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVCLUxpZ2h0VHdvLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUItTGlnaHRUaHJlZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVCLUxpZ2h0VGhyZWUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQi1MaWdodEZvdXI7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQi1MaWdodEZvdXIud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQi1SZWd1bGFyT25lO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUItUmVndWxhck9uZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVCLVJlZ3VsYXJUd287XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQi1SZWd1bGFyVHdvLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUItUmVndWxhclRocmVlO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUItUmVndWxhclRocmVlLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUItUmVndWxhckZvdXI7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQi1SZWd1bGFyRm91ci53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVCLU1lZGl1bU9uZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVCLU1lZGl1bU9uZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVCLU1lZGl1bVR3bztcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVCLU1lZGl1bVR3by53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVCLU1lZGl1bVRocmVlO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUItTWVkaXVtVGhyZWUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQi1NZWRpdW1Gb3VyO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUItTWVkaXVtRm91ci53b2ZmXFxcIik7XFxufVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVDLUJsYWNrT25lO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUMtQmxhY2tPbmUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQy1CbGFja1R3bztcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVDLUJsYWNrVHdvLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUMtQmxhY2tUaHJlZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVDLUJsYWNrVGhyZWUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQy1CbGFja0ZvdXI7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQy1CbGFja0ZvdXIud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQy1Cb2xkT25lO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUMtQm9sZE9uZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVDLUJvbGRUd287XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQy1Cb2xkVHdvLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUMtQm9sZFRocmVlO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUMtQm9sZFRocmVlLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUMtQm9sZEZvdXI7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQy1Cb2xkRm91ci53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVDLUJvb2tPbmU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQy1Cb29rT25lLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUMtQm9va1R3bztcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVDLUJvb2tUd28ud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQy1Cb29rVGhyZWU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQy1Cb29rVGhyZWUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQy1Cb29rRm91cjtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVDLUJvb2tGb3VyLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUMtTGlnaHRPbmU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQy1MaWdodE9uZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVDLUxpZ2h0VHdvO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUMtTGlnaHRUd28ud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQy1MaWdodFRocmVlO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUMtTGlnaHRUaHJlZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVDLUxpZ2h0Rm91cjtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVDLUxpZ2h0Rm91ci53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVDLVJlZ3VsYXJPbmU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQy1SZWd1bGFyT25lLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUMtUmVndWxhclR3bztcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVDLVJlZ3VsYXJUd28ud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQy1SZWd1bGFyVGhyZWU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQy1SZWd1bGFyVGhyZWUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQy1SZWd1bGFyRm91cjtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVDLVJlZ3VsYXJGb3VyLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUMtTWVkaXVtT25lO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUMtTWVkaXVtT25lLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUMtTWVkaXVtVHdvO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUMtTWVkaXVtVHdvLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUMtTWVkaXVtVGhyZWU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQy1NZWRpdW1UaHJlZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVDLU1lZGl1bUZvdXI7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQy1NZWRpdW1Gb3VyLndvZmZcXFwiKTtcXG59XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUQtQmxhY2tPbmU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlRC1CbGFja09uZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVELUJsYWNrVHdvO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUQtQmxhY2tUd28ud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRC1CbGFja1RocmVlO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUQtQmxhY2tUaHJlZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVELUJsYWNrRm91cjtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVELUJsYWNrRm91ci53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVELUJvbGRPbmU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlRC1Cb2xkT25lLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUQtQm9sZFR3bztcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVELUJvbGRUd28ud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRC1Cb2xkVGhyZWU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlRC1Cb2xkVGhyZWUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRC1Cb2xkRm91cjtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVELUJvbGRGb3VyLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUQtQm9va09uZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVELUJvb2tPbmUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRC1Cb29rVHdvO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUQtQm9va1R3by53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVELUJvb2tUaHJlZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVELUJvb2tUaHJlZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVELUJvb2tGb3VyO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUQtQm9va0ZvdXIud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRC1MaWdodE9uZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVELUxpZ2h0T25lLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUQtTGlnaHRUd287XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlRC1MaWdodFR3by53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVELUxpZ2h0VGhyZWU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlRC1MaWdodFRocmVlLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUQtTGlnaHRGb3VyO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUQtTGlnaHRGb3VyLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUQtUmVndWxhck9uZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVELVJlZ3VsYXJPbmUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRC1SZWd1bGFyVHdvO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUQtUmVndWxhclR3by53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVELVJlZ3VsYXJUaHJlZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVELVJlZ3VsYXJUaHJlZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVELVJlZ3VsYXJGb3VyO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUQtUmVndWxhckZvdXIud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRC1NZWRpdW1PbmU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlRC1NZWRpdW1PbmUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRC1NZWRpdW1Ud287XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlRC1NZWRpdW1Ud28ud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRC1NZWRpdW1UaHJlZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVELU1lZGl1bVRocmVlLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUQtTWVkaXVtRm91cjtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVELU1lZGl1bUZvdXIud29mZlxcXCIpO1xcbn1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRS1CbGFja09uZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVFLUJsYWNrT25lLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUUtQmxhY2tUd287XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlRS1CbGFja1R3by53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVFLUJsYWNrVGhyZWU7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlRS1CbGFja1RocmVlLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUUtQmxhY2tGb3VyO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUUtQmxhY2tGb3VyLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUUtQm9sZE9uZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVFLUJvbGRPbmUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRS1Cb2xkVHdvO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUUtQm9sZFR3by53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVFLUJvbGRUaHJlZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVFLUJvbGRUaHJlZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVFLUJvbGRGb3VyO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUUtQm9sZEZvdXIud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRS1Cb29rT25lO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUUtQm9va09uZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVFLUJvb2tUd287XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlRS1Cb29rVHdvLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUUtQm9va1RocmVlO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUUtQm9va1RocmVlLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUUtQm9va0ZvdXI7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlRS1Cb29rRm91ci53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVFLUxpZ2h0T25lO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUUtTGlnaHRPbmUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRS1MaWdodFR3bztcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVFLUxpZ2h0VHdvLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUUtTGlnaHRUaHJlZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVFLUxpZ2h0VGhyZWUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRS1MaWdodEZvdXI7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlRS1MaWdodEZvdXIud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRS1SZWd1bGFyT25lO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUUtUmVndWxhck9uZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVFLVJlZ3VsYXJUd287XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlRS1SZWd1bGFyVHdvLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUUtUmVndWxhclRocmVlO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUUtUmVndWxhclRocmVlLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUUtUmVndWxhckZvdXI7XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlRS1SZWd1bGFyRm91ci53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVFLU1lZGl1bU9uZTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVFLU1lZGl1bU9uZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVFLU1lZGl1bVR3bztcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVFLU1lZGl1bVR3by53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVFLU1lZGl1bVRocmVlO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUUtTWVkaXVtVGhyZWUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRS1NZWRpdW1Gb3VyO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUUtTWVkaXVtRm91ci53b2ZmXFxcIik7XFxufVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVBLTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVBLVJlZ3VsYXJPbmUud29mZlxcXCIpO1xcbn1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlQi07XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlQi1SZWd1bGFyT25lLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZUMtO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3dvZmYvT21vVHlwZUMtUmVndWxhck9uZS53b2ZmXFxcIik7XFxufVxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IE9tb1R5cGVELTtcXG4gIHNyYzogdXJsKFxcXCJodHRwczovL29tby1sYWIuaGVyb2t1YXBwLmNvbS9mb250cy93b2ZmL09tb1R5cGVELVJlZ3VsYXJPbmUud29mZlxcXCIpO1xcbn1cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBPbW9UeXBlRS07XFxuICBzcmM6IHVybChcXFwiaHR0cHM6Ly9vbW8tbGFiLmhlcm9rdWFwcC5jb20vZm9udHMvd29mZi9PbW9UeXBlRS1SZWd1bGFyT25lLndvZmZcXFwiKTtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogT21vVHlwZS1SZWd1bGFyU3RkVHdvO1xcbiAgc3JjOiB1cmwoXFxcImh0dHBzOi8vb21vLWxhYi5oZXJva3VhcHAuY29tL2ZvbnRzL3N0ZC9PbW9UeXBlLVJlZ3VsYXJTdGRUd28udHRmXFxcIik7XFxufVxcblxcbi5vbW8td2lkZ2V0IHtcXG4gIC0tcHJpbWFyeTogI2ViOGIyZDtcXG4gIC0tc2Vjb25kYXJ5OiAjMjA5M2FhO1xcbiAgLS1zdmdGaWxsOiB3aGl0ZTtcXG4gIC0tc2l6ZTogNDZweDtcXG4gIC0tbWFyZ2luLXNpemU6IDJweDtcXG4gIC0tc2l6ZUFkanVzdGVkOiBjYWxjKHZhcigtLXNpemUpICsgMiAqIHZhcigtLW1hcmdpbi1zaXplKSk7XFxuICAtLWFuaW1hdGlvblNwZWVkOiAwLjE1cztcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHotaW5kZXg6IDk5OTk5OTk5OTk5OTkgIWltcG9ydGFudDtcXG4gIGJvdHRvbTogY2FsYyh2YXIoLS1zaXplKSAqIDAuNSk7XFxuICByaWdodDogY2FsYyh2YXIoLS1zaXplKSAqIDAuNSk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG4gIGZvbnQtc2l6ZTogMDtcXG4gIGJvcmRlci1yYWRpdXM6IGNhbGModmFyKC0tc2l6ZSkgLyAyICsgdmFyKC0tbWFyZ2luLXNpemUpKTtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogcmV2ZXJzZTtcXG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2U7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2U7XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xcbiAgLm9tby13aWRnZXQge1xcbiAgICAtLXNpemU6IDUwcHg7XFxuICAgIC0tbWFyZ2luLXNpemU6IDJweDtcXG4gICAgdG9wOiBjYWxjKHZhcigtLXNpemUpICogMC41KTtcXG4gICAgYm90dG9tOiBhdXRvO1xcbiAgICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xcbiAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcXG4gICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICB9XFxufVxcblxcbi5vbW8td2lkZ2V0ICoge1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5vbW8td2lkZ2V0ICo6Zm9jdXMge1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIC13ZWJraXQtYm94LXNoYWRvdzogMCAwIDBweCB2YXIoLS1tYXJnaW4tc2l6ZSkgdmFyKC0tc2Vjb25kYXJ5KTtcXG4gIGJveC1zaGFkb3c6IDAgMCAwcHggdmFyKC0tbWFyZ2luLXNpemUpIHZhcigtLXNlY29uZGFyeSk7XFxufVxcblxcbi5vbW8td2lkZ2V0X19tYWluLXRvZ2dsZSB7XFxuICBib3JkZXI6IGNhbGMoNSAqIHZhcigtLW1hcmdpbi1zaXplKSkgc29saWQgYmxhY2sgIWltcG9ydGFudDtcXG4gIGJhY2tncm91bmQ6IHdoaXRlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5vbW8td2lkZ2V0X19tYWluLXRvZ2dsZSB+ICoge1xcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiBoZWlnaHQgdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2UgdmFyKC0tYW5pbWF0aW9uU3BlZWQpLFxcbiAgICBvcGFjaXR5IHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlLFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybSB2YXIoLS1hbmltYXRpb25TcGVlZCkgZWFzZTtcXG4gIHRyYW5zaXRpb246IGhlaWdodCB2YXIoLS1hbmltYXRpb25TcGVlZCkgZWFzZSB2YXIoLS1hbmltYXRpb25TcGVlZCksXFxuICAgIG9wYWNpdHkgdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2UsXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtIHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlO1xcbiAgdHJhbnNpdGlvbjogaGVpZ2h0IHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlIHZhcigtLWFuaW1hdGlvblNwZWVkKSxcXG4gICAgdHJhbnNmb3JtIHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlLCBvcGFjaXR5IHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlO1xcbiAgdHJhbnNpdGlvbjogaGVpZ2h0IHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlIHZhcigtLWFuaW1hdGlvblNwZWVkKSxcXG4gICAgdHJhbnNmb3JtIHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlLCBvcGFjaXR5IHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlLFxcbiAgICAtd2Via2l0LXRyYW5zZm9ybSB2YXIoLS1hbmltYXRpb25TcGVlZCkgZWFzZTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLjgpO1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgwLjgpO1xcbiAgaGVpZ2h0OiAwO1xcbiAgb3BhY2l0eTogMDtcXG4gIHotaW5kZXg6IDI7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuXFxuLm9tby13aWRnZXRfX21haW4tdG9nZ2xlOmNoZWNrZWQgfiAqIHtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogaGVpZ2h0IHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlLFxcbiAgICBvcGFjaXR5IHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlIHZhcigtLWFuaW1hdGlvblNwZWVkKSxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm0gdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2UgdmFyKC0tYW5pbWF0aW9uU3BlZWQpO1xcbiAgdHJhbnNpdGlvbjogaGVpZ2h0IHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlLFxcbiAgICBvcGFjaXR5IHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlIHZhcigtLWFuaW1hdGlvblNwZWVkKSxcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm0gdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2UgdmFyKC0tYW5pbWF0aW9uU3BlZWQpO1xcbiAgdHJhbnNpdGlvbjogaGVpZ2h0IHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlLFxcbiAgICB0cmFuc2Zvcm0gdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2UgdmFyKC0tYW5pbWF0aW9uU3BlZWQpLFxcbiAgICBvcGFjaXR5IHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlIHZhcigtLWFuaW1hdGlvblNwZWVkKTtcXG4gIHRyYW5zaXRpb246IGhlaWdodCB2YXIoLS1hbmltYXRpb25TcGVlZCkgZWFzZSxcXG4gICAgdHJhbnNmb3JtIHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlIHZhcigtLWFuaW1hdGlvblNwZWVkKSxcXG4gICAgb3BhY2l0eSB2YXIoLS1hbmltYXRpb25TcGVlZCkgZWFzZSB2YXIoLS1hbmltYXRpb25TcGVlZCksXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtIHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlIHZhcigtLWFuaW1hdGlvblNwZWVkKTtcXG4gIGhlaWdodDogdmFyKC0tc2l6ZUFkanVzdGVkKTtcXG4gIG9wYWNpdHk6IDE7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgcG9pbnRlci1ldmVudHM6IGFsbDtcXG59XFxuXFxuLm9tby13aWRnZXRfX21haW4tdG9nZ2xlOmNoZWNrZWQgfiAqIC5vbW8td2lkZ2V0X19saW5rLXdyYXAge1xcbiAgaGVpZ2h0OiBjYWxjKHZhcigtLXNpemUpICsgdmFyKC0tbWFyZ2luLXNpemUpKTtcXG59XFxuXFxuLm9tby13aWRnZXRfX21haW4tdG9nZ2xlOmNoZWNrZWQgfiAqIC5vbW8td2lkZ2V0X19saW5rLXdyYXAgYSB7XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbn1cXG5cXG4ub21vLXdpZGdldF9fcG93ZXItdG9nZ2xlLXdyYXAge1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuXFxuLm9tby13aWRnZXRfX3Bvd2VyLXRvZ2dsZS13cmFwID4gKiB7XFxuICBvcGFjaXR5OiAwLjU7XFxufVxcblxcbi5vbW8td2lkZ2V0Lmhhcy1jaGFuZ2VzXFxuICAub21vLXdpZGdldF9fbWFpbi10b2dnbGU6Y2hlY2tlZFxcbiAgfiAub21vLXdpZGdldF9fcG93ZXItdG9nZ2xlLXdyYXAge1xcbiAgcG9pbnRlci1ldmVudHM6IGFsbCAhaW1wb3J0YW50O1xcbn1cXG5cXG4ub21vLXdpZGdldC5oYXMtY2hhbmdlc1xcbiAgLm9tby13aWRnZXRfX21haW4tdG9nZ2xlOmNoZWNrZWRcXG4gIH4gLm9tby13aWRnZXRfX3Bvd2VyLXRvZ2dsZS13cmFwXFxuICA+ICoge1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxuLm9tby13aWRnZXQuaGFzLWNoYW5nZXNcXG4gIC5vbW8td2lkZ2V0X19tYWluLXRvZ2dsZTpjaGVja2VkXFxuICB+IC5vbW8td2lkZ2V0X19wb3dlci10b2dnbGUtd3JhcFxcbiAgLm9tby13aWRnZXRfX3Bvd2VyLXRvZ2dsZSB7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1wcmltYXJ5KTtcXG59XFxuXFxuLm9tby13aWRnZXQuaGFzLWNoYW5nZXMgLm9tby13aWRnZXRfX21haW4tdG9nZ2xlIHtcXG4gIGJhY2tncm91bmQ6IHZhcigtLXByaW1hcnkpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5vbW8td2lkZ2V0LnBvd2VyLW9mZiA+IC5vbW8td2lkZ2V0X19tYWluLXRvZ2dsZSB7XFxuICBiYWNrZ3JvdW5kOiB3aGl0ZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ub21vLXdpZGdldC5wb3dlci1vZmZcXG4gID4gLm9tby13aWRnZXRfX21haW4tdG9nZ2xlOmNoZWNrZWRcXG4gIH4gKjpub3QoOm50aC1sYXN0LWNoaWxkKC1uICsgMikpIHtcXG4gIG9wYWNpdHk6IDAuNDtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG4ub21vLXdpZGdldC5wb3dlci1vZmYgLm9tby13aWRnZXRfX3Bvd2VyIHtcXG4gIGJhY2tncm91bmQ6IGJsYWNrICFpbXBvcnRhbnQ7XFxufVxcblxcbi5vbW8td2lkZ2V0X19hZGQsXFxuLm9tby13aWRnZXRfX3N1YnN0cmFjdCxcXG4ub21vLXdpZGdldF9fcmVzZXQsXFxuLm9tby13aWRnZXRfX3Bvd2VyLXRvZ2dsZSxcXG4ub21vLXdpZGdldF9fbWFpbi10b2dnbGUsXFxuLm9tby13aWRnZXRfX3RvZ2dsZS1vcHRpb25zLFxcbi5vbW8td2lkZ2V0X19iYWNrZ3JvdW5kLWNob2ljZSxcXG4ub21vLXdpZGdldF9fbGluay13cmFwIGEsXFxuLm9tby13aWRnZXRfX3R5cGUtcHJldmlldyB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XFxuICBhcHBlYXJhbmNlOiBub25lO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogdmFyKC0tc2l6ZSk7XFxuICBoZWlnaHQ6IHZhcigtLXNpemUpO1xcbiAgbWFyZ2luOiB2YXIoLS1tYXJnaW4tc2l6ZSk7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlcjogMnB4IHNvbGlkIHdoaXRlO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgZm9udC1zaXplOiAwO1xcbn1cXG5cXG4ub21vLXdpZGdldF9fYWRkOmFjdGl2ZSxcXG4ub21vLXdpZGdldF9fYWRkLmFjdGl2ZSxcXG4ub21vLXdpZGdldF9fc3Vic3RyYWN0OmFjdGl2ZSxcXG4ub21vLXdpZGdldF9fc3Vic3RyYWN0LmFjdGl2ZSxcXG4ub21vLXdpZGdldF9fcmVzZXQ6YWN0aXZlLFxcbi5vbW8td2lkZ2V0X19yZXNldC5hY3RpdmUsXFxuLm9tby13aWRnZXRfX3Bvd2VyLXRvZ2dsZTphY3RpdmUsXFxuLm9tby13aWRnZXRfX3Bvd2VyLXRvZ2dsZS5hY3RpdmUsXFxuLm9tby13aWRnZXRfX21haW4tdG9nZ2xlOmFjdGl2ZSxcXG4ub21vLXdpZGdldF9fbWFpbi10b2dnbGUuYWN0aXZlLFxcbi5vbW8td2lkZ2V0X190b2dnbGUtb3B0aW9uczphY3RpdmUsXFxuLm9tby13aWRnZXRfX3RvZ2dsZS1vcHRpb25zLmFjdGl2ZSxcXG4ub21vLXdpZGdldF9fYmFja2dyb3VuZC1jaG9pY2U6YWN0aXZlLFxcbi5vbW8td2lkZ2V0X19iYWNrZ3JvdW5kLWNob2ljZS5hY3RpdmUsXFxuLm9tby13aWRnZXRfX2xpbmstd3JhcCBhOmFjdGl2ZSxcXG4ub21vLXdpZGdldF9fbGluay13cmFwIGEuYWN0aXZlLFxcbi5vbW8td2lkZ2V0X190eXBlLXByZXZpZXc6YWN0aXZlLFxcbi5vbW8td2lkZ2V0X190eXBlLXByZXZpZXcuYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4ub21vLXdpZGdldF9fYWRkOmFjdGl2ZSArIHN2ZyxcXG4ub21vLXdpZGdldF9fYWRkOmFjdGl2ZSA+IHN2ZyxcXG4ub21vLXdpZGdldF9fYWRkLmFjdGl2ZSArIHN2ZyxcXG4ub21vLXdpZGdldF9fYWRkLmFjdGl2ZSA+IHN2ZyxcXG4ub21vLXdpZGdldF9fc3Vic3RyYWN0OmFjdGl2ZSArIHN2ZyxcXG4ub21vLXdpZGdldF9fc3Vic3RyYWN0OmFjdGl2ZSA+IHN2ZyxcXG4ub21vLXdpZGdldF9fc3Vic3RyYWN0LmFjdGl2ZSArIHN2ZyxcXG4ub21vLXdpZGdldF9fc3Vic3RyYWN0LmFjdGl2ZSA+IHN2ZyxcXG4ub21vLXdpZGdldF9fcmVzZXQ6YWN0aXZlICsgc3ZnLFxcbi5vbW8td2lkZ2V0X19yZXNldDphY3RpdmUgPiBzdmcsXFxuLm9tby13aWRnZXRfX3Jlc2V0LmFjdGl2ZSArIHN2ZyxcXG4ub21vLXdpZGdldF9fcmVzZXQuYWN0aXZlID4gc3ZnLFxcbi5vbW8td2lkZ2V0X19wb3dlci10b2dnbGU6YWN0aXZlICsgc3ZnLFxcbi5vbW8td2lkZ2V0X19wb3dlci10b2dnbGU6YWN0aXZlID4gc3ZnLFxcbi5vbW8td2lkZ2V0X19wb3dlci10b2dnbGUuYWN0aXZlICsgc3ZnLFxcbi5vbW8td2lkZ2V0X19wb3dlci10b2dnbGUuYWN0aXZlID4gc3ZnLFxcbi5vbW8td2lkZ2V0X19tYWluLXRvZ2dsZTphY3RpdmUgKyBzdmcsXFxuLm9tby13aWRnZXRfX21haW4tdG9nZ2xlOmFjdGl2ZSA+IHN2ZyxcXG4ub21vLXdpZGdldF9fbWFpbi10b2dnbGUuYWN0aXZlICsgc3ZnLFxcbi5vbW8td2lkZ2V0X19tYWluLXRvZ2dsZS5hY3RpdmUgPiBzdmcsXFxuLm9tby13aWRnZXRfX3RvZ2dsZS1vcHRpb25zOmFjdGl2ZSArIHN2ZyxcXG4ub21vLXdpZGdldF9fdG9nZ2xlLW9wdGlvbnM6YWN0aXZlID4gc3ZnLFxcbi5vbW8td2lkZ2V0X190b2dnbGUtb3B0aW9ucy5hY3RpdmUgKyBzdmcsXFxuLm9tby13aWRnZXRfX3RvZ2dsZS1vcHRpb25zLmFjdGl2ZSA+IHN2ZyxcXG4ub21vLXdpZGdldF9fYmFja2dyb3VuZC1jaG9pY2U6YWN0aXZlICsgc3ZnLFxcbi5vbW8td2lkZ2V0X19iYWNrZ3JvdW5kLWNob2ljZTphY3RpdmUgPiBzdmcsXFxuLm9tby13aWRnZXRfX2JhY2tncm91bmQtY2hvaWNlLmFjdGl2ZSArIHN2ZyxcXG4ub21vLXdpZGdldF9fYmFja2dyb3VuZC1jaG9pY2UuYWN0aXZlID4gc3ZnLFxcbi5vbW8td2lkZ2V0X19saW5rLXdyYXAgYTphY3RpdmUgKyBzdmcsXFxuLm9tby13aWRnZXRfX2xpbmstd3JhcCBhOmFjdGl2ZSA+IHN2ZyxcXG4ub21vLXdpZGdldF9fbGluay13cmFwIGEuYWN0aXZlICsgc3ZnLFxcbi5vbW8td2lkZ2V0X19saW5rLXdyYXAgYS5hY3RpdmUgPiBzdmcsXFxuLm9tby13aWRnZXRfX3R5cGUtcHJldmlldzphY3RpdmUgKyBzdmcsXFxuLm9tby13aWRnZXRfX3R5cGUtcHJldmlldzphY3RpdmUgPiBzdmcsXFxuLm9tby13aWRnZXRfX3R5cGUtcHJldmlldy5hY3RpdmUgKyBzdmcsXFxuLm9tby13aWRnZXRfX3R5cGUtcHJldmlldy5hY3RpdmUgPiBzdmcge1xcbiAgLS1zdmdGaWxsOiBibGFjaztcXG59XFxuXFxuLm9tby13aWRnZXRfX2FkZDphY3RpdmU6OmFmdGVyLFxcbi5vbW8td2lkZ2V0X19hZGQuYWN0aXZlOjphZnRlcixcXG4ub21vLXdpZGdldF9fc3Vic3RyYWN0OmFjdGl2ZTo6YWZ0ZXIsXFxuLm9tby13aWRnZXRfX3N1YnN0cmFjdC5hY3RpdmU6OmFmdGVyLFxcbi5vbW8td2lkZ2V0X19yZXNldDphY3RpdmU6OmFmdGVyLFxcbi5vbW8td2lkZ2V0X19yZXNldC5hY3RpdmU6OmFmdGVyLFxcbi5vbW8td2lkZ2V0X19wb3dlci10b2dnbGU6YWN0aXZlOjphZnRlcixcXG4ub21vLXdpZGdldF9fcG93ZXItdG9nZ2xlLmFjdGl2ZTo6YWZ0ZXIsXFxuLm9tby13aWRnZXRfX21haW4tdG9nZ2xlOmFjdGl2ZTo6YWZ0ZXIsXFxuLm9tby13aWRnZXRfX21haW4tdG9nZ2xlLmFjdGl2ZTo6YWZ0ZXIsXFxuLm9tby13aWRnZXRfX3RvZ2dsZS1vcHRpb25zOmFjdGl2ZTo6YWZ0ZXIsXFxuLm9tby13aWRnZXRfX3RvZ2dsZS1vcHRpb25zLmFjdGl2ZTo6YWZ0ZXIsXFxuLm9tby13aWRnZXRfX2JhY2tncm91bmQtY2hvaWNlOmFjdGl2ZTo6YWZ0ZXIsXFxuLm9tby13aWRnZXRfX2JhY2tncm91bmQtY2hvaWNlLmFjdGl2ZTo6YWZ0ZXIsXFxuLm9tby13aWRnZXRfX2xpbmstd3JhcCBhOmFjdGl2ZTo6YWZ0ZXIsXFxuLm9tby13aWRnZXRfX2xpbmstd3JhcCBhLmFjdGl2ZTo6YWZ0ZXIsXFxuLm9tby13aWRnZXRfX3R5cGUtcHJldmlldzphY3RpdmU6OmFmdGVyLFxcbi5vbW8td2lkZ2V0X190eXBlLXByZXZpZXcuYWN0aXZlOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IGJsYWNrIHRyYW5zcGFyZW50O1xcbn1cXG5cXG4ub21vLXdpZGdldF9fbGluay13cmFwIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4ub21vLXdpZGdldF9fbGluay13cmFwIGEge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tc2Vjb25kYXJ5KTtcXG59XFxuXFxuLm9tby13aWRnZXRfX29wdGlvbi12YWx1ZSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ub21vLXdpZGdldCBsZWdlbmQge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLm9tby13aWRnZXQgc3ZnIHtcXG4gIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTtcXG4gIGxlZnQ6IDUwJTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgbWF4LXdpZHRoOiA1MCU7XFxuICBtYXgtaGVpZ2h0OiA1MCU7XFxuICBoZWlnaHQ6IGF1dG87XFxufVxcblxcbi5vbW8td2lkZ2V0IGZvcm0ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4ub21vLXdpZGdldCBmb3JtOnZhbGlkOjphZnRlciB7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIHdpZHRoOiB2YXIoLS1zaXplKTtcXG4gIGhlaWdodDogdmFyKC0tc2l6ZSk7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1wcmltYXJ5KTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiB2YXIoLS1tYXJnaW4tc2l6ZSk7XFxuICB0b3A6IHZhcigtLW1hcmdpbi1zaXplKTtcXG4gIHotaW5kZXg6IDMyMztcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG59XFxuXFxuLm9tby13aWRnZXQgZm9ybTp2YWxpZCBbdHlwZT1cXFwicmVzZXRcXFwiXSB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLm9tby13aWRnZXRfX3RvZ2dsZS1vcHRpb25zIH4gZm9ybSB7XFxuICAtd2Via2l0LXRyYW5zaXRpb246IHdpZHRoIHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlIHZhcigtLWFuaW1hdGlvblNwZWVkKTtcXG4gIHRyYW5zaXRpb246IHdpZHRoIHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlIHZhcigtLWFuaW1hdGlvblNwZWVkKTtcXG4gIHdpZHRoOiB2YXIoLS1zaXplQWRqdXN0ZWQpO1xcbiAgaGVpZ2h0OiB2YXIoLS1zaXplQWRqdXN0ZWQpO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcblxcbi5vbW8td2lkZ2V0X190b2dnbGUtb3B0aW9ucyB+IGZvcm0gPiAqIHtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSB2YXIoLS1hbmltYXRpb25TcGVlZCkgZWFzZSB2YXIoLS1hbmltYXRpb25TcGVlZCk7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlIHZhcigtLWFuaW1hdGlvblNwZWVkKTtcXG4gIG9wYWNpdHk6IDA7XFxufVxcblxcbi5vbW8td2lkZ2V0X190b2dnbGUtb3B0aW9uczpjaGVja2VkIH4gZm9ybSB7XFxuICAtd2Via2l0LXRyYW5zaXRpb246IHdpZHRoIHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlO1xcbiAgdHJhbnNpdGlvbjogd2lkdGggdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2U7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHdpZHRoOiBjYWxjKDMgKiB2YXIoLS1zaXplQWRqdXN0ZWQpKTtcXG4gIHBvaW50ZXItZXZlbnRzOiBhbGw7XFxufVxcblxcbi5vbW8td2lkZ2V0X190b2dnbGUtb3B0aW9uczpjaGVja2VkIH4gZm9ybSBbdHlwZT1cXFwicmVzZXRcXFwiXSB7XFxuICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2U7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMDtcXG4gIG9wYWNpdHk6IDA7XFxufVxcblxcbi5vbW8td2lkZ2V0X190b2dnbGUtb3B0aW9uczpjaGVja2VkIH4gZm9ybTp2YWxpZCB7XFxuICAtd2Via2l0LXRyYW5zaXRpb246IHdpZHRoIHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlLFxcbiAgICBwYWRkaW5nIHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlO1xcbiAgdHJhbnNpdGlvbjogd2lkdGggdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2UsXFxuICAgIHBhZGRpbmcgdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2U7XFxuICB3aWR0aDogY2FsYyg0ICogdmFyKC0tc2l6ZUFkanVzdGVkKSk7XFxuICBwYWRkaW5nLWxlZnQ6IHZhcigtLXNpemVBZGp1c3RlZCk7XFxufVxcblxcbi5vbW8td2lkZ2V0X190b2dnbGUtb3B0aW9uczpjaGVja2VkIH4gZm9ybTp2YWxpZCBbdHlwZT1cXFwicmVzZXRcXFwiXSB7XFxuICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2U7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlO1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxuLm9tby13aWRnZXRfX3RvZ2dsZS1vcHRpb25zOmNoZWNrZWQgfiBmb3JtID4gKiB7XFxuICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2UgdmFyKC0tYW5pbWF0aW9uU3BlZWQpO1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSB2YXIoLS1hbmltYXRpb25TcGVlZCkgZWFzZSB2YXIoLS1hbmltYXRpb25TcGVlZCk7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG4ub21vLXdpZGdldF9fdG9nZ2xlLW9wdGlvbnMgPiAqIHtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSB2YXIoLS1hbmltYXRpb25TcGVlZCkgZWFzZTtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2U7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG4ub21vLXdpZGdldCBmaWVsZHNldCB7XFxuICBib3JkZXI6IG5vbmU7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5vbW8td2lkZ2V0IGZvcm0ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBiYWNrZ3JvdW5kOiBibGFjaztcXG4gIGJvcmRlci1yYWRpdXM6IGNhbGModmFyKC0tc2l6ZUFkanVzdGVkKSAvIDIpO1xcbiAgcGFkZGluZy1yaWdodDogdmFyKC0tc2l6ZUFkanVzdGVkKTtcXG4gIHotaW5kZXg6IC0xO1xcbn1cXG5cXG4ub21vLXdpZGdldCBbdHlwZT1cXFwicmVzZXRcXFwiXSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5vbW8td2lkZ2V0IFt0eXBlPVxcXCJyZXNldFxcXCJdIHN2ZyB7XFxuICB3aWR0aDogNzAlO1xcbiAgLS1zdmdGaWxsOiB3aGl0ZTtcXG59XFxuXFxuLm9tby13aWRnZXQgW3R5cGU9XFxcInJlc2V0XFxcIl06YWN0aXZlIHN2ZyB7XFxuICAtLXN2Z0ZpbGw6IGJsYWNrO1xcbn1cXG5cXG4ub21vLXdpZGdldF9fYWRkLFxcbi5vbW8td2lkZ2V0X19zdWJzdHJhY3Qge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4ub21vLXdpZGdldF9fYWRkOjphZnRlcixcXG4ub21vLXdpZGdldF9fc3Vic3RyYWN0OjphZnRlciB7XFxuICAtLXRyaWFuZ2xlU2l6ZTogY2FsYyh2YXIoLS1zaXplQWRqdXN0ZWQpIC8gMyk7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNTAlO1xcbiAgbGVmdDogNTAlO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAwJSkgcm90YXRlKDE4MGRlZyk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAwJSkgcm90YXRlKDE4MGRlZyk7XFxuICB3aWR0aDogMDtcXG4gIGhlaWdodDogMDtcXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICBib3JkZXItd2lkdGg6IDAgdmFyKC0tdHJpYW5nbGVTaXplKSB2YXIoLS10cmlhbmdsZVNpemUpIHZhcigtLXRyaWFuZ2xlU2l6ZSk7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHdoaXRlIHRyYW5zcGFyZW50O1xcbn1cXG5cXG4ub21vLXdpZGdldF9fYWRkOjphZnRlciB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC0xMDAlKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC0xMDAlKTtcXG59XFxuXFxuLm9tby13aWRnZXQge1xcbiAgLS1iZ0NvbG9yMDogI2VmZjNlZTtcXG4gIC0tYmdDb2xvcjE6ICNkOWQ4ZDg7XFxuICAtLWJnQ29sb3IyOiAjMjMxZjIwO1xcbiAgLS1iZ0NvbG9yMzogIzlmYjVkZTtcXG4gIC0tYmdDb2xvcjQ6ICNiODk0YzQ7XFxuICAtLWJnQ29sb3I1OiAjZTJiMGFmO1xcbn1cXG5cXG4ub21vLXdpZGdldCBbZGF0YS1zZXR0aW5nLW5hbWU9XFxcImJhY2tncm91bmRcXFwiXSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB6LWluZGV4OiAxO1xcbn1cXG5cXG4ub21vLXdpZGdldCBbZGF0YS1zZXR0aW5nLW5hbWU9XFxcImJhY2tncm91bmRcXFwiXSBmb3JtIHtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlIHZhcigtLWFuaW1hdGlvblNwZWVkKTtcXG4gIHRyYW5zaXRpb246IGFsbCB2YXIoLS1hbmltYXRpb25TcGVlZCkgZWFzZSB2YXIoLS1hbmltYXRpb25TcGVlZCk7XFxuICBoZWlnaHQ6IGNhbGModmFyKC0tc2l6ZUFkanVzdGVkKSAqIDIgKyAyMHB4KTtcXG4gIGJvdHRvbTogLTEwcHg7XFxuICB0b3A6IGF1dG87XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LXdyYXA6IHdyYXA7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxufVxcblxcbi5vbW8td2lkZ2V0IFtkYXRhLXNldHRpbmctbmFtZT1cXFwiYmFja2dyb3VuZFxcXCJdIGZvcm0gPiAqIHtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSB2YXIoLS1hbmltYXRpb25TcGVlZCkgZWFzZTtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2U7XFxuICBvcGFjaXR5OiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5vbW8td2lkZ2V0IFtkYXRhLXNldHRpbmctbmFtZT1cXFwiYmFja2dyb3VuZFxcXCJdIGZvcm06dmFsaWQ6OmFmdGVyIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5vbW8td2lkZ2V0IFtkYXRhLXNldHRpbmctbmFtZT1cXFwiYmFja2dyb3VuZFxcXCJdIC5vbW8td2lkZ2V0X190b2dnbGUtb3B0aW9ucyB7XFxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcXG59XFxuXFxuLm9tby13aWRnZXRcXG4gIFtkYXRhLXNldHRpbmctbmFtZT1cXFwiYmFja2dyb3VuZFxcXCJdXFxuICAub21vLXdpZGdldF9fdG9nZ2xlLW9wdGlvbnM6Y2hlY2tlZFxcbiAgfiBmb3JtIHtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogd2lkdGggdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2U7XFxuICB0cmFuc2l0aW9uOiB3aWR0aCB2YXIoLS1hbmltYXRpb25TcGVlZCkgZWFzZTtcXG4gIHdpZHRoOiBjYWxjKHZhcigtLXNpemVBZGp1c3RlZCkgKiAzICsgMjBweCk7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IHZhcigtLXNpemVBZGp1c3RlZC8yKTtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwcHg7XFxuICBtYXJnaW4tcmlnaHQ6IHZhcigtLXNpemVBZGp1c3RlZCk7XFxufVxcblxcbi5vbW8td2lkZ2V0XFxuICBbZGF0YS1zZXR0aW5nLW5hbWU9XFxcImJhY2tncm91bmRcXFwiXVxcbiAgLm9tby13aWRnZXRfX3RvZ2dsZS1vcHRpb25zOmNoZWNrZWRcXG4gIH4gZm9ybVxcbiAgPiAqOm5vdCgub21vLXdpZGdldF9fcmVzZXQpIHtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSB2YXIoLS1hbmltYXRpb25TcGVlZCkgZWFzZSB2YXIoLS1hbmltYXRpb25TcGVlZCk7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlIHZhcigtLWFuaW1hdGlvblNwZWVkKTtcXG4gIG9wYWNpdHk6IDEgIWltcG9ydGFudDtcXG59XFxuXFxuLm9tby13aWRnZXRcXG4gIFtkYXRhLXNldHRpbmctbmFtZT1cXFwiYmFja2dyb3VuZFxcXCJdXFxuICAub21vLXdpZGdldF9fdG9nZ2xlLW9wdGlvbnM6Y2hlY2tlZFxcbiAgfiBmb3JtOnZhbGlkOjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBiYWNrZ3JvdW5kOiBibGFjaztcXG4gIHdpZHRoOiBjYWxjKDIgKiB2YXIoLS1zaXplQWRqdXN0ZWQpICsgMjBweCk7XFxuICBoZWlnaHQ6IGNhbGModmFyKC0tc2l6ZUFkanVzdGVkKSArIDIwcHgpO1xcbiAgei1pbmRleDogLTE7XFxuICB0b3A6IDA7XFxuICByaWdodDogY2FsYygxMDAlIC0gdmFyKC0tc2l6ZUFkanVzdGVkKSAtIDIwcHgpO1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogY2FsYyh2YXIoLS1zaXplQWRqdXN0ZWQpICsgMTBweCk7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiBjYWxjKHZhcigtLXNpemVBZGp1c3RlZCkgKyAxMHB4KTtcXG59XFxuXFxuLm9tby13aWRnZXRcXG4gIFtkYXRhLXNldHRpbmctbmFtZT1cXFwiYmFja2dyb3VuZFxcXCJdXFxuICAub21vLXdpZGdldF9fdG9nZ2xlLW9wdGlvbnM6Y2hlY2tlZFxcbiAgfiBmb3JtOnZhbGlkXFxuICAub21vLXdpZGdldF9fcmVzZXQge1xcbiAgb3BhY2l0eTogMSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ub21vLXdpZGdldCBbZGF0YS1zZXR0aW5nLW5hbWU9XFxcImJhY2tncm91bmRcXFwiXTo6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTtcXG4gIGxlZnQ6IDUwJTtcXG4gIHdpZHRoOiBjYWxjKDEwMCUgLSBjYWxjKDIgKiAodmFyKC0tbWFyZ2luLXNpemUpICsgMnB4KSkpO1xcbiAgaGVpZ2h0OiAwO1xcbiAgcGFkZGluZy10b3A6IGNhbGMoNTAlIC0gMiAqIHZhcigtLW1hcmdpbi1zaXplKSk7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBib3JkZXItdG9wOiBjYWxjKHZhcigtLXNpemUpIC8gMikgc29saWQgd2hpdGU7XFxuICBiYWNrZ3JvdW5kOiBibGFjaztcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG4ub21vLXdpZGdldCBbZGF0YS1zZXR0aW5nLW5hbWU9XFxcImJhY2tncm91bmRcXFwiXVtkYXRhLXZhbHVlPVxcXCIwXFxcIl06OmFmdGVyIHtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWJnQ29sb3IwKTtcXG59XFxuXFxuLm9tby13aWRnZXQgW2RhdGEtc2V0dGluZy1uYW1lPVxcXCJiYWNrZ3JvdW5kXFxcIl1bZGF0YS12YWx1ZT1cXFwiMVxcXCJdOjphZnRlciB7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1iZ0NvbG9yMSk7XFxufVxcblxcbi5vbW8td2lkZ2V0IFtkYXRhLXNldHRpbmctbmFtZT1cXFwiYmFja2dyb3VuZFxcXCJdW2RhdGEtdmFsdWU9XFxcIjJcXFwiXTo6YWZ0ZXIge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tYmdDb2xvcjIpO1xcbn1cXG5cXG4ub21vLXdpZGdldCBbZGF0YS1zZXR0aW5nLW5hbWU9XFxcImJhY2tncm91bmRcXFwiXVtkYXRhLXZhbHVlPVxcXCIzXFxcIl06OmFmdGVyIHtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWJnQ29sb3IzKTtcXG59XFxuXFxuLm9tby13aWRnZXQgW2RhdGEtc2V0dGluZy1uYW1lPVxcXCJiYWNrZ3JvdW5kXFxcIl1bZGF0YS12YWx1ZT1cXFwiNFxcXCJdOjphZnRlciB7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1iZ0NvbG9yNCk7XFxufVxcblxcbi5vbW8td2lkZ2V0IFtkYXRhLXNldHRpbmctbmFtZT1cXFwiYmFja2dyb3VuZFxcXCJdW2RhdGEtdmFsdWU9XFxcIjVcXFwiXTo6YWZ0ZXIge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tYmdDb2xvcjUpO1xcbn1cXG5cXG4ub21vLXdpZGdldCBbZGF0YS1zZXR0aW5nLW5hbWU9XFxcImJhY2tncm91bmRcXFwiXSAub21vLXdpZGdldF9fcmVzZXQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IGNhbGMoMTAwJSAtIDEwcHgpO1xcbiAgYmFja2dyb3VuZDogYmxhY2s7XFxuICBsZWZ0OiBhdXRvICFpbXBvcnRhbnQ7XFxufVxcblxcbi5vbW8td2lkZ2V0IFtkYXRhLXNldHRpbmctbmFtZT1cXFwiYmFja2dyb3VuZFxcXCJdIC5vbW8td2lkZ2V0X19yZXNldDphY3RpdmUge1xcbiAgYmFja2dyb3VuZDogd2hpdGU7XFxufVxcblxcbi5vbW8td2lkZ2V0XFxuICBbZGF0YS1zZXR0aW5nLW5hbWU9XFxcImJhY2tncm91bmRcXFwiXVxcbiAgLm9tby13aWRnZXRfX2JhY2tncm91bmQtY2hvaWNlW3ZhbHVlPVxcXCIwXFxcIl0ge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tYmdDb2xvcjApICFpbXBvcnRhbnQ7XFxufVxcblxcbi5vbW8td2lkZ2V0XFxuICBbZGF0YS1zZXR0aW5nLW5hbWU9XFxcImJhY2tncm91bmRcXFwiXVxcbiAgLm9tby13aWRnZXRfX2JhY2tncm91bmQtY2hvaWNlW3ZhbHVlPVxcXCIxXFxcIl0ge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tYmdDb2xvcjEpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5vbW8td2lkZ2V0XFxuICBbZGF0YS1zZXR0aW5nLW5hbWU9XFxcImJhY2tncm91bmRcXFwiXVxcbiAgLm9tby13aWRnZXRfX2JhY2tncm91bmQtY2hvaWNlW3ZhbHVlPVxcXCIyXFxcIl0ge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tYmdDb2xvcjIpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5vbW8td2lkZ2V0XFxuICBbZGF0YS1zZXR0aW5nLW5hbWU9XFxcImJhY2tncm91bmRcXFwiXVxcbiAgLm9tby13aWRnZXRfX2JhY2tncm91bmQtY2hvaWNlW3ZhbHVlPVxcXCIzXFxcIl0ge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tYmdDb2xvcjMpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5vbW8td2lkZ2V0XFxuICBbZGF0YS1zZXR0aW5nLW5hbWU9XFxcImJhY2tncm91bmRcXFwiXVxcbiAgLm9tby13aWRnZXRfX2JhY2tncm91bmQtY2hvaWNlW3ZhbHVlPVxcXCI0XFxcIl0ge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tYmdDb2xvcjQpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5vbW8td2lkZ2V0XFxuICBbZGF0YS1zZXR0aW5nLW5hbWU9XFxcImJhY2tncm91bmRcXFwiXVxcbiAgLm9tby13aWRnZXRfX2JhY2tncm91bmQtY2hvaWNlW3ZhbHVlPVxcXCI1XFxcIl0ge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tYmdDb2xvcjUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5vbW8td2lkZ2V0XFxuICBbZGF0YS1zZXR0aW5nLW5hbWU9XFxcImJhY2tncm91bmRcXFwiXVxcbiAgLm9tby13aWRnZXRfX2JhY2tncm91bmQtY2hvaWNlOmNoZWNrZWQge1xcbiAgYm9yZGVyLWNvbG9yOiB2YXIoLS1wcmltYXJ5KTtcXG59XFxuXFxuLm9tby13aWRnZXRcXG4gIFtkYXRhLXNldHRpbmctbmFtZT1cXFwiZm9udC10eXBlXFxcIl1cXG4gIC5vbW8td2lkZ2V0X190b2dnbGUtb3B0aW9uczpjaGVja2VkXFxuICB+IGZvcm0ge1xcbiAgd2lkdGg6IGNhbGMoNCAqIHZhcigtLXNpemVBZGp1c3RlZCkpO1xcbn1cXG5cXG4ub21vLXdpZGdldFxcbiAgW2RhdGEtc2V0dGluZy1uYW1lPVxcXCJmb250LXR5cGVcXFwiXVxcbiAgLm9tby13aWRnZXRfX3RvZ2dsZS1vcHRpb25zOmNoZWNrZWRcXG4gIH4gZm9ybTp2YWxpZCB7XFxuICAtd2Via2l0LXRyYW5zaXRpb246IHdpZHRoIHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlLFxcbiAgICBwYWRkaW5nIHZhcigtLWFuaW1hdGlvblNwZWVkKSBlYXNlO1xcbiAgdHJhbnNpdGlvbjogd2lkdGggdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2UsXFxuICAgIHBhZGRpbmcgdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2U7XFxuICB3aWR0aDogY2FsYyg1ICogdmFyKC0tc2l6ZUFkanVzdGVkKSk7XFxuICBwYWRkaW5nLWxlZnQ6IHZhcigtLXNpemVBZGp1c3RlZCk7XFxufVxcblxcbi5vbW8td2lkZ2V0XFxuICBbZGF0YS1zZXR0aW5nLW5hbWU9XFxcImZvbnQtdHlwZVxcXCJdXFxuICAub21vLXdpZGdldF9fdG9nZ2xlLW9wdGlvbnM6Y2hlY2tlZFxcbiAgfiBmb3JtOnZhbGlkXFxuICBbdHlwZT1cXFwicmVzZXRcXFwiXSB7XFxuICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgdmFyKC0tYW5pbWF0aW9uU3BlZWQpIGVhc2UgdmFyKC0tYW5pbWF0aW9uU3BlZWQpO1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSB2YXIoLS1hbmltYXRpb25TcGVlZCkgZWFzZSB2YXIoLS1hbmltYXRpb25TcGVlZCk7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG4ub21vLXdpZGdldF9fdHlwZS1wcmV2aWV3IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG4ub21vLXdpZGdldF9fdHlwZS1wcmV2aWV3IHN2ZyB7XFxuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxufVxcblxcbi5vbW8td2lkZ2V0X190eXBlLXByZXZpZXc6bm90KFtkYXRhLXNlbGVjdGVkXSkgc3ZnOm50aC1jaGlsZCgxKSxcXG4ub21vLXdpZGdldF9fdHlwZS1wcmV2aWV3W2RhdGEtc2VsZWN0ZWQ9XFxcIk9cXFwiXSBzdmc6bnRoLWNoaWxkKDEpIHtcXG4gIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XFxufVxcblxcbi5vbW8td2lkZ2V0X190eXBlLXByZXZpZXdbZGF0YS1zZWxlY3RlZD1cXFwiQVxcXCJdIHN2ZzpudGgtY2hpbGQoMikge1xcbiAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDtcXG59XFxuXFxuLm9tby13aWRnZXRfX3R5cGUtcHJldmlld1tkYXRhLXNlbGVjdGVkPVxcXCJCXFxcIl0gc3ZnOm50aC1jaGlsZCgzKSB7XFxuICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xcbn1cXG5cXG4ub21vLXdpZGdldF9fdHlwZS1wcmV2aWV3W2RhdGEtc2VsZWN0ZWQ9XFxcIkNcXFwiXSBzdmc6bnRoLWNoaWxkKDQpIHtcXG4gIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XFxufVxcblxcbi5vbW8td2lkZ2V0X190eXBlLXByZXZpZXdbZGF0YS1zZWxlY3RlZD1cXFwiRFxcXCJdIHN2ZzpudGgtY2hpbGQoNSkge1xcbiAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDtcXG59XFxuXFxuLm9tby13aWRnZXRfX3R5cGUtcHJldmlld1tkYXRhLXNlbGVjdGVkPVxcXCJFXFxcIl0gc3ZnOm50aC1jaGlsZCg2KSB7XFxuICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xcbn1cXG5cIiwgXCJcIl0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCJ7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IG1vZHVsZXNbX2ldOyAvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG4gICAgICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuICAgICAgLy8gd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuICAgICAgLy8gSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXG4gICAgICBpZiAoaXRlbVswXSA9PSBudWxsIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGlmIChtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIihcIi5jb25jYXQoaXRlbVsyXSwgXCIpIGFuZCAoXCIpLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIilcIik7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCkuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24oc2VsZWN0b3IpIHtcblx0XHRpZiAodHlwZW9mIG1lbW9bc2VsZWN0b3JdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBmbi5jYWxsKHRoaXMsIHNlbGVjdG9yKTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAoc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3NlbGVjdG9yXSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1tzZWxlY3Rvcl1cblx0fTtcbn0pKGZ1bmN0aW9uICh0YXJnZXQpIHtcblx0cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KVxufSk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG5cdGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcLykvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsImltcG9ydCBjb25maWcgZnJvbSBcIi4uL2NvbmZpZ1wiO1xuaW1wb3J0IFwiLi90b3RlbVdpZGdldC5jc3NcIjtcbmltcG9ydCBodG1sIGZyb20gXCIuL3RvdGVtV2lkZ2V0Lmh0bWxcIjtcblxuY29uc3QgSU1BR0VfT1BFTiA9IFwiL2ltZy9vcGVuLnBuZ1wiO1xuY29uc3QgSU1BR0VfQ0xPU0UgPSBcIi9pbWcvY2xvc2UucG5nXCI7XG5jb25zdCBJTUFHRV9TQVZFX0FDVElWRSA9IFwiL2ltZy9TQVZFLUFDVElWRS1JQ09OLnBuZ1wiO1xuXG5jb25zdCBlbGVtZW50cyA9IFtdO1xubGV0IGJvZHk7XG5sZXQgdG9nZ2xlcjtcblxudmFyIGluaXRPbW9XaWRnZXRDb250cm9scyA9IGZ1bmN0aW9uKCkge1xuICAvLyBlbGVtZW50c1xuXG4gIGNvbnN0IHdpZGdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjb21vLXdpZGdldFwiKTtcbiAgY29uc3QgbWFpblRvZ2dsZSA9IHdpZGdldC5xdWVyeVNlbGVjdG9yKFwiLm9tby13aWRnZXRfX21haW4tdG9nZ2xlXCIpO1xuICBjb25zdCBmb3JtcyA9IHdpZGdldC5xdWVyeVNlbGVjdG9yQWxsKFwiZm9ybVwiKTtcbiAgY29uc3Qgb3B0aW9uRGlzcGxheVRvZ2dsZXMgPSB3aWRnZXQucXVlcnlTZWxlY3RvckFsbChcbiAgICBcIi5vbW8td2lkZ2V0X190b2dnbGUtb3B0aW9uc1wiXG4gICk7XG4gIGNvbnN0IHZhbHVlSW5wdXRzID0gd2lkZ2V0LnF1ZXJ5U2VsZWN0b3JBbGwoXCIub21vLXdpZGdldF9fb3B0aW9uLXZhbHVlXCIpO1xuICBjb25zdCBpbmNyZW1lbnRDb250cm9sQnV0dG9ucyA9IHdpZGdldC5xdWVyeVNlbGVjdG9yQWxsKCdbdHlwZT1cImJ1dHRvblwiXScpO1xuICBjb25zdCByZXNldEVsZW1lbnRzID0gd2lkZ2V0LnF1ZXJ5U2VsZWN0b3JBbGwoXCIub21vLXdpZGdldF9fcmVzZXRcIik7XG4gIGNvbnN0IGJhY2tncm91bmRTZXR0aW5nc0Zvcm0gPSB3aWRnZXQucXVlcnlTZWxlY3RvcihcbiAgICAnW2RhdGEtc2V0dGluZy1uYW1lPVwiYmFja2dyb3VuZFwiXSBmb3JtJ1xuICApO1xuICBjb25zdCBiYWNrZ3JvdW5kU2V0dGluZ3NSZXNldCA9IGJhY2tncm91bmRTZXR0aW5nc0Zvcm0ucXVlcnlTZWxlY3RvcihcbiAgICBcIi5vbW8td2lkZ2V0X19yZXNldFwiXG4gICk7XG4gIGNvbnN0IGZvbnRUeXBlUHJldmlldyA9IHdpZGdldC5xdWVyeVNlbGVjdG9yKFwiLm9tby13aWRnZXRfX3R5cGUtcHJldmlld1wiKTtcbiAgY29uc3QgcG93ZXJUb2dnbGUgPSB3aWRnZXQucXVlcnlTZWxlY3RvcihcIi5vbW8td2lkZ2V0X19wb3dlci10b2dnbGVcIik7XG5cbiAgLy8gZnVuY3Rpb25zXG5cbiAgY29uc3QgY2xvc2VPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgb3B0aW9uRGlzcGxheVRvZ2dsZXMuZm9yRWFjaChmdW5jdGlvbihvcHRpb25EaXNwbGF5VG9nZ2xlKSB7XG4gICAgICBvcHRpb25EaXNwbGF5VG9nZ2xlLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgIG9wdGlvbkRpc3BsYXlUb2dnbGUuc2V0QXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiLCBcImZhbHNlXCIpO1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVBvd2VyVG9nZ2xlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBjb25zb2xlLmxvZyhldmVudC50YXJnZXQpO1xuICAgIGlmIChtYWluVG9nZ2xlLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcInBvd2VyLW9mZlwiKSkge1xuICAgICAgcmVtb3ZlT3ZlcmlkZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBwbHlPdmVyaWRlcygpO1xuICAgIH1cbiAgICBzYXZlQ29va2llKFwiXCIpO1xuICAgIGNsb3NlT3B0aW9ucygpO1xuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZUZvbnRGYW1pbHlQcmV2aWV3ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBjb25zdCBsZXR0ZXJzID0gW1wiT1wiLCBcIkFcIiwgXCJCXCIsIFwiQ1wiLCBcIkRcIiwgXCJFXCJdO1xuXG4gICAgK2ZvbnRUeXBlUHJldmlldy5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNlbGVjdGVkXCIsIGxldHRlcnNbdmFsdWVdKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVCdXR0b25DbGljayA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgbGV0IGlucHV0ID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIlt0eXBlPSdudW1iZXInXCIpO1xuICAgIGxldCBjdXJWYWwgPSBwYXJzZUludChpbnB1dC52YWx1ZSk7XG4gICAgbGV0IGlzQWRkID0gZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm9tby13aWRnZXRfX2FkZFwiKTtcblxuICAgIGlmIChcbiAgICAgIChpc0FkZCAmJiBjdXJWYWwgPT0gaW5wdXQuZ2V0QXR0cmlidXRlKFwibWF4XCIpKSB8fFxuICAgICAgKCFpc0FkZCAmJiBjdXJWYWwgPT0gMClcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW5wdXQudmFsdWUgPSBpc0FkZCA/IGN1clZhbCArIDEgOiBjdXJWYWwgLSAxO1xuXG4gICAgaGFuZGxlVmFsdWVDaGFuZ2UoKTtcblxuICAgIC8vICEhIG9ubHkgaWYgZm9udCB0eXBlXG4gICAgaWYgKGlucHV0LmlkID09PSBcInRvdGVtX2JvZHlfZmZcIikgdXBkYXRlRm9udEZhbWlseVByZXZpZXcoaW5wdXQudmFsdWUpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVZhbHVlQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IGNoYW5nZXNBY3RpdmUgPSAwO1xuICAgIFtdLnNsaWNlLmNhbGwoZm9ybXMpLmZvckVhY2goZnVuY3Rpb24oZm9ybSkge1xuICAgICAgY29uc29sZS5sb2coZm9ybS5jaGVja1ZhbGlkaXR5KCkpO1xuICAgICAgaWYgKGZvcm0uY2hlY2tWYWxpZGl0eSgpKSB7XG4gICAgICAgIGNoYW5nZXNBY3RpdmUrKztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGFwcGx5T3ZlcmlkZXMoKTtcbiAgICBzYXZlQ29va2llKFwiXCIpO1xuICAgIHdpZGdldC5jbGFzc0xpc3RbY2hhbmdlc0FjdGl2ZSA+IDAgPyBcImFkZFwiIDogXCJyZW1vdmVcIl0oXCJoYXMtY2hhbmdlc1wiKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVWYWx1ZUtleWJvYXJkRXZlbnRzID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBjb25zdCBpc0Rvd24gPSBldmVudC5jb2RlID09IFwiQXJyb3dEb3duXCI7XG4gICAgY29uc3QgaXNVcCA9IGV2ZW50LmNvZGUgPT0gXCJBcnJvd1VwXCI7XG4gICAgY29uc3QgaXNUYWIgPSBldmVudC5jb2RlID09IFwiVGFiXCI7XG5cbiAgICBpZiAoaXNUYWIpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC50YXJnZXQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50Lm5leHRFbGVtZW50U2libGluZ1xuICAgICAgICAucXVlcnlTZWxlY3RvcihcIlt0eXBlPSdyYWRpbyddXCIpXG4gICAgICAgIC5mb2N1cygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGFkZEJ0biA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkXCIpO1xuICAgIGNvbnN0IHN1YnN0cmFjdEJ0biA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3Vic3RyYWN0XCIpO1xuXG4gICAgdXBkYXRlRm9udEZhbWlseVByZXZpZXcoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblxuICAgIGlmIChpc0Rvd24pIHtcbiAgICAgIHN1YnN0cmFjdEJ0bi5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgc3Vic3RyYWN0QnRuLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgICB9LCAyMCk7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlID09IDEpIHtcbiAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gMDtcbiAgICAgICAgdXBkYXRlRm9udEZhbWlseVByZXZpZXcoMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1VwKSB7XG4gICAgICBhZGRCdG4uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGFkZEJ0bi5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgICAgfSwgMjApO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVSZXNldENsaWNrID0gZnVuY3Rpb24oZSkge1xuICAgIGlmIChlLnRhcmdldC5pZCA9PT0gXCJ0b3RlbV9ib2R5X2ZmX3Jlc2V0XCIpIHtcbiAgICAgIHVwZGF0ZUZvbnRGYW1pbHlQcmV2aWV3KDApO1xuICAgIH1cbiAgICBjbG9zZU9wdGlvbnMoKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaGFuZGxlVmFsdWVDaGFuZ2UoKSwgMTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVPcHRpb25EaXNwbGF5VG9nZ2xlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBjb25zdCBvcHRpb25EaXNwbGF5VG9nZ2xlID0gZXZlbnQudGFyZ2V0O1xuICAgIGNvbnNvbGUubG9nKGV2ZW50LnRhcmdldCk7XG5cbiAgICBpZiAoZXZlbnQuY29kZSkge1xuICAgICAgY29uc3QgaXNUYWIgPSBldmVudC5jb2RlID09IFwiVGFiXCI7XG4gICAgICBjb25zdCBpc1NwYWNlID0gZXZlbnQuY29kZSA9PSBcIlNwYWNlXCI7XG4gICAgICBjb25zdCBpc0VudGVyID0gZXZlbnQuY29kZSA9PSBcIkVudGVyXCI7XG5cbiAgICAgIGlmIChcbiAgICAgICAgaXNUYWIgJiZcbiAgICAgICAgb3B0aW9uRGlzcGxheVRvZ2dsZS5nZXRBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIpID09IFwiZmFsc2VcIlxuICAgICAgKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG9wdGlvbkRpc3BsYXlUb2dnbGUucGFyZW50RWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmdcbiAgICAgICAgICAucXVlcnlTZWxlY3RvcihcIlt0eXBlPSdyYWRpbyddXCIpXG4gICAgICAgICAgLmZvY3VzKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIG9rcmVuaXQgbG9naWt1LCBkb2RhdCBrb2Qgb2QgZG9sZVxuICAgICAgaWYgKCFpc1NwYWNlICYmICFpc0VudGVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbkRpc3BsYXlUb2dnbGUuZ2V0QXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiKSA9PSBcInRydWVcIikge1xuICAgICAgb3B0aW9uRGlzcGxheVRvZ2dsZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIsIFwiZmFsc2VcIik7XG4gICAgICBvcHRpb25EaXNwbGF5VG9nZ2xlLmNoZWNrZWQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xvc2VPcHRpb25zKCk7XG4gICAgICBvcHRpb25EaXNwbGF5VG9nZ2xlLnNldEF0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIiwgXCJ0cnVlXCIpO1xuICAgICAgb3B0aW9uRGlzcGxheVRvZ2dsZS5jaGVja2VkID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgLy8gZXZlbnQgbGlzdGVuZXJzXG5cbiAgbWFpblRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xvc2VPcHRpb25zKTtcblxuICBwb3dlclRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlUG93ZXJUb2dnbGUpO1xuXG4gIFtdLnNsaWNlLmNhbGwob3B0aW9uRGlzcGxheVRvZ2dsZXMpLmZvckVhY2goZnVuY3Rpb24ocmFkaW8pIHtcbiAgICByYWRpby5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlT3B0aW9uRGlzcGxheVRvZ2dsZSk7XG4gICAgcmFkaW8uYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgaGFuZGxlT3B0aW9uRGlzcGxheVRvZ2dsZSk7XG4gIH0pO1xuXG4gIFtdLnNsaWNlLmNhbGwodmFsdWVJbnB1dHMpLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YWx1ZS5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVWYWx1ZUtleWJvYXJkRXZlbnRzKTtcbiAgICB2YWx1ZS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGhhbmRsZVZhbHVlQ2hhbmdlKTtcbiAgfSk7XG5cbiAgW10uc2xpY2UuY2FsbChpbmNyZW1lbnRDb250cm9sQnV0dG9ucykuZm9yRWFjaChmdW5jdGlvbihidXR0b24pIHtcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZUJ1dHRvbkNsaWNrKTtcbiAgfSk7XG5cbiAgW10uc2xpY2UuY2FsbChyZXNldEVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uKHJlc2V0KSB7XG4gICAgcmVzZXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZVJlc2V0Q2xpY2spO1xuICB9KTtcblxuICBiYWNrZ3JvdW5kU2V0dGluZ3NGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBiYWNrZ3JvdW5kU2V0dGluZ3NGb3JtLnBhcmVudEVsZW1lbnQuc2V0QXR0cmlidXRlKFxuICAgICAgXCJkYXRhLXZhbHVlXCIsXG4gICAgICBldmVudC5zcmNFbGVtZW50LnZhbHVlXG4gICAgKTtcbiAgICBoYW5kbGVWYWx1ZUNoYW5nZSgpO1xuICB9KTtcblxuICBiYWNrZ3JvdW5kU2V0dGluZ3NSZXNldC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgYmFja2dyb3VuZFNldHRpbmdzRm9ybS5wYXJlbnRFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIiwgLTEpO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGVGb250OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdXBkYXRlRm9udEZhbWlseVByZXZpZXcodmFsdWUpO1xuICAgIH1cbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGFkZE9tb2xhYkNsYXNzU2NvcGVUb0JvZHkoZG9jKSB7XG4gIGNvbnN0IGRvY3VtZW50ID0gZG9jLnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpO1xuICBpZiAoZG9jdW1lbnQgJiYgIWRvY3VtZW50LmNsYXNzTGlzdC5jb250YWlucyhjb25maWcuT01PTEFCX0JPRFlfQ0xBU1MpKSB7XG4gICAgZG9jdW1lbnQuY2xhc3NMaXN0LmFkZChjb25maWcuT01PTEFCX0JPRFlfQ0xBU1MpO1xuICB9XG59XG5cbmNvbnN0IHNldFVzZXJBcHBsaWVkVmFsdWVzID0gKGRhdGEsIGZuKSA9PiB7XG4gIGlmIChkYXRhLmNoZWNrZWQpIHtcbiAgICBjb25zdCB3aWRnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI29tby13aWRnZXRcIik7XG4gICAgd2lkZ2V0LmNsYXNzTGlzdFtcImFkZFwiXShcImhhcy1jaGFuZ2VzXCIpO1xuICAgIGNvbnN0IG1haW5Ub2dnbGUgPSB3aWRnZXQucXVlcnlTZWxlY3RvcihcIi5vbW8td2lkZ2V0X19tYWluLXRvZ2dsZVwiKTtcbiAgICBtYWluVG9nZ2xlLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcInBvd2VyLW9mZlwiKTtcbiAgfVxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcGx5T3ZlcmlkZXNcIikuY2hlY2tlZCA9IGRhdGEuY2hlY2tlZDtcbiAgLy8gZGF0YS5jaGVja2VkID09IHRydWUgPyBcIm9uXCIgOiBcIm9mZlwiO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvdGVtX2JzaXplXCIpLnZhbHVlID0gc2V0Rm9udFNpemUoZGF0YS5ib2R5Rm9udFNpemUpO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvdGVtX2JvZHlfZmZcIikudmFsdWUgPSBzZXRGb250RmFtaWx5SWQoXG4gICAgZGF0YS5ib2R5Rm9udEZhbWlseVxuICApWzBdLmlkO1xuXG4gIGZuLnVwZGF0ZUZvbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b3RlbV9ib2R5X2ZmXCIpLnZhbHVlKTtcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvdGVtX2ZvbnRfd2VpZ2h0XCIpLnZhbHVlID0gc2V0Rm9udFdlaWdodElkKFxuICAgIGRhdGEuYm9keUZvbnRXZWlnaHRcbiAgKVswXS5pZDtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b3RlbV9ic3BhY2luZ1wiKS52YWx1ZSA9IHNldHNldExldHRlclNwYWNpbmdJZChcbiAgICBkYXRhLmJvZHlGb250U3BhY2luZ1xuICApWzBdLmlkO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvdGVtX2JoZWlnaHRcIikudmFsdWUgPSBzZXRMaW5lSGVpZ2h0SWQoXG4gICAgZGF0YS5ib2R5TGluZUhlaWdodFxuICApWzBdLmlkO1xuICB2YXIgYmcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlbGVjdGVkQmFja3JvdW5kXCIpO1xuICBiZy5zZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbHVlXCIsIGdldENvbG9yVmFsdWUoZGF0YS5iZ0NvbG9yKVswXS5pZCk7XG59O1xuXG5jb25zdCBzZXRGb250U2l6ZSA9IHZhbCA9PiBOdW1iZXIodmFsKSAtIE51bWJlcihjb25maWcuQk9EWV9GT05UX1NJWkUpO1xuXG5jb25zdCBGT05UX1dFSUdIVCA9IFtcbiAgeyBpZDogMSwgdmFsdWU6IFwiNTAwXCIsIG9tb1R5cGU6IFwiQm9sZE9uZVwiIH0sXG4gIHsgaWQ6IDIsIHZhbHVlOiBcIjYwMFwiLCBvbW9UeXBlOiBcIkJvb2tPbmVcIiB9LFxuICB7IGlkOiAzLCB2YWx1ZTogXCI4MDBcIiwgb21vVHlwZTogXCJNZWRpdW1PbmVcIiB9XG4gIC8vICxcbiAgLy8geyBpZDogNCwgdmFsdWU6IFwibGlnaHRlclwiIH1cbl07XG5cbmNvbnN0IHNldEZvbnRXZWlnaHQgPSB2YWwgPT4gRk9OVF9XRUlHSFQuZmlsdGVyKGVsID0+IGVsLmlkID09PSBOdW1iZXIodmFsKSk7XG5jb25zdCBzZXRGb250V2VpZ2h0SWQgPSB2YWwgPT4gRk9OVF9XRUlHSFQuZmlsdGVyKGVsID0+IGVsLnZhbHVlID09PSB2YWwpO1xuXG5jb25zdCBMRVRURVJfU1BBQ0lORyA9IFtcbiAgeyBpZDogMSwgdmFsdWU6IDEuMjUgfSxcbiAgeyBpZDogMiwgdmFsdWU6IDEuNSB9LFxuICB7IGlkOiAzLCB2YWx1ZTogMS43NSB9LFxuICB7IGlkOiA0LCB2YWx1ZTogMiB9XG5dO1xuXG5jb25zdCBzZXRMZXR0ZXJTcGFjaW5nID0gdmFsID0+XG4gIExFVFRFUl9TUEFDSU5HLmZpbHRlcihlbCA9PiBlbC5pZCA9PT0gTnVtYmVyKHZhbCkpO1xuY29uc3Qgc2V0c2V0TGV0dGVyU3BhY2luZ0lkID0gdmFsID0+XG4gIExFVFRFUl9TUEFDSU5HLmZpbHRlcihlbCA9PiBlbC52YWx1ZSA9PT0gdmFsKTtcblxuY29uc3QgTElORV9IRUlHSFQgPSBbXG4gIHsgaWQ6IDEsIHZhbHVlOiAxLjggfSxcbiAgeyBpZDogMiwgdmFsdWU6IDIuMCB9LFxuICB7IGlkOiAzLCB2YWx1ZTogMi4yIH0sXG4gIHsgaWQ6IDQsIHZhbHVlOiAyLjQgfVxuXTtcbmNvbnN0IHNldExpbmVIZWlnaHQgPSB2YWwgPT4gTElORV9IRUlHSFQuZmlsdGVyKGVsID0+IGVsLmlkID09PSBOdW1iZXIodmFsKSk7XG5jb25zdCBzZXRMaW5lSGVpZ2h0SWQgPSB2YWwgPT4gTElORV9IRUlHSFQuZmlsdGVyKGVsID0+IGVsLnZhbHVlID09PSB2YWwpO1xuXG5jb25zdCBPTU9fVFlQRSA9IFwiT21vVHlwZVwiO1xuY29uc3QgQk9EWV9GT05UX0NIT09TRVIgPSBbXG4gIHsgaWQ6IDEsIHN0eWxlOiBcIk9tb1R5cGVBXCIsIHZhbHVlOiBgJHtPTU9fVFlQRX1BLWAgfSxcbiAgeyBpZDogMiwgc3R5bGU6IFwiT21vVHlwZUJcIiwgdmFsdWU6IGAke09NT19UWVBFfUItYCB9LFxuICB7IGlkOiAzLCBzdHlsZTogXCJPbW9UeXBlQ1wiLCB2YWx1ZTogYCR7T01PX1RZUEV9Qy1gIH0sXG4gIHsgaWQ6IDQsIHN0eWxlOiBcIk9tb1R5cGVEXCIsIHZhbHVlOiBgJHtPTU9fVFlQRX1ELWAgfSxcbiAgeyBpZDogNSwgc3R5bGU6IFwiT21vVHlwZUVcIiwgdmFsdWU6IGAke09NT19UWVBFfUUtYCB9XG5dO1xuXG5jb25zdCBIRUFERVJfRk9OVF9DSE9PU0VSID0gW1xuICB7IGlkOiAxLCBzdHlsZTogXCJPbW9UeXBlQVwiLCB2YWx1ZTogYCR7T01PX1RZUEV9QS1gIH0sXG4gIHsgaWQ6IDIsIHN0eWxlOiBcIk9tb1R5cGVCXCIsIHZhbHVlOiBgJHtPTU9fVFlQRX1CLWAgfSxcbiAgeyBpZDogMywgc3R5bGU6IFwiT21vVHlwZUNcIiwgdmFsdWU6IGAke09NT19UWVBFfUMtYCB9LFxuICB7IGlkOiA0LCBzdHlsZTogXCJPbW9UeXBlRFwiLCB2YWx1ZTogYCR7T01PX1RZUEV9RC1gIH0sXG4gIHsgaWQ6IDUsIHN0eWxlOiBcIk9tb1R5cGVFXCIsIHZhbHVlOiBgJHtPTU9fVFlQRX1FLWAgfVxuXTtcbmNvbnN0IHNldEhlYWRlckZvbnRGYW1pbHkgPSB2YWwgPT5cbiAgSEVBREVSX0ZPTlRfQ0hPT1NFUi5maWx0ZXIoZWwgPT4gZWwuaWQgPT09IE51bWJlcih2YWwpKTtcbmNvbnN0IHNldEhlYWRlckZvbnRGb250RmFtaWx5SWQgPSB2YWwgPT5cbiAgSEVBREVSX0ZPTlRfQ0hPT1NFUi5maWx0ZXIoZWwgPT4gZWwudmFsdWUgPT09IHZhbCk7XG5cbmNvbnN0IHNldEZvbnRGYW1pbHkgPSB2YWwgPT5cbiAgQk9EWV9GT05UX0NIT09TRVIuZmlsdGVyKGVsID0+IGVsLmlkID09PSBOdW1iZXIodmFsKSk7XG5jb25zdCBzZXRGb250RmFtaWx5SWQgPSB2YWwgPT4gQk9EWV9GT05UX0NIT09TRVIuZmlsdGVyKGVsID0+IGVsLnZhbHVlID09PSB2YWwpO1xuXG5jb25zdCBDT0xPUl9NQVAgPSBbXG4gIHsgaWQ6IDAsIGJhY2tncm91bmQ6IFwiI0VGRjNFRVwiIH0sXG4gIHsgaWQ6IDEsIGJhY2tncm91bmQ6IFwiI0Q5RDhEOFwiIH0sXG4gIHsgaWQ6IDIsIGJhY2tncm91bmQ6IFwiIzIzMUYyMFwiIH0sXG4gIHsgaWQ6IDMsIGJhY2tncm91bmQ6IFwiIzlGQjVERVwiIH0sXG4gIHsgaWQ6IDQsIGJhY2tncm91bmQ6IFwiI0I4OTRDNFwiIH0sXG4gIHsgaWQ6IDUsIGJhY2tncm91bmQ6IFwiI0UyQjBBRlwiIH1cbl07XG5jb25zdCBnZXRDb2xvciA9IHZhbCA9PiBDT0xPUl9NQVAuZmlsdGVyKGVsID0+IGVsLmlkID09PSBOdW1iZXIodmFsKSk7XG5jb25zdCBnZXRDb2xvclZhbHVlID0gdmFsID0+IENPTE9SX01BUC5maWx0ZXIoZWwgPT4gZWwuYmFja2dyb3VuZCA9PT0gdmFsKTtcblxuLyoqIGdldCBBUFBMSUVEIFZBTFVFUyBGUk9NIFdJREdFVCAqL1xuY29uc3QgZ2V0VXNlckFwcGxpZWRWYWx1ZXMgPSAoKSA9PiB7XG4gIGNvbnN0IGFwcGxpZWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcGx5T3ZlcmlkZXNcIikuY2hlY2tlZDtcblxuICBjb25zdCBiRm9udFNpemUgPVxuICAgIE51bWJlcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvdGVtX2JzaXplXCIpLnZhbHVlKSArXG4gICAgTnVtYmVyKGNvbmZpZy5CT0RZX0ZPTlRfU0laRSk7XG5cbiAgY29uc3QgaEZvbnRTaXplID1cbiAgICBOdW1iZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b3RlbV9ic2l6ZVwiKS52YWx1ZSkgK1xuICAgIE51bWJlcihjb25maWcuSEVBREVSX0ZPTlRfU0laRSk7XG5cbiAgY29uc3QgYkZvbnRGYW1pbHkgPSBzZXRGb250RmFtaWx5KFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG90ZW1fYm9keV9mZlwiKS52YWx1ZVxuICApO1xuICBjb25zdCBoRm9udEZhbWlseSA9IHNldEhlYWRlckZvbnRGYW1pbHkoXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b3RlbV9ib2R5X2ZmXCIpLnZhbHVlXG4gICk7XG5cbiAgY29uc3QgYkZvbnRXZWlndGggPSBzZXRGb250V2VpZ2h0KFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG90ZW1fZm9udF93ZWlnaHRcIikudmFsdWVcbiAgKTtcbiAgY29uc3QgYkZvbnRTcGFjaW5nID0gc2V0TGV0dGVyU3BhY2luZyhcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvdGVtX2JzcGFjaW5nXCIpLnZhbHVlXG4gICk7XG4gIGNvbnN0IGJGb250TGluZUhlaWdodCA9IHNldExpbmVIZWlnaHQoXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b3RlbV9iaGVpZ2h0XCIpLnZhbHVlXG4gICk7XG4gIHZhciBmaWxlbGRTZXRDb2xvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VsZWN0ZWRCYWNrcm91bmRcIik7XG4gIGxldCBjb2xvciA9IGZpbGVsZFNldENvbG9yLmdldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIik7XG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGdldENvbG9yKGNvbG9yKTtcblxuICBjb25zdCBkYXRhID0ge1xuICAgIGNoZWNrZWQ6IGFwcGxpZWQsXG4gICAgYm9keUZvbnRTaXplOiBiRm9udFNpemUsXG4gICAgaGVhZGVyRm9udFNpemU6IGhGb250U2l6ZSxcbiAgICBib2R5Rm9udEZhbWlseTogYkZvbnRGYW1pbHlbMF0udmFsdWUsXG4gICAgaGVhZGVyRm9udEZhbWlseTogaEZvbnRGYW1pbHlbMF0udmFsdWUsXG4gICAgYm9keUZvbnRXZWlnaHQ6IGJGb250V2VpZ3RoWzBdLnZhbHVlLFxuICAgIGJvZHlGb250U3BhY2luZzogYkZvbnRTcGFjaW5nWzBdLnZhbHVlLFxuICAgIGJvZHlMaW5lSGVpZ2h0OiBiRm9udExpbmVIZWlnaHRbMF0udmFsdWUsXG4gICAgYmdDb2xvcjogYmFja2dyb3VuZENvbG9yWzBdLmJhY2tncm91bmRcbiAgfTtcbiAgcmV0dXJuIGRhdGE7XG59O1xuXG5mdW5jdGlvbiBnZW5lcmF0ZU9tb1N0eWxlKCkge1xuICBjb25zdCB2YWx1ZXMgPSBnZXRVc2VyQXBwbGllZFZhbHVlcygpO1xuICBjb25zb2xlLmxvZyh2YWx1ZXMpO1xuICAvLyBha28gamUgb2RhYnJhbyBiZXogYm9qZSBpbGkgYm9qYSBuaWplIG9kYWJyYW5hIG5hcHJhdmkgYmV6IGJvamVcbiAgbGV0IHN0eWxlID1cbiAgICB2YWx1ZXMuYmdDb2xvciA9PT0gXCJ0cmFuc3BhcmVudFwiXG4gICAgICA/IFwiXCJcbiAgICAgIDogY29uZmlnLnNldEJhY2tHcm91bmRDb2xvcihcbiAgICAgICAgICBjb25maWcuQkFDS0dST1VORF9DT0xPUl9FTEVNRU5UUyxcbiAgICAgICAgICB2YWx1ZXMuYmdDb2xvclxuICAgICAgICApO1xuXG4gIC8vIHN0eWxlICs9IGNvbmZpZy5JTVBPUlRBTlRfRUxFTUVOVFNfU0VMRUNUT1I7XG4gIC8vIHN0eWxlICs9IHNldEJhY2tHcm91bmRDb2xvckltcG9ydGFudChcbiAgLy8gICBCQUNLR1JPVU5EX0NPTE9SX0VMRU1FTlRTX0lNUE9SVEFOVCxcbiAgLy8gICBiZ0NvbFxuICAvLyApO1xuXG4gIGNvbnN0IGlzT21vVHlwZVR1cm5lZE9uID0gKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvdGVtX2ZvbnRfd2VpZ2h0XCIpLnZhbHVlICE9PSBcIjBcIiAmJlxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b3RlbV9ib2R5X2ZmXCIpLnZhbHVlICE9PSBcIjBcIlxuICAgICk7XG4gIH07XG5cbiAgY29uc3QgaGVhZGVyU3R5bGUgPSBjb25maWcuc2V0SGVhZGVyU3R5bGUoXG4gICAgY29uZmlnLnRyYW5zZm9ybUhlYWRlclN0eWxlcyhjb25maWcuSEVBREVSX1NUWUxFX0VMRU1FTlRTKS5qb2luKFwiLFwiKSxcbiAgICAvLyBpc09tb1R5cGVUdXJuZWRPbigpXG4gICAgLy8gICA/IHZhbHVlcy5oZWFkZXJGb250RmFtaWx5ICtcbiAgICAvLyAgICAgICBzZXRGb250V2VpZ2h0SWQodmFsdWVzLmJvZHlGb250V2VpZ2h0KVswXS5vbW9UeXBlXG4gICAgLy8gICA6IHZhbHVlcy5oZWFkZXJGb250RmFtaWx5LFxuICAgIHZhbHVlcy5oZWFkZXJGb250RmFtaWx5LFxuICAgIHZhbHVlcy5ib2R5Rm9udFdlaWdodCxcbiAgICB2YWx1ZXMuaGVhZGVyRm9udFNpemUsXG4gICAgdmFsdWVzLmJvZHlGb250U3BhY2luZyxcbiAgICB2YWx1ZXMuYm9keUxpbmVIZWlnaHQsXG4gICAgdmFsdWVzLmJnQ29sb3JcbiAgKTtcbiAgc3R5bGUgKz0gaGVhZGVyU3R5bGU7XG4gIC8qIFxuICBjb25zdCBjdXN0b21IZWFkZXJTdHlsZSA9IGNvbmZpZy5zZXRIZWFkZXJTdHlsZShcbiAgICBjb25maWcudHJhbnNmb3JtSGVhZGVyU3R5bGVzKGNvbmZpZy5DVVNUT01fSEVBREVSX1NUWUxFX0VMRU1FTlRTKS5qb2luKFwiLFwiKSxcbiAgICB2YWx1ZXMuaGVhZGVyRm9udEZhbWlseSxcbiAgICB2YWx1ZXMuaGVhZGVyRm9udFNpemUsXG4gICAgdmFsdWVzLmhlYWRlckZvbnRTcGFjaW5nLFxuICAgIHZhbHVlcy5oZWFkZXJMaW5lSGVpZ2h0LFxuICAgIHZhbHVlcy5iZ0NvbG9yXG4gICk7XG4gIHN0eWxlICs9IGN1c3RvbUhlYWRlclN0eWxlO1xuICAqL1xuXG4gIGNvbnN0IGJvZHlTdHlsZSA9IGNvbmZpZy5zZXRCb2R5VGV4dFN0eWxlKFxuICAgIGNvbmZpZy5CT0RZX1NUWUxFLFxuICAgIC8vIGlzT21vVHlwZVR1cm5lZE9uKClcbiAgICAvLyAgID8gdmFsdWVzLmJvZHlGb250RmFtaWx5ICtcbiAgICAvLyAgICAgICBzZXRGb250V2VpZ2h0SWQodmFsdWVzLmJvZHlGb250V2VpZ2h0KVswXS5vbW9UeXBlXG4gICAgLy8gICA6IHZhbHVlcy5ib2R5Rm9udEZhbWlseSxcbiAgICB2YWx1ZXMuYm9keUZvbnRGYW1pbHksXG4gICAgdmFsdWVzLmJvZHlGb250V2VpZ2h0LFxuICAgIHZhbHVlcy5ib2R5Rm9udFNpemUsXG4gICAgdmFsdWVzLmJvZHlGb250U3BhY2luZyxcbiAgICB2YWx1ZXMuYm9keUxpbmVIZWlnaHQsXG4gICAgdmFsdWVzLmJnQ29sb3JcbiAgKTtcbiAgc3R5bGUgKz0gYm9keVN0eWxlO1xuXG4gIGNvbnN0IHdpZGdldFN0eWxlID0gY29uZmlnLnNldE9tb1dpZGdldFN0eWxlKFxuICAgIGNvbmZpZy5PTU9fV0lER0VUX0VMRU1FTlRTLFxuICAgIGNvbmZpZy5vbW9XaWRnZXRTdHlsZVxuICApO1xuICBzdHlsZSArPSB3aWRnZXRTdHlsZTtcblxuICBjb25zdCB0d2Vha3MgPSBjb25maWcuVFdFQUsoKTtcbiAgY29uc29sZS5sb2codHdlYWtzKTtcbiAgc3R5bGUgKz0gdHdlYWtzO1xuICBjb25zb2xlLmxvZyhzdHlsZSk7XG4gIHJldHVybiBzdHlsZTtcbn1cblxuY29uc3Qgc2F2ZUNvb2tpZSA9IHRleHQgPT4ge1xuICBjb25zdCBuYW1lID0gYCR7Y29uZmlnLk9NT19XSURHRVRfQ09PS0lFfV8ke3RleHR9YDtcbiAgY29uc3QgdmFsdWUgPSBKU09OLnN0cmluZ2lmeShnZXRVc2VyQXBwbGllZFZhbHVlcygpKTtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYCR7bmFtZX1gLCB2YWx1ZSk7XG4gIC8vIGRvY3VtZW50LmNvb2tpZSA9IGAke25hbWV9PSR7dmFsdWV9OyBTYW1lU2l0ZT1Ob25lOyBTZWN1cmU7YDtcbiAgY29uc29sZS5sb2coYHNhdmVkOiR7dmFsdWV9YCk7XG59O1xuXG4vKiogU0FWRVMgQ1VSUkVOVCBDT05GSUdVUkFUSU9OIFJFRkFDVE9SIFxuY29uc3Qgc2F2ZUNvbmYgPSBldmVudCA9PiB7XG4gIGNvbnN0IHRleHQgPSBcIlwiOyAvLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb21vQ29uZicpLnZhbHVlO1xuICBpZiAoXG4gICAgZXZlbnQudGFyZ2V0LnR5cGUgPT09IFwiYnV0dG9uXCIgfHxcbiAgICBldmVudC50YXJnZXQudHlwZSA9PT0gXCJpbWFnZVwiIHx8XG4gICAgZXZlbnQudGFyZ2V0LnR5cGUgPT09IFwiY2hlY2tib3hcIlxuICApIHtcbiAgICBzYXZlQ29va2llKHRleHQpO1xuICB9XG59O1xuKi9cblxuLyoqIFJFQUQgVkFMVUUgRlJPTSBTQVZFRCBDT09LSUUgKi9cbmNvbnN0IHJlYWRDb29raWUgPSBmbiA9PiB7XG4gIC8vIGNvbnN0IGNvb2tpZSA9IGRvY3VtZW50LmNvb2tpZVxuICAvLyAgIC5zcGxpdChcIjtcIilcbiAgLy8gICAuZmlsdGVyKGVsID0+IGVsLnN0YXJ0c1dpdGgoYCAke2NvbmZpZy5PTU9fV0lER0VUX0NPT0tJRX1gKSk7XG4gIC8vIGlmIChjb29raWUubGVuZ3RoID4gMCkge1xuICAvLyAgIGNvbnN0IGRhdGEgPSBjb29raWVbMF0uc3BsaXQoXCI9XCIpWzFdO1xuICBsZXQgZGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGAke2NvbmZpZy5PTU9fV0lER0VUX0NPT0tJRX1fYCk7XG4gIGNvbnNvbGUubG9nKGRhdGEgPT09IG51bGwpO1xuICBpZiAoZGF0YSA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHNldFVzZXJBcHBsaWVkVmFsdWVzKEpTT04ucGFyc2UoZGF0YSksIGZuKTtcbiAgaWYgKCFnZXRVc2VyQXBwbGllZFZhbHVlcygpLmNoZWNrZWQpIHtcbiAgICBjb25zdCB3aWRnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI29tby13aWRnZXRcIik7XG4gICAgd2lkZ2V0LmNsYXNzTGlzdFtcImFkZFwiXShcImhhcy1jaGFuZ2VzXCIpO1xuICAgIGFwcGx5T3ZlcmlkZXMoKTtcbiAgfVxuICAvLyB9XG59O1xuXG5mdW5jdGlvbiBnZXRMYXN0QXBwbGllZFN0eWxlU2hlZXQoKSB7XG4gIGNvbnN0IGNoaWxkcmVuID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuICBjb25zdCBsZW4gPSBjaGlsZHJlbi5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN0eWxlXCIpLmxlbmd0aDtcbiAgY29uc3Qgc3R5bGUgPSBjaGlsZHJlbi5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN0eWxlXCIpW2xlbiAtIDFdO1xuICByZXR1cm4gc3R5bGU7XG59XG5cbmNvbnN0IGZvcmNlUmVkcmF3ID0gZWxlbWVudCA9PiB7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG4gPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIiBcIik7XG4gIGNvbnN0IGRpc3AgPSBlbGVtZW50LnN0eWxlLmRpc3BsYXk7XG4gIGVsZW1lbnQuYXBwZW5kQ2hpbGQobik7XG4gIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IGRpc3A7XG4gICAgbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pO1xuICB9LCAwKTtcbn07XG5cbmNvbnN0IGFwcGx5T3ZlcmlkZXMgPSAoKSA9PiB7XG4gIGNvbnN0IG9tb1N0eWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvbW9sYWJfc3R5bGVfd1wiKTtcbiAgbGV0IHN0eWxlID0gZ2V0TGFzdEFwcGxpZWRTdHlsZVNoZWV0KCk7XG4gIGlmIChvbW9TdHlsZSkge1xuICAgIHN0eWxlLmlubmVySFRNTCA9IGdlbmVyYXRlT21vU3R5bGUoKTtcbiAgICBmb3JjZVJlZHJhdyhzdHlsZSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGNzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgY3NzLnR5cGUgPSBcInRleHQvY3NzXCI7XG4gIGNzcy5pZCA9IFwib21vbGFiX3N0eWxlX3dcIjtcbiAgc3R5bGUgPSBnZW5lcmF0ZU9tb1N0eWxlKCk7XG4gIGlmIChjc3Muc3R5bGVTaGVldCkge1xuICAgIGNzcy5zdHlsZVNoZWV0LmNzc1RleHQgPSBzdHlsZTtcbiAgfSBlbHNlIHtcbiAgICBjc3MuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3R5bGUpKTtcbiAgfVxuXG4gIC8qIEFwcGVuZCBzdHlsZSB0byB0aGUgdGFnIG5hbWUgKi9cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdLmFwcGVuZENoaWxkKGNzcyk7XG59O1xuXG5jb25zdCByZW1vdmVPdmVyaWRlcyA9ICgpID0+IHtcbiAgY29uc3QgYXBwbGllZFN0eWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvbW9sYWJfc3R5bGVfd1wiKTtcbiAgY29uc3QgY2hpbGRyZW4gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XG4gIGNvbnN0IHN0eWxlID0gZ2V0TGFzdEFwcGxpZWRTdHlsZVNoZWV0KCk7XG4gIGNvbnNvbGUubG9nKGFwcGxpZWRTdHlsZSA9PT0gc3R5bGUpO1xuICAvKiogIGlmIG9tb2xhYl9zdHlsZV93IHN0eWxlc2hlZXQgaXMgYXBwbGllZCByZW1vdmUgaXQsIG90aGVyd2lzZSBpZ25vcmUgKi9cbiAgaWYgKGFwcGxpZWRTdHlsZSA9PT0gc3R5bGUpIHtcbiAgICBjaGlsZHJlbi5yZW1vdmVDaGlsZChzdHlsZSk7XG4gIH1cbn07XG4vKlxuZnVuY3Rpb24gYXBwbHlPbW9TdHlsZXMoZXZlbnQpIHtcbiAgY29uc3QgY2hlY2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcGx5T3ZlcmlkZXNcIikuY2hlY2tlZDtcbiAgY2hlY2sgPyBhcHBseU92ZXJpZGVzKCkgOiByZW1vdmVPdmVyaWRlcygpO1xuICBzYXZlQ29uZihldmVudCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5T21vU3R5bGVzVG90ZW0oKSB7XG4gIGFsZXJ0KFwiYXBwbHlPbW9TdHlsZXNUb3RlbVwiKTtcbiAgY29uc3QgY2hlY2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcGx5T3ZlcmlkZXNcIikuY2hlY2tlZDtcbiAgY2hlY2sgPyBhcHBseU92ZXJpZGVzKCkgOiByZW1vdmVPdmVyaWRlcygpO1xuICAvLyBzYXZlQ29uZihldmVudCk7XG59XG4qL1xuZXhwb3J0IGNvbnN0IHNob3dXaWRnZXQgPSAodGV4dCwgY29uZmlndXJhdGlvbnMpID0+IHtcbiAgLy8gY29udmVydCBwbGFpbiBIVE1MIHN0cmluZyBpbnRvIERPTSBlbGVtZW50c3NcbiAgY29uc3QgdGVtcG9yYXJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgdGVtcG9yYXJ5LmlubmVySFRNTCA9IGh0bWw7XG4gIGNvbnNvbGUubG9nKHRleHQpO1xuICBjb25zb2xlLmxvZyhjb25maWd1cmF0aW9ucyk7XG5cbiAgYWRkT21vbGFiQ2xhc3NTY29wZVRvQm9keShkb2N1bWVudCk7XG4gIC8vIGFwcGVuZCBlbGVtZW50cyB0byBib2R5XG4gIGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwib21vLXdpZGdldC1jb250YWluZXJcIilbMF07XG4gIHdoaWxlICh0ZW1wb3JhcnkuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHRtcCA9IHRlbXBvcmFyeS5jaGlsZHJlblswXTtcbiAgICBlbGVtZW50cy5wdXNoKHRtcCk7XG4gICAgYm9keS5hcHBlbmRDaGlsZCh0bXApO1xuICB9XG4gIHZhciBoYW5kbGUgPSBpbml0T21vV2lkZ2V0Q29udHJvbHMoKTtcblxuICBjb25maWdcbiAgICAucmVhZENvbmZpZ3VyYXRpb25Gcm9tRmlsZShjb25maWd1cmF0aW9ucy5jb25maWcpXG4gICAgLnRoZW4obWVzc2FnZSA9PiB7XG4gICAgICAvLyBwdXNoIGRlZmF1bHQgZm9udCBmcm9tIGNvbmZpZ3VyYXRpb25cbiAgICAgIEhFQURFUl9GT05UX0NIT09TRVIucHVzaCh7IGlkOiAwLCB2YWx1ZTogY29uZmlnLkhFQURFUl9GT05UX0ZBTUlMWSB9KTtcbiAgICAgIEJPRFlfRk9OVF9DSE9PU0VSLnB1c2goeyBpZDogMCwgdmFsdWU6IGNvbmZpZy5CT0RZX0ZPTlRfRkFNSUxZIH0pO1xuICAgICAgTElORV9IRUlHSFQucHVzaCh7IGlkOiAwLCB2YWx1ZTogY29uZmlnLkJPRFlfTElORV9IRUlHSFQgfSk7XG4gICAgICBGT05UX1dFSUdIVC5wdXNoKHsgaWQ6IDAsIHZhbHVlOiBjb25maWcuQk9EWV9GT05UX1dFSUdIVCB9KTtcbiAgICAgIExFVFRFUl9TUEFDSU5HLnB1c2goeyBpZDogMCwgdmFsdWU6IGNvbmZpZy5CT0RZX0ZPTlRfU1BBQ0lORyB9KTtcbiAgICAgIENPTE9SX01BUC5wdXNoKHsgaWQ6IC0xLCB2YWx1ZTogY29uZmlnLkRFRkFVTFRfQkFDS0dST1VORCB9KTtcbiAgICAgIHZhciBjb2xvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VsZWN0ZWRCYWNrcm91bmRcIik7XG4gICAgICBjb25zb2xlLmxvZyhnZXRDb2xvcigtMSkpO1xuICAgICAgY29sb3Iuc2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZVwiLCBnZXRDb2xvcigtMSlbMF0uaWQpO1xuICAgICAgcmVhZENvb2tpZShoYW5kbGUpO1xuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgYWxlcnQoZXJyKTtcbiAgICB9KTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4vLyBpbXBvcnQgc2hvd1dpZGdldCBmcm9tICcuL3ZpZXdzL29tb1RvdGVtV2lkZ2V0JztcbmltcG9ydCB7IHNob3dXaWRnZXQgfSBmcm9tIFwiLi92aWV3cy90b3RlbVdpZGdldFwiO1xuLy8nLi92aWV3cy9vbW9XaWRnZXQnO1xuXG5jb25zdCBzdXBwb3J0ZWRBUEkgPSBbXCJpbml0XCIsIFwibWVzc2FnZVwiXTsgLy8gZW5saXN0IGFsbCBtZXRob2RzIHN1cHBvcnRlZCBieSBBUEkgKGUuZy4gYG13KCdldmVudCcsICd1c2VyLWxvZ2luJyk7YClcblxubGV0IGNvbmZpZ3VyYXRpb25zID0ge307XG4vKipcbiAgICBNZXRob2QgdGhhdCBoYW5kbGVzIGFsbCBBUEkgY2FsbHNcbiAgICAqL1xuZnVuY3Rpb24gYXBpSGFuZGxlcihhcGksIHBhcmFtcykge1xuICBpZiAoIWFwaSkgdGhyb3cgRXJyb3IoXCJBUEkgbWV0aG9kIHJlcXVpcmVkXCIpO1xuICBhcGkgPSBhcGkudG9Mb3dlckNhc2UoKTtcblxuICBpZiAoc3VwcG9ydGVkQVBJLmluZGV4T2YoYXBpKSA9PT0gLTEpXG4gICAgdGhyb3cgRXJyb3IoYE1ldGhvZCAke2FwaX0gaXMgbm90IHN1cHBvcnRlZGApO1xuXG4gIGNvbnNvbGUubG9nKGBIYW5kbGluZyBBUEkgY2FsbCAke2FwaX1gLCBwYXJhbXMpO1xuXG4gIHN3aXRjaCAoYXBpKSB7XG4gICAgLy8gVE9ETzogYWRkIEFQSSBpbXBsZW1lbnRhdGlvblxuICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICBzaG93V2lkZ2V0KHBhcmFtcywgY29uZmlndXJhdGlvbnMpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGNvbnNvbGUud2FybihgTm8gaGFuZGxlciBkZWZpbmVkIGZvciAke2FwaX1gKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRlbmRPYmplY3QoYSwgYikge1xuICBmb3IgKGNvbnN0IGtleSBpbiBiKSB7XG4gICAgaWYgKGIuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgYVtrZXldID0gYltrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gICAgVGhlIG1haW4gZW50cnkgb2YgdGhlIGFwcGxpY2F0aW9uXG4gICAgKi9cbmZ1bmN0aW9uIGFwcCh3aW5kb3cpIHtcbiAgY29uc29sZS5sb2coXCJPbW8tV2lkZ2V0IHN0YXJ0aW5nXCIpO1xuICAvLyBhbGwgbWV0aG9kcyB0aGF0IHdlcmUgY2FsbGVkIHRpbGwgbm93IGFuZCBzdG9yZWQgaW4gcXVldWVcbiAgLy8gbmVlZHMgdG8gYmUgY2FsbGVkIG5vd1xuXG4gIGxldCBnbG9iYWxPYmplY3QgPSB3aW5kb3dbd2luZG93W1wiT21vLVdpZGdldFwiXV07XG4gIGNvbnN0IHF1ZXVlID0gZ2xvYmFsT2JqZWN0LnE7XG4gIGlmIChxdWV1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChxdWV1ZVtpXVswXS50b0xvd2VyQ2FzZSgpID09PSBcImluaXRcIikge1xuICAgICAgICBjb25maWd1cmF0aW9ucyA9IGV4dGVuZE9iamVjdChjb25maWd1cmF0aW9ucywgcXVldWVbaV1bMV0pO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnT21vLVdpZGdldCBzdGFydGVkJywgY29uZmlndXJhdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBpSGFuZGxlcihxdWV1ZVtpXVswXSwgcXVldWVbaV1bMV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIG92ZXJyaWRlIHRlbXBvcmFyeSAodW50aWwgdGhlIGFwcCBsb2FkZWQpIGhhbmRsZXJcbiAgLy8gZm9yIHdpZGdldCdzIEFQSSBjYWxsc1xuICBnbG9iYWxPYmplY3QgPSBhcGlIYW5kbGVyO1xuICBnbG9iYWxPYmplY3QuY29uZmlndXJhdGlvbnMgPSBjb25maWd1cmF0aW9ucztcbn1cblxuYXBwKHdpbmRvdyk7XG4iXSwic291cmNlUm9vdCI6IiJ9