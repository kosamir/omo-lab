!function(e){var n={};function t(o){if(n[o])return n[o].exports;var i=n[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)t.d(o,i,function(n){return e[n]}.bind(null,i));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=8)}([function(e,n,t){var o=this;n.IMPORTANT_ELEMENTS_SELECTOR='*:not(img):not(:empty):not([aria-hidden="true"]):not([class*="icon"])';var i="omolab-w-body-".concat(Date.now(),"-").concat(Math.ceil(1e3*Math.random()));n.OMOLAB_BODY_CLASS=i;n.OMO_WIDGET_COOKIE="omolab-w-cookie";n.BODY_FONT_FAMILY,n.HEADER_STYLE_ELEMENTS=void 0,n.CUSTOM_HEADER_STYLE_ELEMENTS=void 0;var a=function(e){return"".concat(e,"px")},r=function(e){console.log("inverseFontFaceColor:"+e);var n="";return void 0!==e&&"#231F20"===e.trim()&&(n="color:white !important;"),void 0!==e&&"#EFF3EE"===e.trim()&&(n="color:black !important;"),n};n.transformHeaderStyles=function(e){return e.map((function(e){return"body.".concat(i," ").concat(e,", body.").concat(i," ").concat(e," * ")}))},n.setHeaderStyle=function(e,n,t,i,s,d){return"".concat(e,"{ \n    font-family:").concat(n," !important; \n    font-size:").concat(a(t||o.HEADER_FONT_SIZE)," !important; \n    letter-spacing:").concat(a(i||o.HEADER_FONT_SPACING)," !important; \n    line-height:").concat(a(s||o.HEADER_LINE_HEIGHT)," !important;\n    ").concat(r(d),"}\n")},n.OMO_WIDGET_ELEMENTS=void 0;var s=function(e){return e.map((function(e){return"body.".concat(i," ").concat(e)}))};n.omoWidgetStyle="{ color:black }\n";n.setOmoWidgetStyle=function(e,n){return"".concat(s(e).join(",")," ").concat(n)};n.TWEAK=function(){return(e=i,n=o.ELEMENTS_TO_TWEAK_STYLE,t=[],n.forEach((function(n){t.push("body.".concat(e," ").concat(n.element," {").concat(n.style,"}"))})),t).join(",").replace(",","\n");var e,n,t},n.BODY_STYLE=void 0;n.setBodyTextStyle=function(e,n,t,i,d,c,l){return n?"".concat(s(e).join(","),"{ \n    font-family:").concat(n," !important; \n    font-size:").concat(a(i||o.BODY_FONT_SIZE)," !important; \n    font-weight:").concat(t," !important;\n    letter-spacing:").concat(a(d||o.BODY_FONT_SPACING)," !important; \n    line-height:").concat(c||o.BODY_LINE_HEIGHT," !important; \n    ").concat(r(l),"}\n"):""},n.BACKGROUND_COLOR_ELEMENTS=void 0;n.setBackGroundColor=function(e,n){return n?"".concat(s(e).join(",")," { background-color: ").concat(n," !important; ").concat(r(n),"}\n"):""};var d=t(2);n.readConfigurationFromFile=function(e){return new Promise((function(n,t){d(e).then((function(e){if(!e.ok)throw Error(e.statusText);return e.json()})).then((function(e){if(o.BODY_FONT_FAMILY=e.BODY_FONT_FAMILY||"Roboto",o.HEADER_STYLE_ELEMENTS=e.HEADER_STYLE_ELEMENTS,o.CUSTOM_HEADER_STYLE_ELEMENTS=e.CUSTOM_HEADER_STYLE_ELEMENTS,o.OMO_WIDGET_ELEMENTS=e.OMO_WIDGET_ELEMENTS,o.ELEMENTS_TO_TWEAK_STYLE=e.ELEMENTS_TO_TWEAK_STYLE,o.BODY_STYLE=e.BODY_STYLE,o.BACKGROUND_COLOR_ELEMENTS=e.BACKGROUND_COLOR_ELEMENTS,o.HEADER_LINE_HEIGHT=e.HEADER_LINE_HEIGHT||0,o.HEADER_FONT_SPACING=e.HEADER_FONT_SPACING||20,o.HEADER_FONT_SIZE=e.HEADER_FONT_SIZE||20,o.BODY_LINE_HEIGHT=e.BODY_LINE_HEIGHT||0,o.BODY_LINE_HEIGHT_MAX=e.BODY_LINE_HEIGHT_MAX||40,o.BODY_FONT_SPACING=e.BODY_FONT_SPACING||0,o.BODY_FONT_SIZE=e.BODY_FONT_SIZE||13,o.BODY_FONT_SIZE_MAX=e.BODY_FONT_SIZE_MAX||30,o.BODY_FONT_WEIGHT=e.BODY_FONT_WEIGHT||"normal",o.DEFAULT_BACKGROUND=e.DEFAULT_BACKGROUND||"transparent",[o.HEADER_STYLE_ELEMENTS,o.BODY_STYLE,o.BACKGROUND_COLOR_ELEMENTS,o.OMO_WIDGET_ELEMENTS,o.CUSTOM_HEADER_STYLE_ELEMENTS].includes(void 0))throw Error("HEADER_STYLE_ELEMENTS,CUSTOM_HEADER_STYLE_ELEMENTS, OMO_WIDGET_ELEMENTS,BODY_STYLE, BACKGROUND_COLOR_ELEMENTS are mandatory!!!");n("FINISHED LOADING STYLESHEET")})).catch((function(n){t("".concat(n," in file ").concat(e))}))}))}},function(e,n){e.exports='<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <meta http-equiv="X-UA-Compatible" content="ie=edge" />\n    <title>Omo</title>\n    <link rel="stylesheet" href="/totemWidget.css" />\n  </head>\n\n  <body>\n    <div id="omo-widget" class="omo-widget">\n      <input\n        type="checkbox"\n        name="main-toggle"\n        class="omo-widget__main-toggle"\n        title="Open options"\n      />\n      <fieldset data-setting-name="font-size">\n        <legend>Font size</legend>\n        <input\n          type="radio"\n          class="omo-widget__toggle-options"\n          aria-selected="false"\n          name="option-opened"\n          value="1"\n          title="Font Size"\n        />\n        <svg viewBox="0 0 32 27">\n          <use xlink:href="/assets/icon-font-size.svg#font-size"></use>\n        </svg>\n        <form action="#">\n          <button type="reset" class="omo-widget__reset">\n            <svg viewBox="0 0 25 25">\n              <use xlink:href="/assets/icon-reset.svg#reset"></use>\n            </svg>\n          </button>\n          <button type="button" tabindex="-1" class="omo-widget__add">+</button>\n          <button type="button" tabindex="-1" class="omo-widget__substract">\n            -\n          </button>\n          <input\n            id="totem_bsize"\n            type="number"\n            class="omo-widget__option-value"\n            value="0"\n            min="1"\n            max="30"\n            name="totem_bsize"\n            required\n          />\n        </form>\n      </fieldset>\n      <fieldset data-setting-name="font-type">\n        <legend>Font type</legend>\n        <input\n          type="radio"\n          class="omo-widget__toggle-options"\n          aria-selected="false"\n          name="option-opened"\n          value="2"\n          title="Font Type"\n        />\n        <svg viewBox="0 0 27 32">\n          <use xlink:href="/assets/letters/O.svg#O"></use>\n        </svg>\n        <form action="#">\n          <button type="reset" class="omo-widget__reset">\n            <svg viewBox="0 0 25 25">\n              <use xlink:href="/assets/icon-reset.svg#reset"></use>\n            </svg>\n          </button>\n          <button type="button" tabindex="-1" class="omo-widget__add">+</button>\n          <div class="omo-widget__type-preview">\n            <svg viewBox="0 0 27 32">\n              <use xlink:href="/assets/letters/O.svg#O"></use>\n            </svg>\n            <svg viewBox="0 0 27 32">\n              <use xlink:href="/assets/letters/A.svg#A"></use>\n            </svg>\n            <svg viewBox="0 0 27 32">\n              <use xlink:href="/assets/letters/B.svg#B"></use>\n            </svg>\n            <svg viewBox="0 0 27 32">\n              <use xlink:href="/assets/letters/C.svg#C"></use>\n            </svg>\n            <svg viewBox="0 0 27 32">\n              <use xlink:href="/assets/letters/D.svg#D"></use>\n            </svg>\n            <svg viewBox="0 0 27 32">\n              <use xlink:href="/assets/letters/E.svg#E"></use>\n            </svg>\n          </div>\n          <button type="button" tabindex="-1" class="omo-widget__substract">\n            -\n          </button>\n          <input\n            id="totem_body_ff"\n            type="number"\n            class="omo-widget__option-value"\n            value="0"\n            min="1"\n            max="5"\n            name="totem_body_ff"\n          />\n        </form>\n      </fieldset>\n      <fieldset data-setting-name="font-weight">\n        <legend>Font weight</legend>\n        <input\n          type="radio"\n          class="omo-widget__toggle-options"\n          aria-selected="false"\n          name="option-opened"\n          value="2"\n          title="Font Weight"\n        />\n        <svg viewBox="0 0 35 24">\n          <use xlink:href="/assets/icon-font-weight.svg#font-weight"></use>\n        </svg>\n        <form action="#">\n          <button type="reset" class="omo-widget__reset">\n            <svg viewBox="0 0 25 25">\n              <use xlink:href="/assets/icon-reset.svg#reset"></use>\n            </svg>\n          </button>\n          <button type="button" tabindex="-1" class="omo-widget__add">+</button>\n          <button type="button" tabindex="-1" class="omo-widget__substract">\n            -\n          </button>\n          <input\n            id="totem_font_weight"\n            type="number"\n            class="omo-widget__option-value"\n            value="0"\n            min="1"\n            max="4"\n            name="totem_font_weight"\n          />\n        </form>\n      </fieldset>\n      <fieldset data-setting-name="letter-spacing">\n        <legend>Letter spacing</legend>\n        <input\n          type="radio"\n          class="omo-widget__toggle-options"\n          aria-selected="false"\n          name="option-opened"\n          value="2"\n          title="Letter spacing"\n        />\n        <svg viewBox="0 0 32 27">\n          <use\n            xlink:href="/assets/icon-letter-spacing.svg#letter-spacing"\n          ></use>\n        </svg>\n\n        <form action="#">\n          <button type="reset" class="omo-widget__reset">\n            <svg viewBox="0 0 25 25">\n              <use xlink:href="/assets/icon-reset.svg#reset"></use>\n            </svg>\n          </button>\n          <button type="button" tabindex="-1" class="omo-widget__add">+</button>\n          <button type="button" tabindex="-1" class="omo-widget__substract">\n            -\n          </button>\n          <input\n            id="totem_bspacing"\n            type="number"\n            class="omo-widget__option-value"\n            value="0"\n            min="1"\n            max="4"\n            name="totem_bspacing"\n          />\n        </form>\n      </fieldset>\n      <fieldset data-setting-name="line-height">\n        <legend>Line height</legend>\n        <input\n          type="radio"\n          class="omo-widget__toggle-options"\n          aria-selected="false"\n          name="option-opened"\n          value="3"\n          title="Line height"\n        />\n        <svg viewBox="0 0 32 28">\n          <use xlink:href="/assets/icon-line-height.svg#line-height"></use>\n        </svg>\n        <form action="#" data-setting-name="line-height">\n          <button type="reset" class="omo-widget__reset">\n            <svg viewBox="0 0 25 25">\n              <use xlink:href="/assets/icon-reset.svg#reset"></use>\n            </svg>\n          </button>\n          <button type="button" tabindex="-1" class="omo-widget__add">+</button>\n          <button type="button" tabindex="-1" class="omo-widget__substract">\n            -\n          </button>\n          <input\n            id="totem_bheight"\n            type="number"\n            class="omo-widget__option-value"\n            value="0"\n            min="1"\n            max="4"\n            name="totem_bheight"\n          />\n        </form>\n      </fieldset>\n      <fieldset id="selectedBackround" data-setting-name="background">\n        <legend>Background</legend>\n        <input\n          type="radio"\n          class="omo-widget__toggle-options"\n          aria-selected="false"\n          name="option-opened"\n          value="4"\n          title="Background"\n        />\n        <form action="#">\n          <button type="reset" class="omo-widget__reset">\n            <svg viewBox="0 0 25 25">\n              <use xlink:href="/assets/icon-reset.svg#reset"></use>\n            </svg>\n          </button>\n          <input\n            class="omo-widget__background-choice"\n            type="radio"\n            name="background"\n            required\n            value="0"\n          />\n          <input\n            class="omo-widget__background-choice"\n            type="radio"\n            name="background"\n            required\n            value="1"\n          />\n          <input\n            class="omo-widget__background-choice"\n            type="radio"\n            name="background"\n            required\n            value="2"\n          />\n          <input\n            class="omo-widget__background-choice"\n            type="radio"\n            name="background"\n            required\n            value="3"\n          />\n          <input\n            class="omo-widget__background-choice"\n            type="radio"\n            name="background"\n            required\n            value="4"\n          />\n          <input\n            class="omo-widget__background-choice"\n            type="radio"\n            name="background"\n            required\n            value="5"\n          />\n        </form>\n      </fieldset>\n      <fieldset\n        class="omo-widget__power-toggle-wrap"\n        data-setting-name="widget-active"\n      >\n        <input\n          id="applyOverides"\n          class="omo-widget__power-toggle"\n          type="checkbox"\n          title="Toggle options"\n        />\n        <svg viewBox="0 0 24 29">\n          <use xlink:href="/assets/icon-power.svg#power"></use>\n        </svg>\n      </fieldset>\n      <div class="omo-widget__link-wrap">\n        <a\n          href="https://omolab.com/"\n          target="_blank"\n          data-setting-name="widget-info"\n          title="Find out more"\n        >\n          <svg viewBox="0 0 10 31">\n            <use xlink:href="/assets/icon-info.svg#info"></use>\n          </svg>\n        </a>\n      </div>\n    </div>\n    \x3c!-- <script src="./totemWidget.js"><\/script>\n    <script>\n      initOmoWidgetControls();\n    <\/script> --\x3e\n  </body>\n</html>\n'},function(e,n,t){"use strict";var o=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==o)return o;throw new Error("unable to locate global object")}();e.exports=n=o.fetch,n.default=o.fetch.bind(o),n.Headers=o.Headers,n.Request=o.Request,n.Response=o.Response},function(e,n,t){var o=t(4);"string"==typeof o&&(o=[[e.i,o,""]]);var i={hmr:!0,transform:void 0};t(6)(o,i);o.locals&&(e.exports=o.locals)},function(e,n,t){(e.exports=t(5)(!1)).push([e.i,'@font-face {\n  font-family: OmoTypeA-;\n  src: url("/fonts/woff/OmoTypeA-RegularOne.woff");\n}\n\n@font-face {\n  font-family: OmoTypeB-;\n  src: url("/fonts/woff/OmoTypeB-RegularOne.woff");\n}\n@font-face {\n  font-family: OmoTypeC-;\n  src: url("/fonts/woff/OmoTypeC-RegularOne.woff");\n}\n@font-face {\n  font-family: OmoTypeD-;\n  src: url("/fonts/woff/OmoTypeD-RegularOne.woff");\n}\n@font-face {\n  font-family: OmoTypeE-;\n  src: url("/fonts/woff/OmoTypeE-RegularOne.woff");\n}\n@font-face {\n  font-family: dBoldOne;\n  src: url("/fonts/woff/OmoTypeD-BoldOne.woff");\n}\n@font-face {\n  font-family: dBlackOne;\n  src: url("/fonts/woff/OmoTypeD-BlackOne.woff");\n}\n@font-face {\n  font-family: dBlackTwo;\n  src: url("/fonts/woff/OmoTypeD-BlackTwo.woff");\n}\n\n.omo-widget {\n  --primary: #eb8b2d;\n  --secondary: #2093aa;\n  --svgFill: white;\n  --size: 46px;\n  --margin-size: 2px;\n  --sizeAdjusted: calc(var(--size) + 2 * var(--margin-size));\n  --animationSpeed: 0.15s;\n  position: fixed;\n  z-index: 9999999999999 !important;\n  bottom: calc(var(--size) * 0.5);\n  right: calc(var(--size) * 0.5);\n  background-color: black;\n  font-size: 0;\n  border-radius: calc(var(--size) / 2 + var(--margin-size));\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: reverse;\n  -ms-flex-direction: column-reverse;\n  flex-direction: column-reverse;\n}\n\n@media (min-width: 768px) {\n  .omo-widget {\n    --size: 62px;\n    --margin-size: 3px;\n    top: calc(var(--size) * 0.5);\n    bottom: auto;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: column;\n    flex-direction: column;\n  }\n}\n\n.omo-widget * {\n  margin: 0;\n  padding: 0;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.omo-widget *:focus {\n  outline: none;\n  -webkit-box-shadow: 0 0 0px var(--margin-size) var(--secondary);\n  box-shadow: 0 0 0px var(--margin-size) var(--secondary);\n}\n\n.omo-widget__main-toggle {\n  border: calc(5 * var(--margin-size)) solid black !important;\n  background: white !important;\n}\n\n.omo-widget__main-toggle ~ * {\n  -webkit-transition: height var(--animationSpeed) ease var(--animationSpeed),\n    opacity var(--animationSpeed) ease,\n    -webkit-transform var(--animationSpeed) ease;\n  transition: height var(--animationSpeed) ease var(--animationSpeed),\n    opacity var(--animationSpeed) ease,\n    -webkit-transform var(--animationSpeed) ease;\n  transition: height var(--animationSpeed) ease var(--animationSpeed),\n    transform var(--animationSpeed) ease, opacity var(--animationSpeed) ease;\n  transition: height var(--animationSpeed) ease var(--animationSpeed),\n    transform var(--animationSpeed) ease, opacity var(--animationSpeed) ease,\n    -webkit-transform var(--animationSpeed) ease;\n  -webkit-transform: scale(0.8);\n  transform: scale(0.8);\n  height: 0;\n  opacity: 0;\n  z-index: 2;\n  pointer-events: none;\n}\n\n.omo-widget__main-toggle:checked ~ * {\n  -webkit-transition: height var(--animationSpeed) ease,\n    opacity var(--animationSpeed) ease var(--animationSpeed),\n    -webkit-transform var(--animationSpeed) ease var(--animationSpeed);\n  transition: height var(--animationSpeed) ease,\n    opacity var(--animationSpeed) ease var(--animationSpeed),\n    -webkit-transform var(--animationSpeed) ease var(--animationSpeed);\n  transition: height var(--animationSpeed) ease,\n    transform var(--animationSpeed) ease var(--animationSpeed),\n    opacity var(--animationSpeed) ease var(--animationSpeed);\n  transition: height var(--animationSpeed) ease,\n    transform var(--animationSpeed) ease var(--animationSpeed),\n    opacity var(--animationSpeed) ease var(--animationSpeed),\n    -webkit-transform var(--animationSpeed) ease var(--animationSpeed);\n  height: var(--sizeAdjusted);\n  opacity: 1;\n  -webkit-transform: scale(1);\n  transform: scale(1);\n  pointer-events: all;\n}\n\n.omo-widget__main-toggle:checked ~ * .omo-widget__link-wrap {\n  height: calc(var(--size) + var(--margin-size));\n}\n\n.omo-widget__main-toggle:checked ~ * .omo-widget__link-wrap a {\n  margin-bottom: 0;\n}\n\n.omo-widget__power-toggle-wrap {\n  pointer-events: none !important;\n}\n\n.omo-widget__power-toggle-wrap > * {\n  opacity: 0.5;\n}\n\n.omo-widget.has-changes\n  .omo-widget__main-toggle:checked\n  ~ .omo-widget__power-toggle-wrap {\n  pointer-events: all !important;\n}\n\n.omo-widget.has-changes\n  .omo-widget__main-toggle:checked\n  ~ .omo-widget__power-toggle-wrap\n  > * {\n  opacity: 1;\n}\n\n.omo-widget.has-changes\n  .omo-widget__main-toggle:checked\n  ~ .omo-widget__power-toggle-wrap\n  .omo-widget__power-toggle {\n  background: var(--primary);\n}\n\n.omo-widget.has-changes .omo-widget__main-toggle {\n  background: var(--primary) !important;\n}\n\n.omo-widget.power-off > .omo-widget__main-toggle {\n  background: white !important;\n}\n\n.omo-widget.power-off\n  > .omo-widget__main-toggle:checked\n  ~ *:not(:nth-last-child(-n + 2)) {\n  opacity: 0.4;\n  pointer-events: none;\n}\n\n.omo-widget.power-off .omo-widget__power {\n  background: black !important;\n}\n\n.omo-widget__add,\n.omo-widget__substract,\n.omo-widget__reset,\n.omo-widget__power-toggle,\n.omo-widget__main-toggle,\n.omo-widget__toggle-options,\n.omo-widget__background-choice,\n.omo-widget__link-wrap a,\n.omo-widget__type-preview {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  display: block;\n  width: var(--size);\n  height: var(--size);\n  margin: var(--margin-size);\n  background: transparent;\n  border: 2px solid white;\n  border-radius: 50%;\n  font-size: 0;\n}\n\n.omo-widget__add:active,\n.omo-widget__add.active,\n.omo-widget__substract:active,\n.omo-widget__substract.active,\n.omo-widget__reset:active,\n.omo-widget__reset.active,\n.omo-widget__power-toggle:active,\n.omo-widget__power-toggle.active,\n.omo-widget__main-toggle:active,\n.omo-widget__main-toggle.active,\n.omo-widget__toggle-options:active,\n.omo-widget__toggle-options.active,\n.omo-widget__background-choice:active,\n.omo-widget__background-choice.active,\n.omo-widget__link-wrap a:active,\n.omo-widget__link-wrap a.active,\n.omo-widget__type-preview:active,\n.omo-widget__type-preview.active {\n  background-color: white;\n}\n\n.omo-widget__add:active + svg,\n.omo-widget__add:active > svg,\n.omo-widget__add.active + svg,\n.omo-widget__add.active > svg,\n.omo-widget__substract:active + svg,\n.omo-widget__substract:active > svg,\n.omo-widget__substract.active + svg,\n.omo-widget__substract.active > svg,\n.omo-widget__reset:active + svg,\n.omo-widget__reset:active > svg,\n.omo-widget__reset.active + svg,\n.omo-widget__reset.active > svg,\n.omo-widget__power-toggle:active + svg,\n.omo-widget__power-toggle:active > svg,\n.omo-widget__power-toggle.active + svg,\n.omo-widget__power-toggle.active > svg,\n.omo-widget__main-toggle:active + svg,\n.omo-widget__main-toggle:active > svg,\n.omo-widget__main-toggle.active + svg,\n.omo-widget__main-toggle.active > svg,\n.omo-widget__toggle-options:active + svg,\n.omo-widget__toggle-options:active > svg,\n.omo-widget__toggle-options.active + svg,\n.omo-widget__toggle-options.active > svg,\n.omo-widget__background-choice:active + svg,\n.omo-widget__background-choice:active > svg,\n.omo-widget__background-choice.active + svg,\n.omo-widget__background-choice.active > svg,\n.omo-widget__link-wrap a:active + svg,\n.omo-widget__link-wrap a:active > svg,\n.omo-widget__link-wrap a.active + svg,\n.omo-widget__link-wrap a.active > svg,\n.omo-widget__type-preview:active + svg,\n.omo-widget__type-preview:active > svg,\n.omo-widget__type-preview.active + svg,\n.omo-widget__type-preview.active > svg {\n  --svgFill: black;\n}\n\n.omo-widget__add:active::after,\n.omo-widget__add.active::after,\n.omo-widget__substract:active::after,\n.omo-widget__substract.active::after,\n.omo-widget__reset:active::after,\n.omo-widget__reset.active::after,\n.omo-widget__power-toggle:active::after,\n.omo-widget__power-toggle.active::after,\n.omo-widget__main-toggle:active::after,\n.omo-widget__main-toggle.active::after,\n.omo-widget__toggle-options:active::after,\n.omo-widget__toggle-options.active::after,\n.omo-widget__background-choice:active::after,\n.omo-widget__background-choice.active::after,\n.omo-widget__link-wrap a:active::after,\n.omo-widget__link-wrap a.active::after,\n.omo-widget__type-preview:active::after,\n.omo-widget__type-preview.active::after {\n  border-color: transparent transparent black transparent;\n}\n\n.omo-widget__link-wrap {\n  margin-bottom: 0;\n  overflow: hidden;\n}\n\n.omo-widget__link-wrap a {\n  background: var(--secondary);\n}\n\n.omo-widget__option-value {\n  display: none;\n}\n\n.omo-widget legend {\n  display: none;\n}\n\n.omo-widget svg {\n  display: block !important;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  pointer-events: none;\n  max-width: 50%;\n  max-height: 50%;\n  height: auto;\n}\n\n.omo-widget form {\n  position: relative;\n}\n\n.omo-widget form:valid::after {\n  content: "";\n  width: var(--size);\n  height: var(--size);\n  background: var(--primary);\n  position: absolute;\n  right: var(--margin-size);\n  top: var(--margin-size);\n  z-index: 323;\n  border-radius: 50%;\n}\n\n.omo-widget form:valid [type="reset"] {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.omo-widget__toggle-options ~ form {\n  -webkit-transition: width var(--animationSpeed) ease var(--animationSpeed);\n  transition: width var(--animationSpeed) ease var(--animationSpeed);\n  width: var(--sizeAdjusted);\n  height: var(--sizeAdjusted);\n  pointer-events: none;\n}\n\n.omo-widget__toggle-options ~ form > * {\n  -webkit-transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  opacity: 0;\n}\n\n.omo-widget__toggle-options:checked ~ form {\n  -webkit-transition: width var(--animationSpeed) ease;\n  transition: width var(--animationSpeed) ease;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  width: calc(3 * var(--sizeAdjusted));\n  pointer-events: all;\n}\n\n.omo-widget__toggle-options:checked ~ form [type="reset"] {\n  -webkit-transition: opacity var(--animationSpeed) ease;\n  transition: opacity var(--animationSpeed) ease;\n  position: absolute;\n  left: 0;\n  opacity: 0;\n}\n\n.omo-widget__toggle-options:checked ~ form:valid {\n  -webkit-transition: width var(--animationSpeed) ease,\n    padding var(--animationSpeed) ease;\n  transition: width var(--animationSpeed) ease,\n    padding var(--animationSpeed) ease;\n  width: calc(4 * var(--sizeAdjusted));\n  padding-left: var(--sizeAdjusted);\n}\n\n.omo-widget__toggle-options:checked ~ form:valid [type="reset"] {\n  -webkit-transition: opacity var(--animationSpeed) ease;\n  transition: opacity var(--animationSpeed) ease;\n  opacity: 1;\n}\n\n.omo-widget__toggle-options:checked ~ form > * {\n  -webkit-transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  opacity: 1;\n}\n\n.omo-widget__toggle-options > * {\n  -webkit-transition: opacity var(--animationSpeed) ease;\n  transition: opacity var(--animationSpeed) ease;\n  opacity: 1;\n}\n\n.omo-widget fieldset {\n  border: none;\n  position: relative;\n}\n\n.omo-widget form {\n  position: absolute;\n  top: 0;\n  right: 0;\n  background: black;\n  border-radius: calc(var(--sizeAdjusted) / 2);\n  padding-right: var(--sizeAdjusted);\n  z-index: -1;\n}\n\n.omo-widget [type="reset"] {\n  position: relative;\n}\n\n.omo-widget [type="reset"] svg {\n  width: 70%;\n  --svgFill: white;\n}\n\n.omo-widget [type="reset"]:active svg {\n  --svgFill: black;\n}\n\n.omo-widget__add,\n.omo-widget__substract {\n  position: relative;\n}\n\n.omo-widget__add::after,\n.omo-widget__substract::after {\n  --triangleSize: calc(var(--sizeAdjusted) / 3);\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translate(-50%, 0%) rotate(180deg);\n  transform: translate(-50%, 0%) rotate(180deg);\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 0 var(--triangleSize) var(--triangleSize) var(--triangleSize);\n  border-color: transparent transparent white transparent;\n}\n\n.omo-widget__add::after {\n  -webkit-transform: translate(-50%, -100%);\n  transform: translate(-50%, -100%);\n}\n\n.omo-widget {\n  --bgColor0: #eff3ee;\n  --bgColor1: #d9d8d8;\n  --bgColor2: #231f20;\n  --bgColor3: #9fb5de;\n  --bgColor4: #b894c4;\n  --bgColor5: #e2b0af;\n}\n\n.omo-widget [data-setting-name="background"] {\n  position: relative;\n  z-index: 1;\n}\n\n.omo-widget [data-setting-name="background"] form {\n  -webkit-transition: all var(--animationSpeed) ease var(--animationSpeed);\n  transition: all var(--animationSpeed) ease var(--animationSpeed);\n  height: calc(var(--sizeAdjusted) * 2 + 20px);\n  bottom: -10px;\n  top: auto;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n}\n\n.omo-widget [data-setting-name="background"] form > * {\n  -webkit-transition: opacity var(--animationSpeed) ease;\n  transition: opacity var(--animationSpeed) ease;\n  opacity: 0 !important;\n}\n\n.omo-widget [data-setting-name="background"] form:valid::after {\n  display: none;\n}\n\n.omo-widget [data-setting-name="background"] .omo-widget__toggle-options {\n  background: white;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__toggle-options:checked\n  ~ form {\n  -webkit-transition: width var(--animationSpeed) ease;\n  transition: width var(--animationSpeed) ease;\n  width: calc(var(--sizeAdjusted) * 3 + 20px);\n  padding: 10px;\n  border-top-right-radius: var(--sizeAdjusted/2);\n  border-bottom-right-radius: 0px;\n  margin-right: var(--sizeAdjusted);\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__toggle-options:checked\n  ~ form\n  > *:not(.omo-widget__reset) {\n  -webkit-transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  opacity: 1 !important;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__toggle-options:checked\n  ~ form:valid::before {\n  content: "";\n  position: absolute;\n  background: black;\n  width: calc(2 * var(--sizeAdjusted) + 20px);\n  height: calc(var(--sizeAdjusted) + 20px);\n  z-index: -1;\n  top: 0;\n  right: calc(100% - var(--sizeAdjusted) - 20px);\n  border-top-left-radius: calc(var(--sizeAdjusted) + 10px);\n  border-bottom-left-radius: calc(var(--sizeAdjusted) + 10px);\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__toggle-options:checked\n  ~ form:valid\n  .omo-widget__reset {\n  opacity: 1 !important;\n}\n\n.omo-widget [data-setting-name="background"]::after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: calc(100% - calc(2 * (var(--margin-size) + 2px)));\n  height: 0;\n  padding-top: calc(50% - 2 * var(--margin-size));\n  -webkit-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  border-radius: 50%;\n  border-top: calc(var(--size) / 2) solid white;\n  background: black;\n  pointer-events: none;\n}\n\n.omo-widget [data-setting-name="background"][data-value="0"] {\n  background: var(--bgColor0);\n}\n\n.omo-widget [data-setting-name="background"][data-value="1"] {\n  background: var(--bgColor1);\n}\n\n.omo-widget [data-setting-name="background"][data-value="2"] {\n  background: var(--bgColor2);\n}\n\n.omo-widget [data-setting-name="background"][data-value="3"] {\n  background: var(--bgColor3);\n}\n\n.omo-widget [data-setting-name="background"][data-value="4"] {\n  background: var(--bgColor4);\n}\n\n.omo-widget [data-setting-name="background"][data-value="5"] {\n  background: var(--bgColor5);\n}\n\n.omo-widget [data-setting-name="background"] .omo-widget__reset {\n  position: absolute;\n  right: calc(100% - 10px);\n  background: black;\n  left: auto !important;\n}\n\n.omo-widget [data-setting-name="background"] .omo-widget__reset:active {\n  background: white;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="0"] {\n  background: var(--bgColor0) !important;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="1"] {\n  background: var(--bgColor1) !important;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="2"] {\n  background: var(--bgColor2) !important;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="3"] {\n  background: var(--bgColor3) !important;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="4"] {\n  background: var(--bgColor4) !important;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice[value="5"] {\n  background: var(--bgColor5) !important;\n}\n\n.omo-widget\n  [data-setting-name="background"]\n  .omo-widget__background-choice:checked {\n  border-color: var(--primary);\n}\n\n.omo-widget\n  [data-setting-name="font-type"]\n  .omo-widget__toggle-options:checked\n  ~ form {\n  width: calc(4 * var(--sizeAdjusted));\n}\n\n.omo-widget\n  [data-setting-name="font-type"]\n  .omo-widget__toggle-options:checked\n  ~ form:valid {\n  -webkit-transition: width var(--animationSpeed) ease,\n    padding var(--animationSpeed) ease;\n  transition: width var(--animationSpeed) ease,\n    padding var(--animationSpeed) ease;\n  width: calc(5 * var(--sizeAdjusted));\n  padding-left: var(--sizeAdjusted);\n}\n\n.omo-widget\n  [data-setting-name="font-type"]\n  .omo-widget__toggle-options:checked\n  ~ form:valid\n  [type="reset"] {\n  -webkit-transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  transition: opacity var(--animationSpeed) ease var(--animationSpeed);\n  opacity: 1;\n}\n\n.omo-widget__type-preview {\n  position: relative;\n  pointer-events: none;\n}\n\n.omo-widget__type-preview svg {\n  display: none !important;\n}\n\n.omo-widget__type-preview:not([data-selected]) svg:nth-child(1),\n.omo-widget__type-preview[data-selected="O"] svg:nth-child(1) {\n  display: block !important;\n}\n\n.omo-widget__type-preview[data-selected="A"] svg:nth-child(2) {\n  display: block !important;\n}\n\n.omo-widget__type-preview[data-selected="B"] svg:nth-child(3) {\n  display: block !important;\n}\n\n.omo-widget__type-preview[data-selected="C"] svg:nth-child(4) {\n  display: block !important;\n}\n\n.omo-widget__type-preview[data-selected="D"] svg:nth-child(5) {\n  display: block !important;\n}\n\n.omo-widget__type-preview[data-selected="E"] svg:nth-child(6) {\n  display: block !important;\n}\n',""])},function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t=e[1]||"",o=e[3];if(!o)return t;if(n&&"function"==typeof btoa){var i=(r=o,s=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(d," */")),a=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot).concat(e," */")}));return[t].concat(a).concat([i]).join("\n")}var r,s,d;return[t].join("\n")}(n,e);return n[2]?"@media ".concat(n[2],"{").concat(t,"}"):t})).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var r=0;r<e.length;r++){var s=e[r];null!=s[0]&&o[s[0]]||(t&&!s[2]?s[2]=t:t&&(s[2]="(".concat(s[2],") and (").concat(t,")")),n.push(s))}},n}},function(e,n,t){var o,i,a={},r=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=o.apply(this,arguments)),i}),s=function(e){var n={};return function(t){if(void 0===n[t]){var o=e.call(this,t);if(o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}n[t]=o}return n[t]}}((function(e){return document.querySelector(e)})),d=null,c=0,l=[],g=t(7);function m(e,n){for(var t=0;t<e.length;t++){var o=e[t],i=a[o.id];if(i){i.refs++;for(var r=0;r<i.parts.length;r++)i.parts[r](o.parts[r]);for(;r<o.parts.length;r++)i.parts.push(w(o.parts[r],n))}else{var s=[];for(r=0;r<o.parts.length;r++)s.push(w(o.parts[r],n));a[o.id]={id:o.id,refs:1,parts:s}}}}function u(e,n){for(var t=[],o={},i=0;i<e.length;i++){var a=e[i],r=n.base?a[0]+n.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};o[r]?o[r].parts.push(s):t.push(o[r]={id:r,parts:[s]})}return t}function p(e,n){var t=s(e.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=l[l.length-1];if("top"===e.insertAt)o?o.nextSibling?t.insertBefore(n,o.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),l.push(n);else if("bottom"===e.insertAt)t.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=s(e.insertInto+" "+e.insertAt.before);t.insertBefore(n,i)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=l.indexOf(e);n>=0&&l.splice(n,1)}function _(e){var n=document.createElement("style");return e.attrs.type="text/css",f(n,e.attrs),p(e,n),n}function f(e,n){Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])}))}function w(e,n){var t,o,i,a;if(n.transform&&e.css){if(!(a=n.transform(e.css)))return function(){};e.css=a}if(n.singleton){var r=c++;t=d||(d=_(n)),o=y.bind(null,t,r,!1),i=y.bind(null,t,r,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(e){var n=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",f(n,e.attrs),p(e,n),n}(n),o=k.bind(null,t,n),i=function(){v(t),t.href&&URL.revokeObjectURL(t.href)}):(t=_(n),o=E.bind(null,t),i=function(){v(t)});return o(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;o(e=n)}else i()}}e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=r()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=u(e,n);return m(t,n),function(e){for(var o=[],i=0;i<t.length;i++){var r=t[i];(s=a[r.id]).refs--,o.push(s)}e&&m(u(e,n),n);for(i=0;i<o.length;i++){var s;if(0===(s=o[i]).refs){for(var d=0;d<s.parts.length;d++)s.parts[d]();delete a[s.id]}}}};var b,h=(b=[],function(e,n){return b[e]=n,b.filter(Boolean).join("\n")});function y(e,n,t,o){var i=t?"":o.css;if(e.styleSheet)e.styleSheet.cssText=h(n,i);else{var a=document.createTextNode(i),r=e.childNodes;r[n]&&e.removeChild(r[n]),r.length?e.insertBefore(a,r[n]):e.appendChild(a)}}function E(e,n){var t=n.css,o=n.media;if(o&&e.setAttribute("media",o),e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}function k(e,n,t){var o=t.css,i=t.sourceMap,a=void 0===n.convertToAbsoluteUrls&&i;(n.convertToAbsoluteUrls||a)&&(o=g(o)),i&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var r=new Blob([o],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(r),s&&URL.revokeObjectURL(s)}},function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var t=n.protocol+"//"+n.host,o=t+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,n){var i,a=n.trim().replace(/^"(.*)"$/,(function(e,n){return n})).replace(/^'(.*)'$/,(function(e,n){return n}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(a)?e:(i=0===a.indexOf("//")?a:0===a.indexOf("/")?t+a:o+a.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")}))}},function(e,n,t){"use strict";t.r(n);var o,i=t(0),a=t.n(i),r=(t(3),t(1)),s=t.n(r),d=[];var c=function(e){return Number(e)-Number(a.a.BODY_FONT_SIZE)},l=[{id:1,value:"bold"},{id:2,value:"bolder"},{id:3,value:"light"},{id:4,value:"lighter"}],g=function(e){return l.filter((function(n){return n.value===e}))},m=[{id:1,value:1.25},{id:2,value:1.5},{id:3,value:1.75},{id:4,value:2}],u=function(e){return m.filter((function(n){return n.value===e}))},p=[{id:1,value:1.8},{id:2,value:2},{id:3,value:2.2},{id:4,value:2.4}],v=function(e){return p.filter((function(n){return n.value===e}))},_=[{id:1,style:"OmoTypeA",value:"".concat("OmoType","A-")},{id:2,style:"OmoTypeB",value:"".concat("OmoType","B-")},{id:3,style:"OmoTypeC",value:"".concat("OmoType","C-")},{id:4,style:"OmoTypeD",value:"".concat("OmoType","D-")},{id:5,style:"OmoTypeE",value:"".concat("OmoType","E-")}],f=function(e){return _.filter((function(n){return n.value===e}))},w=[{id:0,background:"#EFF3EE"},{id:1,background:"#D9D8D8"},{id:2,background:"#231F20"},{id:3,background:"#9FB5DE"},{id:4,background:"#B894C4"},{id:5,background:"#E2B0AF"}],b=function(e){return w.filter((function(n){return n.id===Number(e)}))},h=function(e){return w.filter((function(n){return n.background===e}))},y=function(){var e,n=document.getElementById("applyOverides").checked,t=Number(document.getElementById("totem_bsize").value)+Number(a.a.BODY_FONT_SIZE),o=(e=document.getElementById("totem_body_ff").value,_.filter((function(n){return n.id===Number(e)}))),i=function(e){return l.filter((function(n){return n.id===Number(e)}))}(document.getElementById("totem_font_weight").value),r=function(e){return m.filter((function(n){return n.id===Number(e)}))}(document.getElementById("totem_bspacing").value),s=function(e){return p.filter((function(n){return n.id===Number(e)}))}(document.getElementById("totem_bheight").value),d=document.getElementById("selectedBackround").getAttribute("data-value"),c=b(d);return{checked:n,bodyFontSize:t,bodyFontFamily:o[0].value,bodyFontWeight:i[0].value,bodyFontSpacing:r[0].value,bodyLineHeight:s[0].value,bgColor:c[0].background}};function E(){var e=y();console.log(e);var n="transparent"===e.bgColor?"":a.a.setBackGroundColor(a.a.BACKGROUND_COLOR_ELEMENTS,e.bgColor);n+=a.a.setBodyTextStyle(a.a.BODY_STYLE,e.bodyFontFamily,e.bodyFontWeight,e.bodyFontSize,e.bodyFontSpacing,e.bodyLineHeight,e.bgColor),n+=a.a.setOmoWidgetStyle(a.a.OMO_WIDGET_ELEMENTS,a.a.omoWidgetStyle);var t=a.a.TWEAK();return console.log(t),n+=t,console.log(n),n}var k=function(e){var n="".concat(a.a.OMO_WIDGET_COOKIE,"_").concat(e),t=JSON.stringify(y());document.cookie="".concat(n,"=").concat(t,";"),console.log("saved:".concat(t))},S=function(){var e=document.cookie.split(";").filter((function(e){return e.startsWith(" ".concat(a.a.OMO_WIDGET_COOKIE))}));if(e.length>0){var n=e[0].split("=")[1];if(function(e){if(e.checked){var n=document.querySelector("#omo-widget");n.classList.add("has-changes"),n.querySelector(".omo-widget__main-toggle").parentElement.classList.toggle("power-off")}document.getElementById("applyOverides").checked=e.checked,document.getElementById("totem_bsize").value=c(e.bodyFontSize),document.getElementById("totem_body_ff").value=f(e.bodyFontFamily)[0].id,document.getElementById("totem_font_weight").value=g(e.bodyFontWeight)[0].id,document.getElementById("totem_bspacing").value=u(e.bodyFontSpacing)[0].id,document.getElementById("totem_bheight").value=v(e.bodyLineHeight)[0].id,document.getElementById("selectedBackround").setAttribute("data-value",h(e.bgColor)[0].id)}(JSON.parse(n)),!y().checked)document.querySelector("#omo-widget").classList.add("has-changes"),T()}};function O(){var e=document.getElementsByTagName("head")[0],n=e.getElementsByTagName("style").length;return e.getElementsByTagName("style")[n-1]}var T=function(){var e=document.getElementById("omolab_style_w"),n=O();if(e)return n.innerHTML=E(),void function(e){if(e){var n=document.createTextNode(" "),t=e.style.display;e.appendChild(n),e.style.display="none",setTimeout((function(){e.style.display=t,n.parentNode.removeChild(n)}),0)}}(n);var t=document.createElement("style");t.type="text/css",t.id="omolab_style_w",n=E(),t.styleSheet?t.styleSheet.cssText=n:t.appendChild(document.createTextNode(n)),document.getElementsByTagName("head")[0].appendChild(t)},x=function(){var e=document.getElementById("omolab_style_w"),n=document.getElementsByTagName("head")[0],t=O();console.log(e===t),e===t&&n.removeChild(t)},A=function(e,n){var t,i,r,c,g,u,v,f,h,y,E,O,A,L,B,N,D,C,I=document.createElement("div");for(I.innerHTML=s.a,console.log(e),console.log(n),function(e){var n=e.querySelector("body");n&&!n.classList.contains(a.a.OMOLAB_BODY_CLASS)&&n.classList.add(a.a.OMOLAB_BODY_CLASS)}(document),o=document.getElementsByClassName("omo-widget-container")[0];I.children.length>0;){var z=I.children[0];d.push(z),o.appendChild(z)}t=document.querySelector("#omo-widget"),i=t.querySelector(".omo-widget__main-toggle"),r=t.querySelectorAll("form"),c=t.querySelectorAll(".omo-widget__toggle-options"),g=t.querySelectorAll(".omo-widget__option-value"),u=t.querySelectorAll('[type="button"]'),v=t.querySelectorAll(".omo-widget__reset"),f=t.querySelector('[data-setting-name="background"] form'),h=f.querySelector(".omo-widget__reset"),y=t.querySelector(".omo-widget__type-preview"),E=t.querySelector(".omo-widget__power-toggle"),O=function(){c.forEach((function(e){e.checked=!1,e.setAttribute("aria-selected","false")}))},A=function(e){y.setAttribute("data-selected",["O","A","B","C","D","E"][e])},L=function(e){var n=e.target.parentElement.querySelector("[type='number'"),t=parseInt(n.value),o=e.target.classList.contains("omo-widget__add");o&&t==n.getAttribute("max")||!o&&0==t||(n.value=o?t+1:t-1,B(),"totem_body_ff"===n.id&&A(n.value))},B=function(){var e=0;Array.from(r).forEach((function(n){console.log(n.checkValidity()),n.checkValidity()&&e++})),T(),k(""),t.classList[e>0?"add":"remove"]("has-changes")},N=function(e){var n="ArrowDown"==e.code,t="ArrowUp"==e.code;if("Tab"==e.code)return e.preventDefault(),void e.target.parentElement.parentElement.nextElementSibling.querySelector("[type='radio']").focus();var o=e.target.parentElement.querySelector(".add"),i=e.target.parentElement.querySelector(".substract");A(e.target.value),n?(i.classList.add("active"),setTimeout((function(){i.classList.remove("active")}),20),1==e.target.value&&(e.target.value=0,A(0))):t&&(o.classList.add("active"),setTimeout((function(){o.classList.remove("active")}),20))},D=function(){O(),setTimeout((function(){B()}))},C=function(e){var n=e.target;if(console.log(e.target),e.code){var t="Tab"==e.code,o="Space"==e.code,i="Enter"==e.code;if(t&&"false"==n.getAttribute("aria-selected"))return e.preventDefault(),void n.parentElement.nextElementSibling.querySelector("[type='radio']").focus();if(!o&&!i)return}"true"==n.getAttribute("aria-selected")?(n.setAttribute("aria-selected","false"),n.checked=!1):(O(),n.setAttribute("aria-selected","true"),n.checked=!0)},i.addEventListener("click",O),E.addEventListener("click",(function(e){console.log(e.target),i.parentElement.classList.toggle("power-off")?x():T(),k(""),O()})),Array.from(c).forEach((function(e){e.addEventListener("click",C),e.addEventListener("keydown",C)})),Array.from(g).forEach((function(e){e.addEventListener("keydown",N),e.addEventListener("change",B)})),Array.from(u).forEach((function(e){e.addEventListener("click",L)})),Array.from(v).forEach((function(e){e.addEventListener("click",D)})),f.addEventListener("change",(function(e){f.parentElement.setAttribute("data-value",e.srcElement.value),B()})),h.addEventListener("click",(function(){f.parentElement.setAttribute("data-value",-1)})),a.a.readConfigurationFromFile(n.config).then((function(e){_.push({id:0,value:a.a.BODY_FONT_FAMILY}),p.push({id:0,value:a.a.BODY_LINE_HEIGHT}),l.push({id:0,value:a.a.BODY_FONT_WEIGHT}),m.push({id:0,value:a.a.BODY_FONT_SPACING}),w.push({id:-1,value:a.a.DEFAULT_BACKGROUND});var n=document.getElementById("selectedBackround");console.log(b(-1)),n.setAttribute("data-value",b(-1)[0].id),S()})).catch((function(e){console.log(e),alert(e)}))},L=["init","message"],B={};function N(e,n){if(!e)throw Error("API method required");if(e=e.toLowerCase(),-1===L.indexOf(e))throw Error("Method ".concat(e," is not supported"));switch(console.log("Handling API call ".concat(e),n),e){case"message":A(n,B);break;default:console.warn("No handler defined for ".concat(e))}}function D(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t]);return e}!function(e){console.log("Omo-Widget starting");var n=e[e["Omo-Widget"]],t=n.q;if(t)for(var o=0;o<t.length;o++)"init"===t[o][0].toLowerCase()?B=D(B,t[o][1]):N(t[o][0],t[o][1]);(n=N).configurations=B}(window)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,